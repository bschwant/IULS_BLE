ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32wbxx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	NMI_Handler:
  27              	.LFB1669:
  28              		.file 1 "Core/Src/stm32wbxx_it.c"
   1:Core/Src/stm32wbxx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32wbxx_it.c **** /**
   3:Core/Src/stm32wbxx_it.c ****   ******************************************************************************
   4:Core/Src/stm32wbxx_it.c ****   * @file    stm32wbxx_it.c
   5:Core/Src/stm32wbxx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32wbxx_it.c ****   ******************************************************************************
   7:Core/Src/stm32wbxx_it.c ****   * @attention
   8:Core/Src/stm32wbxx_it.c ****   *
   9:Core/Src/stm32wbxx_it.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32wbxx_it.c ****   * All rights reserved.
  11:Core/Src/stm32wbxx_it.c ****   *
  12:Core/Src/stm32wbxx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32wbxx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32wbxx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32wbxx_it.c ****   *
  16:Core/Src/stm32wbxx_it.c ****   ******************************************************************************
  17:Core/Src/stm32wbxx_it.c ****   */
  18:Core/Src/stm32wbxx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32wbxx_it.c **** 
  20:Core/Src/stm32wbxx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32wbxx_it.c **** #include "main.h"
  22:Core/Src/stm32wbxx_it.c **** #include "stm32wbxx_it.h"
  23:Core/Src/stm32wbxx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32wbxx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32wbxx_it.c **** #include "queue.h"
  26:Core/Src/stm32wbxx_it.c **** #include <stdio.h>
  27:Core/Src/stm32wbxx_it.c **** #include "app_debug.h"
  28:Core/Src/stm32wbxx_it.c **** #include "dbg_trace.h"
  29:Core/Src/stm32wbxx_it.c **** /* USER CODE END Includes */
  30:Core/Src/stm32wbxx_it.c **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 2


  31:Core/Src/stm32wbxx_it.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/stm32wbxx_it.c **** /* USER CODE BEGIN TD */
  33:Core/Src/stm32wbxx_it.c **** 
  34:Core/Src/stm32wbxx_it.c **** /* USER CODE END TD */
  35:Core/Src/stm32wbxx_it.c **** 
  36:Core/Src/stm32wbxx_it.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/stm32wbxx_it.c **** /* USER CODE BEGIN PD */
  38:Core/Src/stm32wbxx_it.c **** 
  39:Core/Src/stm32wbxx_it.c **** /* USER CODE END PD */
  40:Core/Src/stm32wbxx_it.c **** 
  41:Core/Src/stm32wbxx_it.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/stm32wbxx_it.c **** /* USER CODE BEGIN PM */
  43:Core/Src/stm32wbxx_it.c **** 
  44:Core/Src/stm32wbxx_it.c **** /* USER CODE END PM */
  45:Core/Src/stm32wbxx_it.c **** 
  46:Core/Src/stm32wbxx_it.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/stm32wbxx_it.c **** /* USER CODE BEGIN PV */
  48:Core/Src/stm32wbxx_it.c **** extern queue_t rx_queue;
  49:Core/Src/stm32wbxx_it.c **** /* USER CODE END PV */
  50:Core/Src/stm32wbxx_it.c **** 
  51:Core/Src/stm32wbxx_it.c **** /* Private function prototypes -----------------------------------------------*/
  52:Core/Src/stm32wbxx_it.c **** /* USER CODE BEGIN PFP */
  53:Core/Src/stm32wbxx_it.c **** 
  54:Core/Src/stm32wbxx_it.c **** /* USER CODE END PFP */
  55:Core/Src/stm32wbxx_it.c **** 
  56:Core/Src/stm32wbxx_it.c **** /* Private user code ---------------------------------------------------------*/
  57:Core/Src/stm32wbxx_it.c **** /* USER CODE BEGIN 0 */
  58:Core/Src/stm32wbxx_it.c **** 
  59:Core/Src/stm32wbxx_it.c **** /* USER CODE END 0 */
  60:Core/Src/stm32wbxx_it.c **** 
  61:Core/Src/stm32wbxx_it.c **** /* External variables --------------------------------------------------------*/
  62:Core/Src/stm32wbxx_it.c **** extern IPCC_HandleTypeDef hipcc;
  63:Core/Src/stm32wbxx_it.c **** extern DMA_HandleTypeDef hdma_lpuart1_tx;
  64:Core/Src/stm32wbxx_it.c **** extern DMA_HandleTypeDef hdma_usart1_tx;
  65:Core/Src/stm32wbxx_it.c **** extern UART_HandleTypeDef hlpuart1;
  66:Core/Src/stm32wbxx_it.c **** extern UART_HandleTypeDef huart1;
  67:Core/Src/stm32wbxx_it.c **** extern RTC_HandleTypeDef hrtc;
  68:Core/Src/stm32wbxx_it.c **** /* USER CODE BEGIN EV */
  69:Core/Src/stm32wbxx_it.c **** // extern UART_HandleTypeDef huart1;
  70:Core/Src/stm32wbxx_it.c **** // extern UART_HandleTypeDef hlpuart1;
  71:Core/Src/stm32wbxx_it.c **** extern queue_t rx_queue;
  72:Core/Src/stm32wbxx_it.c **** /* USER CODE END EV */
  73:Core/Src/stm32wbxx_it.c **** 
  74:Core/Src/stm32wbxx_it.c **** /******************************************************************************/
  75:Core/Src/stm32wbxx_it.c **** /*           Cortex Processor Interruption and Exception Handlers          */
  76:Core/Src/stm32wbxx_it.c **** /******************************************************************************/
  77:Core/Src/stm32wbxx_it.c **** /**
  78:Core/Src/stm32wbxx_it.c ****   * @brief This function handles Non maskable interrupt.
  79:Core/Src/stm32wbxx_it.c ****   */
  80:Core/Src/stm32wbxx_it.c **** void NMI_Handler(void)
  81:Core/Src/stm32wbxx_it.c **** {
  29              		.loc 1 81 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 3


  35              	.L2:
  82:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  83:Core/Src/stm32wbxx_it.c **** 
  84:Core/Src/stm32wbxx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  85:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  86:Core/Src/stm32wbxx_it.c ****   while (1)
  36              		.loc 1 86 3 discriminator 1 view .LVU1
  87:Core/Src/stm32wbxx_it.c ****   {
  88:Core/Src/stm32wbxx_it.c ****   }
  37              		.loc 1 88 3 discriminator 1 view .LVU2
  86:Core/Src/stm32wbxx_it.c ****   {
  38              		.loc 1 86 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE1669:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	HardFault_Handler:
  52              	.LFB1670:
  89:Core/Src/stm32wbxx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  90:Core/Src/stm32wbxx_it.c **** }
  91:Core/Src/stm32wbxx_it.c **** 
  92:Core/Src/stm32wbxx_it.c **** /**
  93:Core/Src/stm32wbxx_it.c ****   * @brief This function handles Hard fault interrupt.
  94:Core/Src/stm32wbxx_it.c ****   */
  95:Core/Src/stm32wbxx_it.c **** void HardFault_Handler(void)
  96:Core/Src/stm32wbxx_it.c **** {
  53              		.loc 1 96 1 view -0
  54              		.cfi_startproc
  55              		@ Volatile: function does not return.
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.L4:
  97:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  98:Core/Src/stm32wbxx_it.c **** 
  99:Core/Src/stm32wbxx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 100:Core/Src/stm32wbxx_it.c ****   while (1)
  60              		.loc 1 100 3 discriminator 1 view .LVU5
 101:Core/Src/stm32wbxx_it.c ****   {
 102:Core/Src/stm32wbxx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 103:Core/Src/stm32wbxx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 104:Core/Src/stm32wbxx_it.c ****   }
  61              		.loc 1 104 3 discriminator 1 view .LVU6
 100:Core/Src/stm32wbxx_it.c ****   {
  62              		.loc 1 100 9 discriminator 1 view .LVU7
  63 0000 FEE7     		b	.L4
  64              		.cfi_endproc
  65              	.LFE1670:
  67              		.section	.text.MemManage_Handler,"ax",%progbits
  68              		.align	1
  69              		.global	MemManage_Handler
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 4


  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv4-sp-d16
  75              	MemManage_Handler:
  76              	.LFB1671:
 105:Core/Src/stm32wbxx_it.c **** }
 106:Core/Src/stm32wbxx_it.c **** 
 107:Core/Src/stm32wbxx_it.c **** /**
 108:Core/Src/stm32wbxx_it.c ****   * @brief This function handles Memory management fault.
 109:Core/Src/stm32wbxx_it.c ****   */
 110:Core/Src/stm32wbxx_it.c **** void MemManage_Handler(void)
 111:Core/Src/stm32wbxx_it.c **** {
  77              		.loc 1 111 1 view -0
  78              		.cfi_startproc
  79              		@ Volatile: function does not return.
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.L6:
 112:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 113:Core/Src/stm32wbxx_it.c **** 
 114:Core/Src/stm32wbxx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 115:Core/Src/stm32wbxx_it.c ****   while (1)
  84              		.loc 1 115 3 discriminator 1 view .LVU9
 116:Core/Src/stm32wbxx_it.c ****   {
 117:Core/Src/stm32wbxx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 118:Core/Src/stm32wbxx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 119:Core/Src/stm32wbxx_it.c ****   }
  85              		.loc 1 119 3 discriminator 1 view .LVU10
 115:Core/Src/stm32wbxx_it.c ****   {
  86              		.loc 1 115 9 discriminator 1 view .LVU11
  87 0000 FEE7     		b	.L6
  88              		.cfi_endproc
  89              	.LFE1671:
  91              		.section	.text.BusFault_Handler,"ax",%progbits
  92              		.align	1
  93              		.global	BusFault_Handler
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu fpv4-sp-d16
  99              	BusFault_Handler:
 100              	.LFB1672:
 120:Core/Src/stm32wbxx_it.c **** }
 121:Core/Src/stm32wbxx_it.c **** 
 122:Core/Src/stm32wbxx_it.c **** /**
 123:Core/Src/stm32wbxx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 124:Core/Src/stm32wbxx_it.c ****   */
 125:Core/Src/stm32wbxx_it.c **** void BusFault_Handler(void)
 126:Core/Src/stm32wbxx_it.c **** {
 101              		.loc 1 126 1 view -0
 102              		.cfi_startproc
 103              		@ Volatile: function does not return.
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 5


 107              	.L8:
 127:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 128:Core/Src/stm32wbxx_it.c **** 
 129:Core/Src/stm32wbxx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 130:Core/Src/stm32wbxx_it.c ****   while (1)
 108              		.loc 1 130 3 discriminator 1 view .LVU13
 131:Core/Src/stm32wbxx_it.c ****   {
 132:Core/Src/stm32wbxx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 133:Core/Src/stm32wbxx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 134:Core/Src/stm32wbxx_it.c ****   }
 109              		.loc 1 134 3 discriminator 1 view .LVU14
 130:Core/Src/stm32wbxx_it.c ****   {
 110              		.loc 1 130 9 discriminator 1 view .LVU15
 111 0000 FEE7     		b	.L8
 112              		.cfi_endproc
 113              	.LFE1672:
 115              		.section	.text.UsageFault_Handler,"ax",%progbits
 116              		.align	1
 117              		.global	UsageFault_Handler
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu fpv4-sp-d16
 123              	UsageFault_Handler:
 124              	.LFB1673:
 135:Core/Src/stm32wbxx_it.c **** }
 136:Core/Src/stm32wbxx_it.c **** 
 137:Core/Src/stm32wbxx_it.c **** /**
 138:Core/Src/stm32wbxx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 139:Core/Src/stm32wbxx_it.c ****   */
 140:Core/Src/stm32wbxx_it.c **** void UsageFault_Handler(void)
 141:Core/Src/stm32wbxx_it.c **** {
 125              		.loc 1 141 1 view -0
 126              		.cfi_startproc
 127              		@ Volatile: function does not return.
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131              	.L10:
 142:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 143:Core/Src/stm32wbxx_it.c **** 
 144:Core/Src/stm32wbxx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 145:Core/Src/stm32wbxx_it.c ****   while (1)
 132              		.loc 1 145 3 discriminator 1 view .LVU17
 146:Core/Src/stm32wbxx_it.c ****   {
 147:Core/Src/stm32wbxx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 148:Core/Src/stm32wbxx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 149:Core/Src/stm32wbxx_it.c ****   }
 133              		.loc 1 149 3 discriminator 1 view .LVU18
 145:Core/Src/stm32wbxx_it.c ****   {
 134              		.loc 1 145 9 discriminator 1 view .LVU19
 135 0000 FEE7     		b	.L10
 136              		.cfi_endproc
 137              	.LFE1673:
 139              		.section	.text.SVC_Handler,"ax",%progbits
 140              		.align	1
 141              		.global	SVC_Handler
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 6


 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu fpv4-sp-d16
 147              	SVC_Handler:
 148              	.LFB1674:
 150:Core/Src/stm32wbxx_it.c **** }
 151:Core/Src/stm32wbxx_it.c **** 
 152:Core/Src/stm32wbxx_it.c **** /**
 153:Core/Src/stm32wbxx_it.c ****   * @brief This function handles System service call via SWI instruction.
 154:Core/Src/stm32wbxx_it.c ****   */
 155:Core/Src/stm32wbxx_it.c **** void SVC_Handler(void)
 156:Core/Src/stm32wbxx_it.c **** {
 149              		.loc 1 156 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 157:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 158:Core/Src/stm32wbxx_it.c **** 
 159:Core/Src/stm32wbxx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 160:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 161:Core/Src/stm32wbxx_it.c **** 
 162:Core/Src/stm32wbxx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 163:Core/Src/stm32wbxx_it.c **** }
 154              		.loc 1 163 1 view .LVU21
 155 0000 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE1674:
 159              		.section	.text.DebugMon_Handler,"ax",%progbits
 160              		.align	1
 161              		.global	DebugMon_Handler
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu fpv4-sp-d16
 167              	DebugMon_Handler:
 168              	.LFB1675:
 164:Core/Src/stm32wbxx_it.c **** 
 165:Core/Src/stm32wbxx_it.c **** /**
 166:Core/Src/stm32wbxx_it.c ****   * @brief This function handles Debug monitor.
 167:Core/Src/stm32wbxx_it.c ****   */
 168:Core/Src/stm32wbxx_it.c **** void DebugMon_Handler(void)
 169:Core/Src/stm32wbxx_it.c **** {
 169              		.loc 1 169 1 view -0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 170:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 171:Core/Src/stm32wbxx_it.c **** 
 172:Core/Src/stm32wbxx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 173:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 174:Core/Src/stm32wbxx_it.c **** 
 175:Core/Src/stm32wbxx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 176:Core/Src/stm32wbxx_it.c **** }
 174              		.loc 1 176 1 view .LVU23
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 7


 175 0000 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE1675:
 179              		.section	.text.PendSV_Handler,"ax",%progbits
 180              		.align	1
 181              		.global	PendSV_Handler
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv4-sp-d16
 187              	PendSV_Handler:
 188              	.LFB1676:
 177:Core/Src/stm32wbxx_it.c **** 
 178:Core/Src/stm32wbxx_it.c **** /**
 179:Core/Src/stm32wbxx_it.c ****   * @brief This function handles Pendable request for system service.
 180:Core/Src/stm32wbxx_it.c ****   */
 181:Core/Src/stm32wbxx_it.c **** void PendSV_Handler(void)
 182:Core/Src/stm32wbxx_it.c **** {
 189              		.loc 1 182 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 183:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 184:Core/Src/stm32wbxx_it.c **** 
 185:Core/Src/stm32wbxx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 186:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 187:Core/Src/stm32wbxx_it.c **** 
 188:Core/Src/stm32wbxx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 189:Core/Src/stm32wbxx_it.c **** }
 194              		.loc 1 189 1 view .LVU25
 195 0000 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE1676:
 199              		.section	.text.SysTick_Handler,"ax",%progbits
 200              		.align	1
 201              		.global	SysTick_Handler
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu fpv4-sp-d16
 207              	SysTick_Handler:
 208              	.LFB1677:
 190:Core/Src/stm32wbxx_it.c **** 
 191:Core/Src/stm32wbxx_it.c **** /**
 192:Core/Src/stm32wbxx_it.c ****   * @brief This function handles System tick timer.
 193:Core/Src/stm32wbxx_it.c ****   */
 194:Core/Src/stm32wbxx_it.c **** void SysTick_Handler(void)
 195:Core/Src/stm32wbxx_it.c **** {
 209              		.loc 1 195 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213 0000 08B5     		push	{r3, lr}
 214              	.LCFI0:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 3, -8
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 8


 217              		.cfi_offset 14, -4
 196:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 197:Core/Src/stm32wbxx_it.c **** 
 198:Core/Src/stm32wbxx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 199:Core/Src/stm32wbxx_it.c ****   HAL_IncTick();
 218              		.loc 1 199 3 view .LVU27
 219 0002 FFF7FEFF 		bl	HAL_IncTick
 220              	.LVL0:
 200:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 201:Core/Src/stm32wbxx_it.c **** 
 202:Core/Src/stm32wbxx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 203:Core/Src/stm32wbxx_it.c **** }
 221              		.loc 1 203 1 is_stmt 0 view .LVU28
 222 0006 08BD     		pop	{r3, pc}
 223              		.cfi_endproc
 224              	.LFE1677:
 226              		.section	.text.RTC_WKUP_IRQHandler,"ax",%progbits
 227              		.align	1
 228              		.global	RTC_WKUP_IRQHandler
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu fpv4-sp-d16
 234              	RTC_WKUP_IRQHandler:
 235              	.LFB1678:
 204:Core/Src/stm32wbxx_it.c **** 
 205:Core/Src/stm32wbxx_it.c **** /******************************************************************************/
 206:Core/Src/stm32wbxx_it.c **** /* STM32WBxx Peripheral Interrupt Handlers                                    */
 207:Core/Src/stm32wbxx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 208:Core/Src/stm32wbxx_it.c **** /* For the available peripheral interrupt handler names,                      */
 209:Core/Src/stm32wbxx_it.c **** /* please refer to the startup file (startup_stm32wbxx.s).                    */
 210:Core/Src/stm32wbxx_it.c **** /******************************************************************************/
 211:Core/Src/stm32wbxx_it.c **** 
 212:Core/Src/stm32wbxx_it.c **** /**
 213:Core/Src/stm32wbxx_it.c ****   * @brief This function handles RTC wake-up interrupt through EXTI line 19.
 214:Core/Src/stm32wbxx_it.c ****   */
 215:Core/Src/stm32wbxx_it.c **** void RTC_WKUP_IRQHandler(void)
 216:Core/Src/stm32wbxx_it.c **** {
 236              		.loc 1 216 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 08B5     		push	{r3, lr}
 241              	.LCFI1:
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 3, -8
 244              		.cfi_offset 14, -4
 217:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN RTC_WKUP_IRQn 0 */
 218:Core/Src/stm32wbxx_it.c **** 
 219:Core/Src/stm32wbxx_it.c ****   /* USER CODE END RTC_WKUP_IRQn 0 */
 220:Core/Src/stm32wbxx_it.c ****   HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 245              		.loc 1 220 3 view .LVU30
 246 0002 FFF7FEFF 		bl	HW_TS_RTC_Wakeup_Handler
 247              	.LVL1:
 221:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
 222:Core/Src/stm32wbxx_it.c **** 
 223:Core/Src/stm32wbxx_it.c ****   /* USER CODE END RTC_WKUP_IRQn 1 */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 9


 224:Core/Src/stm32wbxx_it.c **** }
 248              		.loc 1 224 1 is_stmt 0 view .LVU31
 249 0006 08BD     		pop	{r3, pc}
 250              		.cfi_endproc
 251              	.LFE1678:
 253              		.section	.text.DMA1_Channel4_IRQHandler,"ax",%progbits
 254              		.align	1
 255              		.global	DMA1_Channel4_IRQHandler
 256              		.syntax unified
 257              		.thumb
 258              		.thumb_func
 259              		.fpu fpv4-sp-d16
 261              	DMA1_Channel4_IRQHandler:
 262              	.LFB1679:
 225:Core/Src/stm32wbxx_it.c **** 
 226:Core/Src/stm32wbxx_it.c **** /**
 227:Core/Src/stm32wbxx_it.c ****   * @brief This function handles DMA1 channel4 global interrupt.
 228:Core/Src/stm32wbxx_it.c ****   */
 229:Core/Src/stm32wbxx_it.c **** void DMA1_Channel4_IRQHandler(void)
 230:Core/Src/stm32wbxx_it.c **** {
 263              		.loc 1 230 1 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267 0000 08B5     		push	{r3, lr}
 268              	.LCFI2:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 3, -8
 271              		.cfi_offset 14, -4
 231:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 232:Core/Src/stm32wbxx_it.c **** 
 233:Core/Src/stm32wbxx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 234:Core/Src/stm32wbxx_it.c ****   HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 272              		.loc 1 234 3 view .LVU33
 273 0002 0248     		ldr	r0, .L20
 274 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 275              	.LVL2:
 235:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 236:Core/Src/stm32wbxx_it.c **** 
 237:Core/Src/stm32wbxx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 238:Core/Src/stm32wbxx_it.c **** }
 276              		.loc 1 238 1 is_stmt 0 view .LVU34
 277 0008 08BD     		pop	{r3, pc}
 278              	.L21:
 279 000a 00BF     		.align	2
 280              	.L20:
 281 000c 00000000 		.word	hdma_lpuart1_tx
 282              		.cfi_endproc
 283              	.LFE1679:
 285              		.section	.text.USART1_IRQHandler,"ax",%progbits
 286              		.align	1
 287              		.global	USART1_IRQHandler
 288              		.syntax unified
 289              		.thumb
 290              		.thumb_func
 291              		.fpu fpv4-sp-d16
 293              	USART1_IRQHandler:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 10


 294              	.LFB1680:
 239:Core/Src/stm32wbxx_it.c **** 
 240:Core/Src/stm32wbxx_it.c **** /**
 241:Core/Src/stm32wbxx_it.c ****   * @brief This function handles USART1 global interrupt.
 242:Core/Src/stm32wbxx_it.c ****   */
 243:Core/Src/stm32wbxx_it.c **** void USART1_IRQHandler(void)
 244:Core/Src/stm32wbxx_it.c **** {
 295              		.loc 1 244 1 is_stmt 1 view -0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299 0000 08B5     		push	{r3, lr}
 300              	.LCFI3:
 301              		.cfi_def_cfa_offset 8
 302              		.cfi_offset 3, -8
 303              		.cfi_offset 14, -4
 245:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 246:Core/Src/stm32wbxx_it.c ****   // uint8_t ch;
 247:Core/Src/stm32wbxx_it.c ****   // printf("\r\nhere:%c", ch);
 248:Core/Src/stm32wbxx_it.c ****   // ch = getchar();
 249:Core/Src/stm32wbxx_it.c ****   // if (enqueue(&rx_queue,ch)) {
 250:Core/Src/stm32wbxx_it.c ****   //   dequeue(&rx_queue);
 251:Core/Src/stm32wbxx_it.c ****   //   enqueue(&rx_queue,ch);
 252:Core/Src/stm32wbxx_it.c ****   // }
 253:Core/Src/stm32wbxx_it.c ****  if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 304              		.loc 1 253 2 view .LVU36
 305              	.LVL3:
 306              	.LBB11:
 307              	.LBI11:
 308              		.file 2 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h"
   1:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
   2:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @file    stm32wbxx_ll_usart.h
   4:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @attention
   8:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *
   9:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * All rights reserved.
  11:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *
  12:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * in the root directory of this software component.
  14:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *
  16:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ******************************************************************************
  17:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  18:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  19:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #ifndef STM32WBxx_LL_USART_H
  21:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define STM32WBxx_LL_USART_H
  22:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  23:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #ifdef __cplusplus
  24:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** extern "C" {
  25:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #endif
  26:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  27:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 11


  28:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #include "stm32wbxx.h"
  29:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  30:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @addtogroup STM32WBxx_LL_Driver
  31:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  32:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  33:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  34:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #if defined (USART1)
  35:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  36:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL USART
  37:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  38:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  39:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  40:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Private_Variables USART Private Variables
  43:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  44:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  45:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Array used to get the USART prescaler division decimal values versus @ref USART_LL_EC_PRESCALER 
  46:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** static const uint16_t USART_PRESCALER_TAB[] =
  47:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
  48:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)1,
  49:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)2,
  50:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)4,
  51:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)6,
  52:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)8,
  53:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)10,
  54:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)12,
  55:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)16,
  56:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)32,
  57:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)64,
  58:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)128,
  59:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)256
  60:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** };
  61:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
  62:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
  63:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  64:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  65:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  66:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  67:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  68:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  69:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
  70:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
  71:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  72:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  73:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  74:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  75:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  76:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  77:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  78:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
  79:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
  80:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  81:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  82:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  83:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  84:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 12


  85:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  86:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  87:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  88:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  89:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
  90:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief LL USART Init Structure definition
  91:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  92:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** typedef struct
  93:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
  94:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t PrescalerValue;            /*!< Specifies the Prescaler to compute the communication bau
  95:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PRESCA
  96:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  97:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  98:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetPrescaler().*/
  99:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
 101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetBaudRate().*/
 104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
 106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
 107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetDataWidth().*/
 110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
 112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
 113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetStopBitsLength().*/
 116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetParity().*/
 122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetTransferDirection().*/
 128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetHWFlowCtrl().*/
 134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetOverSampling().*/
 140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** } LL_USART_InitTypeDef;
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 13


 142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** typedef struct
 147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            For more details, refer to description of this function.
 154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPolarity().
 160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            For more details, refer to description of this function.
 161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPhase().
 167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            For more details, refer to description of this function.
 168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            functions @ref LL_USART_SetLastClkPulseOutput().
 175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            For more details, refer to description of this function.
 176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_CLEAR_FLAG Clear Flags Defines
 190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_WriteReg function
 191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_PECF                       USART_ICR_PECF                /*!< Parity error fla
 194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_FECF                       USART_ICR_FECF                /*!< Framing error fl
 195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_NECF                       USART_ICR_NECF                /*!< Noise error dete
 196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_ORECF                      USART_ICR_ORECF               /*!< Overrun error fl
 197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_IDLECF                     USART_ICR_IDLECF              /*!< Idle line detect
 198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_TXFECF                     USART_ICR_TXFECF              /*!< TX FIFO Empty Cl
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 14


 199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_TCCF                       USART_ICR_TCCF                /*!< Transmission com
 200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_TCBGTCF                    USART_ICR_TCBGTCF             /*!< Transmission com
 201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_LBDCF                      USART_ICR_LBDCF               /*!< LIN break detect
 202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_CTSCF                      USART_ICR_CTSCF               /*!< CTS flag */
 203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_RTOCF                      USART_ICR_RTOCF               /*!< Receiver timeout
 204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_EOBCF                      USART_ICR_EOBCF               /*!< End of block fla
 205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_UDRCF                      USART_ICR_UDRCF               /*!< SPI Slave Underr
 206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_CMCF                       USART_ICR_CMCF                /*!< Character match 
 207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_WUCF                       USART_ICR_WUCF                /*!< Wakeup from Stop
 208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_PE                         USART_ISR_PE                  /*!< Parity error fla
 217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_FE                         USART_ISR_FE                  /*!< Framing error fl
 218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_NE                         USART_ISR_NE                  /*!< Noise detected f
 219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_ORE                        USART_ISR_ORE                 /*!< Overrun error fl
 220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_IDLE                       USART_ISR_IDLE                /*!< Idle line detect
 221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_RXNE_RXFNE                 USART_ISR_RXNE_RXFNE          /*!< Read data regist
 222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TC                         USART_ISR_TC                  /*!< Transmission com
 223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TXE_TXFNF                  USART_ISR_TXE_TXFNF           /*!< Transmit data re
 224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_LBDF                       USART_ISR_LBDF                /*!< LIN break detect
 225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_CTSIF                      USART_ISR_CTSIF               /*!< CTS interrupt fl
 226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_CTS                        USART_ISR_CTS                 /*!< CTS flag */
 227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_RTOF                       USART_ISR_RTOF                /*!< Receiver timeout
 228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_EOBF                       USART_ISR_EOBF                /*!< End of block fla
 229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_UDR                        USART_ISR_UDR                 /*!< SPI Slave underr
 230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_ABRE                       USART_ISR_ABRE                /*!< Auto baud rate e
 231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_ABRF                       USART_ISR_ABRF                /*!< Auto baud rate f
 232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_BUSY                       USART_ISR_BUSY                /*!< Busy flag */
 233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_CMF                        USART_ISR_CMF                 /*!< Character match 
 234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_SBKF                       USART_ISR_SBKF                /*!< Send break flag 
 235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_RWU                        USART_ISR_RWU                 /*!< Receiver wakeup 
 236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_WUF                        USART_ISR_WUF                 /*!< Wakeup from Stop
 237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TEACK                      USART_ISR_TEACK               /*!< Transmit enable 
 238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_REACK                      USART_ISR_REACK               /*!< Receive enable a
 239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TXFE                       USART_ISR_TXFE                /*!< TX FIFO empty fl
 240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_RXFF                       USART_ISR_RXFF                /*!< RX FIFO full fla
 241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TCBGT                      USART_ISR_TCBGT               /*!< Transmission com
 242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_RXFT                       USART_ISR_RXFT                /*!< RX FIFO threshol
 243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TXFT                       USART_ISR_TXFT                /*!< TX FIFO threshol
 244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_RXNEIE_RXFNEIE             USART_CR1_RXNEIE_RXFNEIE      /*!< Read data regist
 254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_TXEIE_TXFNFIE              USART_CR1_TXEIE_TXFNFIE       /*!< Transmit data re
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 15


 256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_CMIE                       USART_CR1_CMIE                /*!< Character match 
 258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_RTOIE                      USART_CR1_RTOIE               /*!< Receiver timeout
 259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_EOBIE                      USART_CR1_EOBIE               /*!< End of Block int
 260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_TXFEIE                     USART_CR1_TXFEIE              /*!< TX FIFO empty in
 261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_RXFFIE                     USART_CR1_RXFFIE              /*!< RX FIFO full int
 262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_WUFIE                      USART_CR3_WUFIE               /*!< Wakeup from Stop
 266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_TXFTIE                     USART_CR3_TXFTIE              /*!< TX FIFO threshol
 267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_TCBGTIE                    USART_CR3_TCBGTIE             /*!< Transmission com
 268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_RXFTIE                     USART_CR3_RXFTIE              /*!< RX FIFO threshol
 269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_FIFOTHRESHOLD FIFO Threshold
 274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_8              0x00000000U /*!< FIFO reaches 1/8 of its depth */
 277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_4              0x00000001U /*!< FIFO reaches 1/4 of its depth */
 278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_2              0x00000002U /*!< FIFO reaches 1/2 of its depth */
 279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_3_4              0x00000003U /*!< FIFO reaches 3/4 of its depth */
 280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_7_8              0x00000004U /*!< FIFO reaches 7/8 of its depth */
 281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_8_8              0x00000005U /*!< FIFO becomes empty for TX and full
 282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 16


 313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DATAWIDTH_7B                   USART_CR1_M1            /*!< 7 bits word length : S
 320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M0            /*!< 9 bits word length : S
 322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 17


 370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_PRESCALER Clock Source Prescaler
 375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV1                 0x00000000U                                        
 378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV2                 (USART_PRESC_PRESCALER_0)                          
 379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV4                 (USART_PRESC_PRESCALER_1)                          
 380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV6                 (USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
 381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV8                 (USART_PRESC_PRESCALER_2)                          
 382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV10                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_0)
 383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV12                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1)
 384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV16                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1 
 385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV32                (USART_PRESC_PRESCALER_3)                          
 386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV64                (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_0)
 387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV128               (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1)
 388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV256               (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1 
 389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_TXRX TX RX Pins Swap
 405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_TXRX_STANDARD                  0x00000000U           /*!< TX/RX pins are used as d
 408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_TXRX_SWAPPED                   (USART_CR2_SWAP)      /*!< TX and RX pins functions
 409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_RXPIN_LEVEL RX Pin Active Level Inversion
 414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_STANDARD           0x00000000U           /*!< RX pin signal works usin
 417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_INVERTED           (USART_CR2_RXINV)     /*!< RX pin signal values are
 418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_TXPIN_LEVEL TX Pin Active Level Inversion
 423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_STANDARD           0x00000000U           /*!< TX pin signal works usin
 426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_INVERTED           (USART_CR2_TXINV)     /*!< TX pin signal values are
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 18


 427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_BINARY_LOGIC Binary Data Inversion
 432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_POSITIVE          0x00000000U           /*!< Logical data from the da
 435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_NEGATIVE          USART_CR2_DATAINV     /*!< Logical data from the da
 436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_BITORDER Bit Order
 441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_BITORDER_LSBFIRST              0x00000000U           /*!< data is transmitted/rece
 444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_BITORDER_MSBFIRST              USART_CR2_MSBFIRST    /*!< data is transmitted/rece
 445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_AUTOBAUD_DETECT_ON Autobaud Detection
 450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT    0x00000000U                                 /*!< Me
 453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0                         /*!< Fa
 454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME    USART_CR2_ABRMODE_1                         /*!< 0x
 455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME    (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0) /*!< 0x
 456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_ADDRESS_DETECT Address Length Detection
 461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_4B              0x00000000U           /*!< 4-bit address detection 
 464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_7B              USART_CR2_ADDM7       /*!< 7-bit address detection 
 465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP_ON Wakeup Activation
 481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WAKEUP_ON_ADDRESS              0x00000000U                             /*!< Wake u
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 19


 484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WAKEUP_ON_STARTBIT             USART_CR3_WUS_1                         /*!< Wake u
 485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WAKEUP_ON_RXNE                 (USART_CR3_WUS_0 | USART_CR3_WUS_1)     /*!< Wake u
 486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_DE_POLARITY Driver Enable Polarity
 509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DE_POLARITY_HIGH               0x00000000U           /*!< DE signal is active high
 512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DE_POLARITY_LOW                USART_CR3_DEP         /*!< DE signal is active low 
 513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_DMA_REG_DATA DMA Register Data
 518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_TRANSMIT          0x00000000U          /*!< Get address of data regis
 521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_RECEIVE           0x00000001U          /*!< Get address of data regis
 522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Write a value in USART register
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 20


 541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __REG__ Register to be written
 543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Read a value in USART register
 550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __REG__ Register to be read
 552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Register value
 553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __PRESCALER__ This parameter can be one of the following values:
 568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
 569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
 570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
 571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
 572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
 573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
 574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
 575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
 576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
 577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
 578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
 579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
 580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __PRESCALER__, __BAUDRATE__) (((((__PERIPHCLK__)/(u
 584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __PRESCALER__ This parameter can be one of the following values:
 590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
 591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
 592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
 593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
 594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
 595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
 596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
 597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 21


 598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
 599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
 600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
 601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
 602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __PRESCALER__, __BAUDRATE__) ((((__PERIPHCLK__)/(u
 606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  USART Enable
 627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         flags, in the USARTx_ISR are set to their default values.
 641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 22


 655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1U : 0U);
 659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  FIFO Mode Enable
 663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_EnableFIFO
 666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 669:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableFIFO(USART_TypeDef *USARTx)
 670:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 671:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 672:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 673:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 674:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 675:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  FIFO Mode Disable
 676:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 677:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 678:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
 679:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 680:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 681:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 682:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
 683:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 684:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 685:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 686:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 687:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 688:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if FIFO Mode is enabled
 689:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 690:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 691:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_IsEnabledFIFO
 692:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 693:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
 694:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 695:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledFIFO(USART_TypeDef *USARTx)
 696:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 697:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_FIFOEN) == (USART_CR1_FIFOEN)) ? 1U : 0U);
 698:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 699:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 700:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 701:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure TX FIFO Threshold
 702:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 703:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 704:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_SetTXFIFOThreshold
 705:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 706:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Threshold This parameter can be one of the following values:
 707:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 708:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 709:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 710:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 711:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 23


 712:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 713:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 714:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 715:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
 716:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 717:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 718:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 719:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 720:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 721:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return TX FIFO Threshold Configuration
 722:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 723:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 724:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_GetTXFIFOThreshold
 725:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 726:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 727:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 728:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 729:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 730:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 731:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 732:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 733:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 734:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXFIFOThreshold(USART_TypeDef *USARTx)
 735:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 736:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 737:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 738:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 739:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 740:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure RX FIFO Threshold
 741:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 742:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 743:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RXFTCFG       LL_USART_SetRXFIFOThreshold
 744:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 745:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Threshold This parameter can be one of the following values:
 746:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 747:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 748:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 749:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 750:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 751:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 752:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 753:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 754:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
 755:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 756:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 757:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 758:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 759:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 760:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return RX FIFO Threshold Configuration
 761:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 762:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 763:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RXFTCFG       LL_USART_GetRXFIFOThreshold
 764:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 765:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 766:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 767:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 768:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 24


 769:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 770:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 771:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 772:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 773:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXFIFOThreshold(USART_TypeDef *USARTx)
 774:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 775:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 776:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 777:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 778:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 779:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure TX and RX FIFOs Threshold
 780:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 781:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 782:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_ConfigFIFOsThreshold\n
 783:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          RXFTCFG       LL_USART_ConfigFIFOsThreshold
 784:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 785:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  TXThreshold This parameter can be one of the following values:
 786:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 787:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 788:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 789:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 790:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 791:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 792:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  RXThreshold This parameter can be one of the following values:
 793:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 794:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 795:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 796:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 797:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 798:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 799:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 800:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 801:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigFIFOsThreshold(USART_TypeDef *USARTx, uint32_t TXThreshold, uin
 802:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 803:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG | USART_CR3_RXFTCFG,
 804:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                     (TXThreshold << USART_CR3_TXFTCFG_Pos) | (RXThreshold << USART_CR3_RXFTCFG_Pos)
 805:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 806:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 807:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 808:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  USART enabled in STOP Mode.
 809:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   When this function is enabled, USART is able to wake up the MCU from Stop mode, provide
 810:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         USART clock selection is HSI or LSE in RCC.
 811:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 812:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 813:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_EnableInStopMode
 814:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 815:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 816:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 817:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
 818:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 819:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_UESM);
 820:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 821:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 822:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 823:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  USART disabled in STOP Mode.
 824:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   When this function is disabled, USART is not able to wake up the MCU from Stop mode
 825:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 25


 826:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 827:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_DisableInStopMode
 828:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 829:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 830:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 831:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
 832:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 833:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 834:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 835:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 836:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 837:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if USART is enabled in STOP Mode (able to wake up MCU from Stop mode or not)
 838:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 839:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 840:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_IsEnabledInStopMode
 841:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 842:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
 843:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 844:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledInStopMode(USART_TypeDef *USARTx)
 845:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 846:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UESM) == (USART_CR1_UESM)) ? 1U : 0U);
 847:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 848:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 849:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 850:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 851:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 852:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 853:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 854:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 855:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 856:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 857:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 858:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 859:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 860:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 861:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Receiver Disable
 862:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 863:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 864:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 865:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 866:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 867:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 868:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 869:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 870:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 871:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 872:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Transmitter Enable
 873:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 874:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 875:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 876:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 877:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 878:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 879:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 880:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 881:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 882:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 26


 883:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Transmitter Disable
 884:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 885:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 886:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 887:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 888:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 889:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 890:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 891:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 892:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 893:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 894:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 895:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         of Transmitter and Receiver
 896:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 897:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 898:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 899:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 900:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 901:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 902:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 903:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 904:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 905:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 906:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 907:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 908:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 909:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 910:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 911:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 912:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 913:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 914:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 915:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 916:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 917:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 918:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 919:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 920:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 921:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 922:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 923:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 924:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 925:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 926:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 927:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 928:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 929:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 930:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 931:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 932:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 933:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 934:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 935:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 936:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 937:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 938:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 939:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 27


 940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 941:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 943:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 944:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 945:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 946:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 947:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 948:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 949:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 950:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 951:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 952:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 953:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 954:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 955:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 956:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 957:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 958:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 959:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 960:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 961:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 962:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 963:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 964:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 965:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 966:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 967:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 968:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 969:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 970:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 971:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 972:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 973:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 974:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 975:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 976:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 977:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 978:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 979:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 980:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 981:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 982:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 983:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 984:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 985:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 986:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 987:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 988:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 989:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 990:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_SetDataWidth\n
 991:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          M1            LL_USART_SetDataWidth
 992:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 993:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 994:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
 995:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 996:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 28


 997:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 998:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 999:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
1000:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1001:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
1002:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1003:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1004:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1005:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
1006:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_GetDataWidth\n
1007:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          M1            LL_USART_GetDataWidth
1008:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1009:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1010:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1011:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1012:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1013:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1014:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
1015:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1016:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
1017:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1018:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1019:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1020:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Allow switch between Mute Mode and Active mode
1021:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_EnableMuteMode
1022:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1023:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1024:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1025:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
1026:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1027:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_MME);
1028:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1029:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1030:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1031:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Prevent Mute Mode use. Set Receiver in active mode permanently.
1032:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_DisableMuteMode
1033:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1034:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1035:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1036:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
1037:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1038:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_MME);
1039:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1040:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1041:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1042:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if switch between Mute Mode and Active mode is allowed
1043:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_IsEnabledMuteMode
1044:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1045:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1046:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1047:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledMuteMode(USART_TypeDef *USARTx)
1048:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1049:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_MME) == (USART_CR1_MME)) ? 1U : 0U);
1050:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1051:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1052:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1053:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 29


1054:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
1055:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1056:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1057:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1058:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1059:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1060:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1061:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
1062:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1063:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
1064:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1065:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1066:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1067:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Oversampling mode
1068:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
1069:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1070:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1071:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1072:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1073:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1074:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
1075:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1076:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
1077:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1078:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1079:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1080:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
1081:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1082:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1083:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
1084:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1085:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
1086:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1087:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1088:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1089:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1090:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
1091:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1092:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
1093:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1094:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1095:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1096:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
1097:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
1098:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1099:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
1101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
1107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
1109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 30


1111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
1113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
1116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
1118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
1123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
1125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
1129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
1132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
1138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
1140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
1144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
1147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
1149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
1154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
1156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
1160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
1163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 31


1168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
1169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
1171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
1175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
1179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
1180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
1181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
1182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
1183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
1184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
1186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
1189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
1192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
1197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
1199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure Clock source prescaler for baudrate generator and oversampling
1203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
1204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
1205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll PRESC        PRESCALER     LL_USART_SetPrescaler
1206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 32


1225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve the Clock source prescaler for baudrate generator and oversampling
1229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
1230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
1231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll PRESC        PRESCALER     LL_USART_GetPrescaler
1232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetPrescaler(USART_TypeDef *USARTx)
1248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->PRESC, USART_PRESC_PRESCALER));
1250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
1254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
1257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
1261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
1267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
1270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
1274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
1276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
1280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 33


1282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
1283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
1287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN)) ? 1U : 0U);
1289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set the length of the stop bits
1293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
1294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
1303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
1309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
1310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
1318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
1320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
1324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
1326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
1327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
1328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
1329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
1330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          M0            LL_USART_ConfigCharacter\n
1331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          M1            LL_USART_ConfigCharacter\n
1332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
1333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 34


1339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
1350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                               uint32_t StopBits)
1351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
1353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure TX/RX pins swapping setting.
1358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_SetTXRXSwap
1359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  SwapConfig This parameter can be one of the following values:
1361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
1366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
1368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve TX/RX pins swapping configuration.
1372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_GetTXRXSwap
1373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXRXSwap(USART_TypeDef *USARTx)
1379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_SWAP));
1381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure RX pin active level logic
1385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_SetRXPinLevel
1386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
1395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 35


1396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve RX pin active level logic configuration
1399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_GetRXPinLevel
1400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXPinLevel(USART_TypeDef *USARTx)
1406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_RXINV));
1408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure TX pin active level logic
1412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_SetTXPinLevel
1413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
1422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve TX pin active level logic configuration
1426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_GetTXPinLevel
1427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXPinLevel(USART_TypeDef *USARTx)
1433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_TXINV));
1435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure Binary data logic.
1439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Allow to define how Logical data from the data register are send/received :
1440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         either in positive/direct logic (1=H, 0=L) or in negative/inverse logic (1=L, 0=H)
1441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_SetBinaryDataLogic
1442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  DataLogic This parameter can be one of the following values:
1444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
1449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_DATAINV, DataLogic);
1451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 36


1453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve Binary data configuration
1455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_GetBinaryDataLogic
1456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBinaryDataLogic(USART_TypeDef *USARTx)
1462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_DATAINV));
1464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure transfer bit order (either Less or Most Significant Bit First)
1468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_SetTransferBitOrder
1471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  BitOrder This parameter can be one of the following values:
1473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
1478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_MSBFIRST, BitOrder);
1480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return transfer bit order (either Less or Most Significant Bit First)
1484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_GetTransferBitOrder
1487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferBitOrder(USART_TypeDef *USARTx)
1493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_MSBFIRST));
1495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Auto Baud-Rate Detection
1499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
1502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
1506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_ABREN);
1508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 37


1510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Auto Baud-Rate Detection
1512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_DisableAutoBaudRate
1515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
1519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_ABREN);
1521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Auto Baud-Rate Detection mechanism is enabled
1525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_IsEnabledAutoBaud
1528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledAutoBaud(USART_TypeDef *USARTx)
1532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_ABREN) == (USART_CR2_ABREN)) ? 1U : 0U);
1534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Auto Baud-Rate mode bits
1538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_SetAutoBaudRateMode
1541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  AutoBaudRateMode This parameter can be one of the following values:
1543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
1550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
1552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Auto Baud-Rate mode
1556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_GetAutoBaudRateMode
1559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetAutoBaudRateMode(USART_TypeDef *USARTx)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 38


1567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ABRMODE));
1569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Receiver Timeout
1573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
1574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
1578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
1580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Receiver Timeout
1584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_DisableRxTimeout
1585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
1589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_RTOEN);
1591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Receiver Timeout feature is enabled
1595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_IsEnabledRxTimeout
1596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledRxTimeout(USART_TypeDef *USARTx)
1600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_RTOEN) == (USART_CR2_RTOEN)) ? 1U : 0U);
1602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Address of the USART node.
1606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
1607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         for wake up with address mark detection.
1608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   4bits address node is used when 4-bit Address Detection is selected in ADDM7.
1609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (b7-b4 should be set to 0)
1610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         8bits address node is used when 7-bit Address Detection is selected in ADDM7.
1611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (This is used in multiprocessor communication during Mute mode or Stop mode,
1612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         for wake up with 7-bit address mark detection.
1613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         The MSB of the character sent by the transmitter should be equal to 1.
1614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         It may also be used for character detection during normal reception,
1615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Mute mode inactive (for example, end of block detection in ModBus protocol).
1616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         In this case, the whole received character (8-bit) is compared to the ADD[7:0]
1617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         value and CMF flag is set on match)
1618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_ConfigNodeAddress\n
1619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          ADDM7         LL_USART_ConfigNodeAddress
1620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  AddressLen This parameter can be one of the following values:
1622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 39


1624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  NodeAddress 4 or 7 bit Address of the USART node.
1625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_
1628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
1630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****              (uint32_t)(AddressLen | (NodeAddress << USART_CR2_ADD_Pos)));
1631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return 8 bit Address of the USART node as set in ADD field of CR2.
1635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   If 4-bit Address Detection is selected in ADDM7,
1636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
1637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         If 7-bit Address Detection is selected in ADDM7,
1638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         only 8bits (b7-b0) of returned value are relevant (b31-b8 are not relevant)
1639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
1640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
1642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
1644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD) >> USART_CR2_ADD_Pos);
1646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Length of Node Address used in Address Detection mode (7-bit or 4-bit)
1650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ADDM7         LL_USART_GetNodeAddressLen
1651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddressLen(USART_TypeDef *USARTx)
1657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADDM7));
1659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
1663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
1666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1669:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1670:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1671:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
1672:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1673:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1674:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1675:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
1676:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1677:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1678:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
1679:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1680:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 40


1681:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1682:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1683:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1684:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
1685:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1686:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1687:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1688:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
1689:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1690:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1691:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
1692:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1693:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1694:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1695:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1696:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1697:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
1698:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1699:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1700:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1701:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
1702:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1703:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1704:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
1705:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1706:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1707:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1708:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1709:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1710:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
1711:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1712:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1713:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1714:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
1715:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1716:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1717:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
1718:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
1719:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1720:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
1721:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1722:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1723:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1724:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1725:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1726:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1727:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
1728:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1729:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
1730:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1731:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1732:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1733:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
1734:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1735:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1736:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
1737:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 41


1738:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1739:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1740:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1741:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1742:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1743:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1744:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1745:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
1746:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1747:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
1748:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1749:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1750:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1751:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable One bit sampling method
1752:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
1753:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1754:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1755:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1756:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1757:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1758:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1759:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1760:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1761:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1762:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable One bit sampling method
1763:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1764:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1765:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1766:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1767:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1768:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1769:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1770:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1771:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1772:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1773:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1774:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1775:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1776:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1777:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1778:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1779:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1780:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT)) ? 1U : 0U);
1781:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1782:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1783:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1784:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Overrun detection
1785:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_EnableOverrunDetect
1786:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1787:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1788:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1789:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
1790:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1791:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1792:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1793:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1794:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 42


1795:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Overrun detection
1796:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
1797:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1798:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1799:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1800:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
1801:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1802:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1803:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1804:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1805:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1806:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Overrun detection is enabled
1807:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_IsEnabledOverrunDetect
1808:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1809:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1810:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1811:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOverrunDetect(USART_TypeDef *USARTx)
1812:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1813:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_OVRDIS) != USART_CR3_OVRDIS) ? 1U : 0U);
1814:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1815:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1816:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1817:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Select event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1818:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1819:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1820:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_SetWKUPType
1821:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1822:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Type This parameter can be one of the following values:
1823:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1824:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1825:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1826:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1827:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1828:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
1829:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1830:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_WUS, Type);
1831:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1832:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1833:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1834:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1835:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1836:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1837:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_GetWKUPType
1838:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1839:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1840:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1841:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1842:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1843:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1844:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWKUPType(USART_TypeDef *USARTx)
1845:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1846:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
1847:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1848:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1849:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1850:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1851:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 43


1852:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1853:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1854:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (Baud rate value != 0)
1855:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1856:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1857:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1858:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1859:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1860:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1861:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1862:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1863:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1864:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1865:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1866:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1867:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1868:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1869:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1870:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1871:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1872:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1873:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1874:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1875:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  BaudRate Baud Rate
1876:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1877:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1878:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Presc
1879:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                           uint32_t BaudRate)
1880:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1881:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t usartdiv;
1882:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t brrtemp;
1883:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1884:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1885:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
1886:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
1887:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     brrtemp = usartdiv & 0xFFF0U;
1888:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1889:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     USARTx->BRR = brrtemp;
1890:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
1891:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   else
1892:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
1893:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRat
1894:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
1895:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1896:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1897:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1898:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1899:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1900:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1901:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1902:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1903:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1904:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1905:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1906:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1907:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1908:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 44


1909:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1910:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1911:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1912:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1913:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1914:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1915:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1916:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1917:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1918:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1919:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1920:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1921:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Baud Rate
1922:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1923:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t P
1924:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1925:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t usartdiv;
1926:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t brrresult = 0x0U;
1927:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t periphclkpresc = (uint32_t)(PeriphClk / (uint32_t)(USART_PRESCALER_TAB[(uint16_t)Prescal
1928:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1929:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   usartdiv = USARTx->BRR;
1930:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1931:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   if(usartdiv == 0U)
1932:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
1933:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     /* Do not perform a division by 0 */
1934:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
1935:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   else if (OverSampling == LL_USART_OVERSAMPLING_8)
1936:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
1937:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1938:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     if(usartdiv != 0U)
1939:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     {
1940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****       brrresult = (periphclkpresc * 2U) / usartdiv;
1941:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     }
1942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
1943:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   else
1944:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
1945:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1946:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     {
1947:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****       brrresult = periphclkpresc / usartdiv;
1948:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     }
1949:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
1950:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (brrresult);
1951:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1952:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1953:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1954:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Receiver Time Out Value (expressed in nb of bits duration)
1955:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_SetRxTimeout
1956:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1957:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1958:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1959:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1960:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
1961:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1962:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
1963:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1964:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1965:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 45


1966:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Get Receiver Time Out Value (expressed in nb of bits duration)
1967:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_GetRxTimeout
1968:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1969:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1970:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1971:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRxTimeout(USART_TypeDef *USARTx)
1972:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1973:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_RTO));
1974:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1975:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1976:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1977:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Block Length value in reception
1978:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_SetBlockLength
1979:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1980:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  BlockLength Value between Min_Data=0x00 and Max_Data=0xFF
1981:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1982:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1983:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
1984:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1985:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_BLEN, BlockLength << USART_RTOR_BLEN_Pos);
1986:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1987:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1988:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1989:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Get Block Length value in reception
1990:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_GetBlockLength
1991:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1992:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
1993:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1994:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBlockLength(USART_TypeDef *USARTx)
1995:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1996:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_BLEN) >> USART_RTOR_BLEN_Pos);
1997:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1998:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1999:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2000:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2001:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2002:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2003:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
2004:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2005:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2006:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2007:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2008:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable IrDA mode
2009:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2010:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2011:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
2012:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2013:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2014:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2015:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
2016:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2017:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2018:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2019:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2020:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2021:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable IrDA mode
2022:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 46


2023:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2024:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
2025:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2026:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2027:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2028:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
2029:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2030:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
2031:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2032:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2033:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2034:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
2035:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2036:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2037:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
2038:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2039:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2040:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2041:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
2042:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2043:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN)) ? 1U : 0U);
2044:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2045:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2046:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2047:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
2048:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2049:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2050:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
2051:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2052:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
2053:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
2054:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
2055:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2056:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2057:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
2058:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2059:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
2060:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2061:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2062:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2063:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
2064:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2065:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2066:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
2067:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2068:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2069:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
2070:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
2071:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2072:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
2073:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2074:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
2075:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2076:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2077:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2078:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
2079:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 47


2080:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2081:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2082:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
2083:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2084:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
2085:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2086:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2087:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
2088:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2089:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, (uint16_t)PrescalerValue);
2090:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2091:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2092:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2093:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
2094:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
2095:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2096:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2097:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
2098:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2099:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
2100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
2102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
2104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
2111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
2116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
2119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
2123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
2125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
2129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
2132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
2136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 48


2137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
2138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
2142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
2145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
2149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK)) ? 1U : 0U);
2151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Smartcard mode
2155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
2158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
2162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Smartcard mode
2168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
2171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
2175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
2177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
2181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
2184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
2188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN)) ? 1U : 0U);
2190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 49


2194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   This bit-field specifies the number of retries in transmit and receive, in Smartcard mo
2197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         In transmission mode, it specifies the number of automatic retransmission retries, befo
2198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         generating a transmission error (FE bit set).
2199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         In reception mode, it specifies the number or erroneous reception trials, before genera
2200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         reception error (RXNE and PE bits set)
2201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_SetSmartcardAutoRetryCount
2202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  AutoRetryCount Value between Min_Data=0 and Max_Data=7
2204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryC
2207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_SCARCNT, AutoRetryCount << USART_CR3_SCARCNT_Pos);
2209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
2213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_GetSmartcardAutoRetryCount
2216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Smartcard Auto-Retry Count value (Value between Min_Data=0 and Max_Data=7)
2218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardAutoRetryCount(USART_TypeDef *USARTx)
2220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_SCARCNT) >> USART_CR3_SCARCNT_Pos);
2222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
2226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
2227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
2230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
2232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
2235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, (uint16_t)PrescalerValue);
2237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
2241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
2242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
2245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
2247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
2249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 50


2251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
2255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
2256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
2259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
2261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
2264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_GTPR_GT_Pos);
2266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
2270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
2271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
2274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
2276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
2278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_GTPR_GT_Pos);
2280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
2287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
2292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
2295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
2299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
2305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 51


2308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
2312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
2318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
2321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
2325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL)) ? 1U : 0U);
2327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_SPI_SLAVE Configuration functions related to SPI Slave feat
2334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable SPI Synchronous Slave mode
2338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_EnableSPISlave
2341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSPISlave(USART_TypeDef *USARTx)
2345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_SLVEN);
2347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable SPI Synchronous Slave mode
2351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_DisableSPISlave
2354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSPISlave(USART_TypeDef *USARTx)
2358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_SLVEN);
2360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if  SPI Synchronous Slave mode is enabled
2364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 52


2365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_IsEnabledSPISlave
2367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSPISlave(USART_TypeDef *USARTx)
2371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_SLVEN) == (USART_CR2_SLVEN)) ? 1U : 0U);
2373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable SPI Slave Selection using NSS input pin
2377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   SPI Slave Selection depends on NSS input pin
2380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (The slave is selected when NSS is low and deselected when NSS is high).
2381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_EnableSPISlaveSelect
2382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSPISlaveSelect(USART_TypeDef *USARTx)
2386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_DIS_NSS);
2388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable SPI Slave Selection using NSS input pin
2392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   SPI Slave will be always selected and NSS input pin will be ignored.
2395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_DisableSPISlaveSelect
2396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSPISlaveSelect(USART_TypeDef *USARTx)
2400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_DIS_NSS);
2402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if  SPI Slave Selection depends on NSS input pin
2406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_IsEnabledSPISlaveSelect
2409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSPISlaveSelect(USART_TypeDef *USARTx)
2413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_DIS_NSS) != (USART_CR2_DIS_NSS)) ? 1U : 0U);
2415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 53


2422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
2427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
2430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
2432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
2437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
2439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
2443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
2446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
2452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
2454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable LIN mode
2458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
2461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
2465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable LIN mode
2471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
2474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
2478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 54


2479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
2480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
2484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
2487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
2491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN)) ? 1U : 0U);
2493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_DE Configuration functions related to Driver Enable feature
2500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set DEDT (Driver Enable De-Assertion Time), Time value expressed on 5 bits ([4:0] bits)
2505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_SetDEDeassertionTime
2508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
2513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
2515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return DEDT (Driver Enable De-Assertion Time)
2519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_GetDEDeassertionTime
2522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEDeassertionTime(USART_TypeDef *USARTx)
2526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEDT) >> USART_CR1_DEDT_Pos);
2528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set DEAT (Driver Enable Assertion Time), Time value expressed on 5 bits ([4:0] bits).
2532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_SetDEAssertionTime
2535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 55


2536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
2540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
2542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return DEAT (Driver Enable Assertion Time)
2546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_GetDEAssertionTime
2549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEAssertionTime(USART_TypeDef *USARTx)
2553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEAT) >> USART_CR1_DEAT_Pos);
2555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Driver Enable (DE) Mode
2559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_EnableDEMode
2562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
2566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DEM);
2568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Driver Enable (DE) Mode
2572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_DisableDEMode
2575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
2579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
2581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Driver Enable (DE) Mode is enabled
2585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_IsEnabledDEMode
2588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(USART_TypeDef *USARTx)
2592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 56


2593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1U : 0U);
2594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Select Driver Enable Polarity
2598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_SetDESignalPolarity
2601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
2603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
2608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
2610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Driver Enable Polarity
2614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_GetDESignalPolarity
2617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDESignalPolarity(USART_TypeDef *USARTx)
2623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_DEP));
2625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
2632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
2637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
2638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 57


2650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
2653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
2654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
2655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
2656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
2657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
2661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
2663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
2664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2669:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2670:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
2671:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
2672:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2673:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2674:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2675:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2676:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
2677:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
2678:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
2679:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2680:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2681:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2682:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2683:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2684:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2685:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
2686:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
2687:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2688:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
2689:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
2690:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
2691:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
2692:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
2693:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2694:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2695:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2696:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
2697:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2698:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
2699:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2700:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2701:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2702:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2703:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
2704:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
2705:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2706:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 58


2707:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2708:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
2709:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
2710:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2711:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2712:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2713:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2714:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
2715:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2716:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2717:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2718:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2719:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2720:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2721:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2722:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2723:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
2724:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
2725:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
2726:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2727:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
2728:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
2729:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
2730:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
2731:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
2732:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
2733:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2734:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2735:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2736:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
2737:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2738:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
2739:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
2740:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2741:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
2742:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
2743:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
2744:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2745:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2746:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2747:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2748:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
2749:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
2750:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2751:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2752:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2753:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2754:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
2755:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2756:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2757:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2758:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2759:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2760:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2761:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2762:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
2763:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 59


2764:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2765:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2766:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
2767:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
2768:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
2769:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
2770:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
2771:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2772:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2773:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2774:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
2775:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2776:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
2777:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2778:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
2779:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2780:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
2781:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
2782:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2783:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2784:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2785:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2786:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
2787:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
2788:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2789:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2790:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2791:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
2792:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
2793:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
2794:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2795:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2796:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2797:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2798:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2799:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2800:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2801:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2802:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
2803:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
2804:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2805:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2806:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
2807:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
2808:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
2809:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
2810:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
2811:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2812:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2813:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2814:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
2815:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2816:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
2817:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2818:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
2819:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2820:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 60


2821:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
2822:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* Synchronous mode is activated by default */
2823:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
2824:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
2825:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2826:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2827:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2828:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2829:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
2830:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
2831:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2832:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2833:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2834:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2835:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
2836:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2837:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2838:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2839:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2840:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2841:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2842:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2843:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2844:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
2845:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
2846:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
2847:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2848:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
2849:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
2850:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
2851:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
2852:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
2853:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
2854:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2855:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2856:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2857:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
2858:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2859:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
2860:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
2861:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
2862:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
2863:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2864:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
2865:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2866:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2867:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2868:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2869:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
2870:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
2871:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
2872:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
2873:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2874:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2875:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2876:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2877:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 61


2878:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2879:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2880:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2881:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2882:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2883:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2884:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
2885:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
2886:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2887:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
2888:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
2889:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
2890:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
2891:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
2892:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2893:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2894:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2895:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
2896:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2897:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
2898:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2899:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2900:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2901:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2902:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2903:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2904:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2905:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2906:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2907:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2908:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
2909:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2910:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2911:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2912:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2913:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
2914:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
2915:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2916:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2917:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2918:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
2919:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2920:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1U : 0U);
2921:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2922:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2923:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2924:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
2925:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
2926:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2927:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2928:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2929:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
2930:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2931:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1U : 0U);
2932:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2933:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2934:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 62


2935:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
2936:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
2937:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2938:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2939:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
2941:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1U : 0U);
2943:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2944:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2945:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2946:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
2947:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
2948:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2949:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2950:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2951:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
2952:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2953:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1U : 0U);
2954:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2955:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2956:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2957:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
2958:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
2959:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2960:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2961:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2962:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
2963:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2964:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1U : 0U);
2965:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2966:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2967:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
2968:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IsActiveFlag_RXNE  LL_USART_IsActiveFlag_RXNE_RXFNE
2969:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2970:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2971:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Read Data Register or USART RX FIFO Not Empty Flag is set or not
2972:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
2973:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
2974:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
2975:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2976:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2977:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2978:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
 309              		.loc 2 2978 26 view .LVU37
 310              	.LBB12:
2979:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2980:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1U : 0U);
 311              		.loc 2 2980 3 view .LVU38
 312              		.loc 2 2980 12 is_stmt 0 view .LVU39
 313 0002 0E4B     		ldr	r3, .L26
 314 0004 DB69     		ldr	r3, [r3, #28]
 315              		.loc 2 2980 88 view .LVU40
 316 0006 13F0200F 		tst	r3, #32
 317 000a 06D0     		beq	.L23
 318              	.LVL4:
 319              		.loc 2 2980 88 view .LVU41
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 63


 320              	.LBE12:
 321              	.LBE11:
 322              	.LBB13:
 323              	.LBI13:
2981:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2982:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2983:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2984:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
2985:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
2986:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2987:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2988:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2989:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
2990:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2991:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1U : 0U);
2992:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2993:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2994:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
2995:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IsActiveFlag_TXE  LL_USART_IsActiveFlag_TXE_TXFNF
2996:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2997:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2998:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty or USART TX FIFO Not Full Flag is set o
2999:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3000:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3001:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
3002:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3003:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3004:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3005:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
3006:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3007:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1U : 0U);
3008:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3009:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3010:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3011:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
3012:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3013:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3014:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          LBDF          LL_USART_IsActiveFlag_LBD
3015:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3016:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3017:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3018:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
3019:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3020:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1U : 0U);
3021:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3022:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3023:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3024:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART CTS interrupt Flag is set or not
3025:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3026:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3027:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          CTSIF         LL_USART_IsActiveFlag_nCTS
3028:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3029:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3030:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3031:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
3032:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3033:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTSIF) == (USART_ISR_CTSIF)) ? 1U : 0U);
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 64


3034:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3035:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3036:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3037:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
3038:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3039:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3040:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          CTS           LL_USART_IsActiveFlag_CTS
3041:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3042:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3043:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3044:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CTS(USART_TypeDef *USARTx)
3045:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3046:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1U : 0U);
3047:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3048:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3049:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3050:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Receiver Time Out Flag is set or not
3051:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
3052:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3053:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3054:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3055:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(USART_TypeDef *USARTx)
3056:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3057:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF)) ? 1U : 0U);
3058:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3059:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3060:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3061:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART End Of Block Flag is set or not
3062:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3063:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3064:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          EOBF          LL_USART_IsActiveFlag_EOB
3065:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3066:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3067:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3068:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_EOB(USART_TypeDef *USARTx)
3069:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3070:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_EOBF) == (USART_ISR_EOBF)) ? 1U : 0U);
3071:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3072:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3073:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3074:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the SPI Slave Underrun error flag is set or not
3075:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
3076:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
3077:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          UDR           LL_USART_IsActiveFlag_UDR
3078:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3079:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3080:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3081:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_UDR(USART_TypeDef *USARTx)
3082:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3083:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_UDR) == (USART_ISR_UDR)) ? 1U : 0U);
3084:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3085:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3086:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3087:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Error Flag is set or not
3088:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
3089:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
3090:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          ABRE          LL_USART_IsActiveFlag_ABRE
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 65


3091:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3092:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3093:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3094:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABRE(USART_TypeDef *USARTx)
3095:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3096:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRE) == (USART_ISR_ABRE)) ? 1U : 0U);
3097:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3098:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3099:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Flag is set or not
3101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
3102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
3103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          ABRF          LL_USART_IsActiveFlag_ABR
3104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABR(USART_TypeDef *USARTx)
3108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRF) == (USART_ISR_ABRF)) ? 1U : 0U);
3110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Busy Flag is set or not
3114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          BUSY          LL_USART_IsActiveFlag_BUSY
3115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_BUSY(USART_TypeDef *USARTx)
3119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1U : 0U);
3121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Character Match Flag is set or not
3125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          CMF           LL_USART_IsActiveFlag_CM
3126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CM(USART_TypeDef *USARTx)
3130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CMF) == (USART_ISR_CMF)) ? 1U : 0U);
3132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
3136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          SBKF          LL_USART_IsActiveFlag_SBK
3137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
3141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_SBKF) == (USART_ISR_SBKF)) ? 1U : 0U);
3143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
3147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          RWU           LL_USART_IsActiveFlag_RWU
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 66


3148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
3152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RWU) == (USART_ISR_RWU)) ? 1U : 0U);
3154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Wake Up from stop mode Flag is set or not
3158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          WUF           LL_USART_IsActiveFlag_WKUP
3161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_WKUP(USART_TypeDef *USARTx)
3165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF)) ? 1U : 0U);
3167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Transmit Enable Acknowledge Flag is set or not
3171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
3172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
3176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1U : 0U);
3178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Receive Enable Acknowledge Flag is set or not
3182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
3183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
3187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1U : 0U);
3189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Empty Flag is set or not
3193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TXFE          LL_USART_IsActiveFlag_TXFE
3196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXFE(USART_TypeDef *USARTx)
3200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXFE) == (USART_ISR_TXFE)) ? 1U : 0U);
3202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 67


3205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Full Flag is set or not
3206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          RXFF          LL_USART_IsActiveFlag_RXFF
3209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXFF(USART_TypeDef *USARTx)
3213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXFF) == (USART_ISR_RXFF)) ? 1U : 0U);
3215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the Smartcard Transmission Complete Before Guard Time Flag is set or not
3219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TCBGT         LL_USART_IsActiveFlag_TCBGT
3220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TCBGT(USART_TypeDef *USARTx)
3224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TCBGT) == (USART_ISR_TCBGT)) ? 1U : 0U);
3226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Threshold Flag is set or not
3230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TXFT          LL_USART_IsActiveFlag_TXFT
3233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXFT(USART_TypeDef *USARTx)
3237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXFT) == (USART_ISR_TXFT)) ? 1U : 0U);
3239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Threshold Flag is set or not
3243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          RXFT          LL_USART_IsActiveFlag_RXFT
3246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXFT(USART_TypeDef *USARTx)
3250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXFT) == (USART_ISR_RXFT)) ? 1U : 0U);
3252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Parity Error Flag
3256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
3257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
3261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 68


3262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_PECF);
3263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Framing Error Flag
3267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
3268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
3272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_FECF);
3274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Noise Error detected Flag
3278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          NECF           LL_USART_ClearFlag_NE
3279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
3283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_NECF);
3285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
3289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
3290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
3294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
3296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
3300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
3301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
3305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
3307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear TX FIFO Empty Flag
3311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          TXFECF        LL_USART_ClearFlag_TXFE
3314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TXFE(USART_TypeDef *USARTx)
3318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 69


3319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TXFECF);
3320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
3324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
3325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
3329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
3331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Smartcard Transmission Complete Before Guard Time Flag
3335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          TCBGTCF       LL_USART_ClearFlag_TCBGT
3336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TCBGT(USART_TypeDef *USARTx)
3340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCBGTCF);
3342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
3346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          LBDCF         LL_USART_ClearFlag_LBD
3349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
3353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
3355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
3359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          CTSCF         LL_USART_ClearFlag_nCTS
3362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
3366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CTSCF);
3368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Receiver Time Out Flag
3372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
3373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 70


3376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
3377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
3379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear End Of Block Flag
3383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          EOBCF         LL_USART_ClearFlag_EOB
3386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_EOB(USART_TypeDef *USARTx)
3390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_EOBCF);
3392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear SPI Slave Underrun Flag
3396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
3397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
3398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          UDRCF         LL_USART_ClearFlag_UDR
3399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_UDR(USART_TypeDef *USARTx)
3403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_UDRCF);
3405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Character Match Flag
3409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          CMCF          LL_USART_ClearFlag_CM
3410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_CM(USART_TypeDef *USARTx)
3414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CMCF);
3416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Wake Up from stop mode Flag
3420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          WUCF          LL_USART_ClearFlag_WKUP
3423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_WKUP(USART_TypeDef *USARTx)
3427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
3429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 71


3433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
3436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
3437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
3441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
3442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
3446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_EnableIT_RXNE  LL_USART_EnableIT_RXNE_RXFNE
3452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable RX Not Empty and RX FIFO Not Empty Interrupt
3455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
3458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
3462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
3464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
3468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
3469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
3473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
3475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_EnableIT_TXE  LL_USART_EnableIT_TXE_TXFNF
3479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable TX Empty and TX FIFO Not Full Interrupt
3482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
3485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
3489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 72


3490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
3491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
3495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
3496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
3500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
3502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Character Match Interrupt
3506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_EnableIT_CM
3507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CM(USART_TypeDef *USARTx)
3511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_CMIE);
3513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Receiver Timeout Interrupt
3517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
3518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
3522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
3524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable End Of Block Interrupt
3528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_EnableIT_EOB
3531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_EOB(USART_TypeDef *USARTx)
3535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_EOBIE);
3537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable TX FIFO Empty Interrupt
3541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_EnableIT_TXFE
3544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 73


3547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXFE(USART_TypeDef *USARTx)
3548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXFEIE);
3550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable RX FIFO Full Interrupt
3554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_EnableIT_RXFF
3555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXFF(USART_TypeDef *USARTx)
3559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXFFIE);
3561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
3565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
3568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
3572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
3574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Error Interrupt
3578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           0: Interrupt is inhibited
3581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
3583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
3587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
3589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable CTS Interrupt
3593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
3596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
3600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
3602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 74


3604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Wake Up from Stop Mode Interrupt
3606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_EnableIT_WKUP
3609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_WKUP(USART_TypeDef *USARTx)
3613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_WUFIE);
3615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable TX FIFO Threshold Interrupt
3619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_EnableIT_TXFT
3622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXFT(USART_TypeDef *USARTx)
3626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_TXFTIE);
3628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Smartcard Transmission Complete Before Guard Time Interrupt
3632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_EnableIT_TCBGT
3635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TCBGT(USART_TypeDef *USARTx)
3639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_TCBGTIE);
3641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable RX FIFO Threshold Interrupt
3645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_EnableIT_RXFT
3648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXFT(USART_TypeDef *USARTx)
3652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_RXFTIE);
3654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
3658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
3659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 75


3661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
3663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DisableIT_RXNE  LL_USART_DisableIT_RXNE_RXFNE
3669:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3670:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3671:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable RX Not Empty and RX FIFO Not Empty Interrupt
3672:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3673:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3674:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_DisableIT_RXNE_RXFNE
3675:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3676:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3677:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3678:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
3679:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3680:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
3681:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3682:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3683:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3684:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
3685:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
3686:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3687:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3688:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3689:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
3690:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3691:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
3692:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3693:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3694:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3695:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DisableIT_TXE  LL_USART_DisableIT_TXE_TXFNF
3696:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3697:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3698:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable TX Empty and TX FIFO Not Full Interrupt
3699:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3700:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3701:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
3702:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3703:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3704:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3705:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
3706:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3707:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
3708:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3709:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3710:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3711:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
3712:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
3713:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3714:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3715:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3716:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
3717:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 76


3718:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
3719:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3720:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3721:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3722:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Character Match Interrupt
3723:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_DisableIT_CM
3724:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3725:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3726:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3727:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CM(USART_TypeDef *USARTx)
3728:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3729:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_CMIE);
3730:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3731:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3732:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3733:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Receiver Timeout Interrupt
3734:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_DisableIT_RTO
3735:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3736:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3737:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3738:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RTO(USART_TypeDef *USARTx)
3739:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3740:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RTOIE);
3741:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3742:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3743:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3744:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable End Of Block Interrupt
3745:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3746:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3747:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_DisableIT_EOB
3748:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3749:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3750:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3751:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_EOB(USART_TypeDef *USARTx)
3752:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3753:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_EOBIE);
3754:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3755:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3756:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3757:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable TX FIFO Empty Interrupt
3758:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3759:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3760:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_DisableIT_TXFE
3761:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3762:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3763:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3764:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXFE(USART_TypeDef *USARTx)
3765:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3766:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXFEIE);
3767:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3768:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3769:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3770:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable RX FIFO Full Interrupt
3771:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3772:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3773:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_DisableIT_RXFF
3774:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 77


3775:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3776:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3777:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXFF(USART_TypeDef *USARTx)
3778:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3779:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXFFIE);
3780:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3781:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3782:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3783:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
3784:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3785:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3786:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
3787:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3788:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3789:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3790:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
3791:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3792:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
3793:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3794:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3795:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3796:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Error Interrupt
3797:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3798:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3799:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           0: Interrupt is inhibited
3800:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3801:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
3802:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3803:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3804:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3805:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
3806:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3807:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
3808:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3809:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3810:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3811:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable CTS Interrupt
3812:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3813:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3814:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
3815:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3816:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3817:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3818:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
3819:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3820:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
3821:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3822:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3823:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3824:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Wake Up from Stop Mode Interrupt
3825:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3826:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3827:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_DisableIT_WKUP
3828:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3829:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3830:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3831:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_WKUP(USART_TypeDef *USARTx)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 78


3832:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3833:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_WUFIE);
3834:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3835:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3836:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3837:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable TX FIFO Threshold Interrupt
3838:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3839:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3840:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_DisableIT_TXFT
3841:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3842:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3843:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3844:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXFT(USART_TypeDef *USARTx)
3845:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3846:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_TXFTIE);
3847:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3848:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3849:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3850:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Smartcard Transmission Complete Before Guard Time Interrupt
3851:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3852:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3853:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_DisableIT_TCBGT
3854:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3855:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3856:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3857:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TCBGT(USART_TypeDef *USARTx)
3858:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3859:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_TCBGTIE);
3860:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3861:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3862:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3863:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable RX FIFO Threshold Interrupt
3864:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3865:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3866:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_DisableIT_RXFT
3867:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3868:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3869:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3870:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXFT(USART_TypeDef *USARTx)
3871:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3872:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_RXFTIE);
3873:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3874:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3875:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3876:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
3877:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
3878:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3879:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3880:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3881:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
3882:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3883:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1U : 0U);
3884:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3885:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3886:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3887:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IsEnabledIT_RXNE  LL_USART_IsEnabledIT_RXNE_RXFNE
3888:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 79


3889:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3890:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty and USART RX FIFO Not Empty Interrupt is enabled or dis
3891:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3892:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3893:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
3894:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3895:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3896:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3897:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
 324              		.loc 2 3897 26 is_stmt 1 view .LVU42
 325              	.LBB14:
3898:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3899:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1U : 0U
 326              		.loc 2 3899 3 view .LVU43
 327              		.loc 2 3899 12 is_stmt 0 view .LVU44
 328 000c 0B4B     		ldr	r3, .L26
 329 000e 1B68     		ldr	r3, [r3]
 330              		.loc 2 3899 96 view .LVU45
 331 0010 13F0200F 		tst	r3, #32
 332 0014 01D0     		beq	.L23
 333              	.LVL5:
 334              		.loc 2 3899 96 view .LVU46
 335              	.LBE14:
 336              	.LBE13:
 254:Core/Src/stm32wbxx_it.c ****   {
 255:Core/Src/stm32wbxx_it.c ****     /* RXNE flag will be cleared by reading of RDR register (done in call) */
 256:Core/Src/stm32wbxx_it.c ****     /* Call function in charge of handling Character reception */
 257:Core/Src/stm32wbxx_it.c ****     UART_CharReception_Callback();
 337              		.loc 1 257 5 is_stmt 1 view .LVU47
 338 0016 FFF7FEFF 		bl	UART_CharReception_Callback
 339              	.LVL6:
 340              	.L23:
 258:Core/Src/stm32wbxx_it.c ****     // uint8_t ch;
 259:Core/Src/stm32wbxx_it.c ****     // ch = getchar();
 260:Core/Src/stm32wbxx_it.c ****     // putchar(ch);
 261:Core/Src/stm32wbxx_it.c ****     // uint8_t temp = LL_USART_ReceiveData8(USART1);
 262:Core/Src/stm32wbxx_it.c ****     // putchar(temp);
 263:Core/Src/stm32wbxx_it.c ****     // if (enqueue(&rx_queue,ch)) {
 264:Core/Src/stm32wbxx_it.c ****     //   dequeue(&rx_queue);
 265:Core/Src/stm32wbxx_it.c ****     //   enqueue(&rx_queue,ch);
 266:Core/Src/stm32wbxx_it.c ****     // }
 267:Core/Src/stm32wbxx_it.c ****   }
 268:Core/Src/stm32wbxx_it.c ****   if(LL_USART_IsEnabledIT_ERROR(USART1) && LL_USART_IsActiveFlag_NE(USART1))
 341              		.loc 1 268 3 view .LVU48
 342              	.LBB15:
 343              	.LBI15:
3900:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3901:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3902:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3903:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
3904:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
3905:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3906:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3907:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3908:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
3909:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3910:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1U : 0U);
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 80


3911:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3912:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3913:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3914:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IsEnabledIT_TXE  LL_USART_IsEnabledIT_TXE_TXFNF
3915:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3916:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3917:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART TX Empty and USART TX FIFO Not Full Interrupt is enabled or disabled
3918:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3919:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3920:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
3921:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3922:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3923:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3924:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
3925:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3926:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1U : 0U);
3927:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3928:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3929:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3930:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
3931:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
3932:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3933:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3934:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3935:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
3936:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3937:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1U : 0U);
3938:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3939:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3941:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Character Match Interrupt is enabled or disabled.
3942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_IsEnabledIT_CM
3943:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3944:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3945:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3946:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CM(USART_TypeDef *USARTx)
3947:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3948:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_CMIE) == (USART_CR1_CMIE)) ? 1U : 0U);
3949:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3950:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3951:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3952:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Receiver Timeout Interrupt is enabled or disabled.
3953:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_IsEnabledIT_RTO
3954:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3955:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3956:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3957:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RTO(USART_TypeDef *USARTx)
3958:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3959:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RTOIE) == (USART_CR1_RTOIE)) ? 1U : 0U);
3960:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3961:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3962:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3963:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART End Of Block Interrupt is enabled or disabled.
3964:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3965:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3966:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_IsEnabledIT_EOB
3967:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 81


3968:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3969:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3970:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_EOB(USART_TypeDef *USARTx)
3971:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3972:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_EOBIE) == (USART_CR1_EOBIE)) ? 1U : 0U);
3973:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3974:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3975:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3976:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Empty Interrupt is enabled or disabled
3977:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3978:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3979:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_IsEnabledIT_TXFE
3980:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3981:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3982:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3983:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXFE(USART_TypeDef *USARTx)
3984:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3985:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TXFEIE) == (USART_CR1_TXFEIE)) ? 1U : 0U);
3986:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3987:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3988:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3989:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Full Interrupt is enabled or disabled
3990:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3991:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3992:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_IsEnabledIT_RXFF
3993:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3994:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3995:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3996:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXFF(USART_TypeDef *USARTx)
3997:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3998:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RXFFIE) == (USART_CR1_RXFFIE)) ? 1U : 0U);
3999:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4000:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4001:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4002:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
4003:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
4004:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
4005:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
4006:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4007:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4008:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4009:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
4010:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4011:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE)) ? 1U : 0U);
4012:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4013:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4014:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4015:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
4016:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
4017:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4018:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4019:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4020:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
 344              		.loc 2 4020 26 view .LVU49
 345              	.LBB16:
4021:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4022:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1U : 0U);
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 82


 346              		.loc 2 4022 3 view .LVU50
 347              		.loc 2 4022 12 is_stmt 0 view .LVU51
 348 001a 084B     		ldr	r3, .L26
 349 001c 9B68     		ldr	r3, [r3, #8]
 350              		.loc 2 4022 74 view .LVU52
 351 001e 13F0010F 		tst	r3, #1
 352 0022 06D0     		beq	.L24
 353              	.LVL7:
 354              		.loc 2 4022 74 view .LVU53
 355              	.LBE16:
 356              	.LBE15:
 357              	.LBB17:
 358              	.LBI17:
2940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 359              		.loc 2 2940 26 is_stmt 1 view .LVU54
 360              	.LBB18:
2942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 361              		.loc 2 2942 3 view .LVU55
2942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 362              		.loc 2 2942 12 is_stmt 0 view .LVU56
 363 0024 054B     		ldr	r3, .L26
 364 0026 DB69     		ldr	r3, [r3, #28]
2942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 365              		.loc 2 2942 72 view .LVU57
 366 0028 13F0040F 		tst	r3, #4
 367 002c 01D0     		beq	.L24
 368              	.LVL8:
2942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 369              		.loc 2 2942 72 view .LVU58
 370              	.LBE18:
 371              	.LBE17:
 372              	.LBB19:
 269:Core/Src/stm32wbxx_it.c ****   {
 270:Core/Src/stm32wbxx_it.c ****     /* Call Error function */
 271:Core/Src/stm32wbxx_it.c ****     UART_Error_Callback();
 373              		.loc 1 271 5 is_stmt 1 view .LVU59
 374 002e FFF7FEFF 		bl	UART_Error_Callback
 375              	.LVL9:
 376              	.L24:
 377              	.LBE19:
 272:Core/Src/stm32wbxx_it.c ****   }
 273:Core/Src/stm32wbxx_it.c ****    
 274:Core/Src/stm32wbxx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 275:Core/Src/stm32wbxx_it.c ****   HAL_UART_IRQHandler(&huart1);
 378              		.loc 1 275 3 view .LVU60
 379 0032 0348     		ldr	r0, .L26+4
 380 0034 FFF7FEFF 		bl	HAL_UART_IRQHandler
 381              	.LVL10:
 276:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 277:Core/Src/stm32wbxx_it.c **** 
 278:Core/Src/stm32wbxx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 279:Core/Src/stm32wbxx_it.c **** }
 382              		.loc 1 279 1 is_stmt 0 view .LVU61
 383 0038 08BD     		pop	{r3, pc}
 384              	.L27:
 385 003a 00BF     		.align	2
 386              	.L26:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 83


 387 003c 00380140 		.word	1073821696
 388 0040 00000000 		.word	huart1
 389              		.cfi_endproc
 390              	.LFE1680:
 392              		.section	.text.LPUART1_IRQHandler,"ax",%progbits
 393              		.align	1
 394              		.global	LPUART1_IRQHandler
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu fpv4-sp-d16
 400              	LPUART1_IRQHandler:
 401              	.LFB1681:
 280:Core/Src/stm32wbxx_it.c **** 
 281:Core/Src/stm32wbxx_it.c **** /**
 282:Core/Src/stm32wbxx_it.c ****   * @brief This function handles LPUART1 global interrupt.
 283:Core/Src/stm32wbxx_it.c ****   */
 284:Core/Src/stm32wbxx_it.c **** void LPUART1_IRQHandler(void)
 285:Core/Src/stm32wbxx_it.c **** {
 402              		.loc 1 285 1 is_stmt 1 view -0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406 0000 08B5     		push	{r3, lr}
 407              	.LCFI4:
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 3, -8
 410              		.cfi_offset 14, -4
 286:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN LPUART1_IRQn 0 */
 287:Core/Src/stm32wbxx_it.c ****   
 288:Core/Src/stm32wbxx_it.c ****   /* USER CODE END LPUART1_IRQn 0 */
 289:Core/Src/stm32wbxx_it.c ****   HAL_UART_IRQHandler(&hlpuart1);
 411              		.loc 1 289 3 view .LVU63
 412 0002 0248     		ldr	r0, .L30
 413 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 414              	.LVL11:
 290:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN LPUART1_IRQn 1 */
 291:Core/Src/stm32wbxx_it.c **** 
 292:Core/Src/stm32wbxx_it.c ****   /* USER CODE END LPUART1_IRQn 1 */
 293:Core/Src/stm32wbxx_it.c **** }
 415              		.loc 1 293 1 is_stmt 0 view .LVU64
 416 0008 08BD     		pop	{r3, pc}
 417              	.L31:
 418 000a 00BF     		.align	2
 419              	.L30:
 420 000c 00000000 		.word	hlpuart1
 421              		.cfi_endproc
 422              	.LFE1681:
 424              		.section	.text.RTC_Alarm_IRQHandler,"ax",%progbits
 425              		.align	1
 426              		.global	RTC_Alarm_IRQHandler
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	RTC_Alarm_IRQHandler:
 433              	.LFB1682:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 84


 294:Core/Src/stm32wbxx_it.c **** 
 295:Core/Src/stm32wbxx_it.c **** /**
 296:Core/Src/stm32wbxx_it.c ****   * @brief This function handles RTC A and B alarm interrupt through EXTI line 17.
 297:Core/Src/stm32wbxx_it.c ****   */
 298:Core/Src/stm32wbxx_it.c **** void RTC_Alarm_IRQHandler(void)
 299:Core/Src/stm32wbxx_it.c **** {
 434              		.loc 1 299 1 is_stmt 1 view -0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438 0000 08B5     		push	{r3, lr}
 439              	.LCFI5:
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 3, -8
 442              		.cfi_offset 14, -4
 300:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
 301:Core/Src/stm32wbxx_it.c **** 
 302:Core/Src/stm32wbxx_it.c ****   /* USER CODE END RTC_Alarm_IRQn 0 */
 303:Core/Src/stm32wbxx_it.c ****   HAL_RTC_AlarmIRQHandler(&hrtc);
 443              		.loc 1 303 3 view .LVU66
 444 0002 0248     		ldr	r0, .L34
 445 0004 FFF7FEFF 		bl	HAL_RTC_AlarmIRQHandler
 446              	.LVL12:
 304:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
 305:Core/Src/stm32wbxx_it.c **** 
 306:Core/Src/stm32wbxx_it.c ****   /* USER CODE END RTC_Alarm_IRQn 1 */
 307:Core/Src/stm32wbxx_it.c **** }
 447              		.loc 1 307 1 is_stmt 0 view .LVU67
 448 0008 08BD     		pop	{r3, pc}
 449              	.L35:
 450 000a 00BF     		.align	2
 451              	.L34:
 452 000c 00000000 		.word	hrtc
 453              		.cfi_endproc
 454              	.LFE1682:
 456              		.section	.text.IPCC_C1_RX_IRQHandler,"ax",%progbits
 457              		.align	1
 458              		.global	IPCC_C1_RX_IRQHandler
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv4-sp-d16
 464              	IPCC_C1_RX_IRQHandler:
 465              	.LFB1683:
 308:Core/Src/stm32wbxx_it.c **** 
 309:Core/Src/stm32wbxx_it.c **** /**
 310:Core/Src/stm32wbxx_it.c ****   * @brief This function handles IPCC RX occupied interrupt.
 311:Core/Src/stm32wbxx_it.c ****   */
 312:Core/Src/stm32wbxx_it.c **** void IPCC_C1_RX_IRQHandler(void)
 313:Core/Src/stm32wbxx_it.c **** {
 466              		.loc 1 313 1 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470 0000 08B5     		push	{r3, lr}
 471              	.LCFI6:
 472              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 85


 473              		.cfi_offset 3, -8
 474              		.cfi_offset 14, -4
 314:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */
 315:Core/Src/stm32wbxx_it.c **** 
 316:Core/Src/stm32wbxx_it.c ****   /* USER CODE END IPCC_C1_RX_IRQn 0 */
 317:Core/Src/stm32wbxx_it.c ****   HAL_IPCC_RX_IRQHandler(&hipcc);
 475              		.loc 1 317 3 view .LVU69
 476 0002 FFF7FEFF 		bl	HW_IPCC_Rx_Handler
 477              	.LVL13:
 318:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */
 319:Core/Src/stm32wbxx_it.c **** 
 320:Core/Src/stm32wbxx_it.c ****   /* USER CODE END IPCC_C1_RX_IRQn 1 */
 321:Core/Src/stm32wbxx_it.c **** }
 478              		.loc 1 321 1 is_stmt 0 view .LVU70
 479 0006 08BD     		pop	{r3, pc}
 480              		.cfi_endproc
 481              	.LFE1683:
 483              		.section	.text.IPCC_C1_TX_IRQHandler,"ax",%progbits
 484              		.align	1
 485              		.global	IPCC_C1_TX_IRQHandler
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 489              		.fpu fpv4-sp-d16
 491              	IPCC_C1_TX_IRQHandler:
 492              	.LFB1684:
 322:Core/Src/stm32wbxx_it.c **** 
 323:Core/Src/stm32wbxx_it.c **** /**
 324:Core/Src/stm32wbxx_it.c ****   * @brief This function handles IPCC TX free interrupt.
 325:Core/Src/stm32wbxx_it.c ****   */
 326:Core/Src/stm32wbxx_it.c **** void IPCC_C1_TX_IRQHandler(void)
 327:Core/Src/stm32wbxx_it.c **** {
 493              		.loc 1 327 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497 0000 08B5     		push	{r3, lr}
 498              	.LCFI7:
 499              		.cfi_def_cfa_offset 8
 500              		.cfi_offset 3, -8
 501              		.cfi_offset 14, -4
 328:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */
 329:Core/Src/stm32wbxx_it.c **** 
 330:Core/Src/stm32wbxx_it.c ****   /* USER CODE END IPCC_C1_TX_IRQn 0 */
 331:Core/Src/stm32wbxx_it.c ****   HAL_IPCC_TX_IRQHandler(&hipcc);
 502              		.loc 1 331 3 view .LVU72
 503 0002 FFF7FEFF 		bl	HW_IPCC_Tx_Handler
 504              	.LVL14:
 332:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */
 333:Core/Src/stm32wbxx_it.c **** 
 334:Core/Src/stm32wbxx_it.c ****   /* USER CODE END IPCC_C1_TX_IRQn 1 */
 335:Core/Src/stm32wbxx_it.c **** }
 505              		.loc 1 335 1 is_stmt 0 view .LVU73
 506 0006 08BD     		pop	{r3, pc}
 507              		.cfi_endproc
 508              	.LFE1684:
 510              		.section	.text.HSEM_IRQHandler,"ax",%progbits
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 86


 511              		.align	1
 512              		.global	HSEM_IRQHandler
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu fpv4-sp-d16
 518              	HSEM_IRQHandler:
 519              	.LFB1685:
 336:Core/Src/stm32wbxx_it.c **** 
 337:Core/Src/stm32wbxx_it.c **** /**
 338:Core/Src/stm32wbxx_it.c ****   * @brief This function handles HSEM global interrupt.
 339:Core/Src/stm32wbxx_it.c ****   */
 340:Core/Src/stm32wbxx_it.c **** void HSEM_IRQHandler(void)
 341:Core/Src/stm32wbxx_it.c **** {
 520              		.loc 1 341 1 is_stmt 1 view -0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524 0000 08B5     		push	{r3, lr}
 525              	.LCFI8:
 526              		.cfi_def_cfa_offset 8
 527              		.cfi_offset 3, -8
 528              		.cfi_offset 14, -4
 342:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN HSEM_IRQn 0 */
 343:Core/Src/stm32wbxx_it.c **** 
 344:Core/Src/stm32wbxx_it.c ****   /* USER CODE END HSEM_IRQn 0 */
 345:Core/Src/stm32wbxx_it.c ****   HAL_HSEM_IRQHandler();
 529              		.loc 1 345 3 view .LVU75
 530 0002 FFF7FEFF 		bl	HAL_HSEM_IRQHandler
 531              	.LVL15:
 346:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN HSEM_IRQn 1 */
 347:Core/Src/stm32wbxx_it.c **** 
 348:Core/Src/stm32wbxx_it.c ****   /* USER CODE END HSEM_IRQn 1 */
 349:Core/Src/stm32wbxx_it.c **** }
 532              		.loc 1 349 1 is_stmt 0 view .LVU76
 533 0006 08BD     		pop	{r3, pc}
 534              		.cfi_endproc
 535              	.LFE1685:
 537              		.section	.text.DMA2_Channel4_IRQHandler,"ax",%progbits
 538              		.align	1
 539              		.global	DMA2_Channel4_IRQHandler
 540              		.syntax unified
 541              		.thumb
 542              		.thumb_func
 543              		.fpu fpv4-sp-d16
 545              	DMA2_Channel4_IRQHandler:
 546              	.LFB1686:
 350:Core/Src/stm32wbxx_it.c **** 
 351:Core/Src/stm32wbxx_it.c **** /**
 352:Core/Src/stm32wbxx_it.c ****   * @brief This function handles DMA2 channel4 global interrupt.
 353:Core/Src/stm32wbxx_it.c ****   */
 354:Core/Src/stm32wbxx_it.c **** void DMA2_Channel4_IRQHandler(void)
 355:Core/Src/stm32wbxx_it.c **** {
 547              		.loc 1 355 1 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 0
 550              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 87


 551 0000 08B5     		push	{r3, lr}
 552              	.LCFI9:
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 3, -8
 555              		.cfi_offset 14, -4
 356:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
 357:Core/Src/stm32wbxx_it.c **** 
 358:Core/Src/stm32wbxx_it.c ****   /* USER CODE END DMA2_Channel4_IRQn 0 */
 359:Core/Src/stm32wbxx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_tx);
 556              		.loc 1 359 3 view .LVU78
 557 0002 0248     		ldr	r0, .L44
 558 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 559              	.LVL16:
 360:Core/Src/stm32wbxx_it.c ****   /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */
 361:Core/Src/stm32wbxx_it.c **** 
 362:Core/Src/stm32wbxx_it.c ****   /* USER CODE END DMA2_Channel4_IRQn 1 */
 363:Core/Src/stm32wbxx_it.c **** }
 560              		.loc 1 363 1 is_stmt 0 view .LVU79
 561 0008 08BD     		pop	{r3, pc}
 562              	.L45:
 563 000a 00BF     		.align	2
 564              	.L44:
 565 000c 00000000 		.word	hdma_usart1_tx
 566              		.cfi_endproc
 567              	.LFE1686:
 569              		.text
 570              	.Letext0:
 571              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/machine/_de
 572              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/_stdint
 573              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 574              		.file 6 "Drivers/CMSIS/Device/ST/STM32WBxx/Include/system_stm32wbxx.h"
 575              		.file 7 "Drivers/CMSIS/Device/ST/STM32WBxx/Include/stm32wb55xx.h"
 576              		.file 8 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_def.h"
 577              		.file 9 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_dma.h"
 578              		.file 10 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_flash.h"
 579              		.file 11 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_ipcc.h"
 580              		.file 12 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_rtc.h"
 581              		.file 13 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_uart.h"
 582              		.file 14 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal.h"
 583              		.file 15 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/lock.h
 584              		.file 16 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/_types
 585              		.file 17 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/lib/gcc/arm-none-eabi/9.2.1/incl
 586              		.file 18 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/reent.
 587              		.file 19 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/stdlib.h"
 588              		.file 20 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_lpuart.h"
 589              		.file 21 "Core/Inc/queue.h"
 590              		.file 22 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_hsem.h"
 591              		.file 23 "Middlewares/ST/STM32_WPAN/interface/patterns/ble_thread/hw.h"
 592              		.file 24 "Core/Inc/main.h"
 593              		.file 25 "Core/Inc/hw_if.h"
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 88


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32wbxx_it.c
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:18     .text.NMI_Handler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:44     .text.HardFault_Handler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:51     .text.HardFault_Handler:0000000000000000 HardFault_Handler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:68     .text.MemManage_Handler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:75     .text.MemManage_Handler:0000000000000000 MemManage_Handler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:92     .text.BusFault_Handler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:99     .text.BusFault_Handler:0000000000000000 BusFault_Handler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:116    .text.UsageFault_Handler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:123    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:140    .text.SVC_Handler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:147    .text.SVC_Handler:0000000000000000 SVC_Handler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:160    .text.DebugMon_Handler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:167    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:180    .text.PendSV_Handler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:187    .text.PendSV_Handler:0000000000000000 PendSV_Handler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:200    .text.SysTick_Handler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:207    .text.SysTick_Handler:0000000000000000 SysTick_Handler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:227    .text.RTC_WKUP_IRQHandler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:234    .text.RTC_WKUP_IRQHandler:0000000000000000 RTC_WKUP_IRQHandler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:254    .text.DMA1_Channel4_IRQHandler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:261    .text.DMA1_Channel4_IRQHandler:0000000000000000 DMA1_Channel4_IRQHandler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:281    .text.DMA1_Channel4_IRQHandler:000000000000000c $d
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:286    .text.USART1_IRQHandler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:293    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:387    .text.USART1_IRQHandler:000000000000003c $d
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:393    .text.LPUART1_IRQHandler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:400    .text.LPUART1_IRQHandler:0000000000000000 LPUART1_IRQHandler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:420    .text.LPUART1_IRQHandler:000000000000000c $d
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:425    .text.RTC_Alarm_IRQHandler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:432    .text.RTC_Alarm_IRQHandler:0000000000000000 RTC_Alarm_IRQHandler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:452    .text.RTC_Alarm_IRQHandler:000000000000000c $d
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:457    .text.IPCC_C1_RX_IRQHandler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:464    .text.IPCC_C1_RX_IRQHandler:0000000000000000 IPCC_C1_RX_IRQHandler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:484    .text.IPCC_C1_TX_IRQHandler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:491    .text.IPCC_C1_TX_IRQHandler:0000000000000000 IPCC_C1_TX_IRQHandler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:511    .text.HSEM_IRQHandler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:518    .text.HSEM_IRQHandler:0000000000000000 HSEM_IRQHandler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:538    .text.DMA2_Channel4_IRQHandler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:545    .text.DMA2_Channel4_IRQHandler:0000000000000000 DMA2_Channel4_IRQHandler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s:565    .text.DMA2_Channel4_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HW_TS_RTC_Wakeup_Handler
HAL_DMA_IRQHandler
hdma_lpuart1_tx
UART_CharReception_Callback
UART_Error_Callback
HAL_UART_IRQHandler
huart1
hlpuart1
HAL_RTC_AlarmIRQHandler
hrtc
HW_IPCC_Rx_Handler
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//cc4wwEFf.s 			page 89


HW_IPCC_Tx_Handler
HAL_HSEM_IRQHandler
hdma_usart1_tx
