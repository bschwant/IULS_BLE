ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB1836:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "queue.h"
  25:Core/Src/main.c **** #include "retarget.h"
  26:Core/Src/main.c **** #include "command.h"
  27:Core/Src/main.c **** #include "dbg_trace.h"
  28:Core/Src/main.c **** #include <stm32wbxx_ll_usart.h>
  29:Core/Src/main.c **** #include "retarget.h"
  30:Core/Src/main.c **** /* USER CODE END Includes */
  31:Core/Src/main.c **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 2


  32:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PD */
  39:Core/Src/main.c **** // #define MAX_COMMAND_LENGTH
  40:Core/Src/main.c **** #define MAX_COMMAND_BUFF_LENGTH 20
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** // #define PRINT_DEBUG_TEMP 0
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** IPCC_HandleTypeDef hipcc;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** UART_HandleTypeDef hlpuart1;
  56:Core/Src/main.c **** UART_HandleTypeDef huart1;
  57:Core/Src/main.c **** DMA_HandleTypeDef hdma_lpuart1_tx;
  58:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_tx;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** RNG_HandleTypeDef hrng;
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** RTC_HandleTypeDef hrtc;
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* USER CODE BEGIN PV */
  67:Core/Src/main.c **** queue_t rx_queue;
  68:Core/Src/main.c **** int complete_command_flag;
  69:Core/Src/main.c **** uint8_t command_buffer[20];
  70:Core/Src/main.c **** int command_index;
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** uint32_t period = 0;
  73:Core/Src/main.c **** int alarm_flag = 0;
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** flash_status_t flash_status;
  76:Core/Src/main.c **** /* USER CODE END PV */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  79:Core/Src/main.c **** void SystemClock_Config(void);
  80:Core/Src/main.c **** void PeriphCommonClock_Config(void);
  81:Core/Src/main.c **** static void MX_GPIO_Init(void);
  82:Core/Src/main.c **** static void MX_DMA_Init(void);
  83:Core/Src/main.c **** static void MX_RF_Init(void);
  84:Core/Src/main.c **** static void MX_RTC_Init(void);
  85:Core/Src/main.c **** static void MX_IPCC_Init(void);
  86:Core/Src/main.c **** static void MX_RNG_Init(void);
  87:Core/Src/main.c **** static void MX_ADC1_Init(void);
  88:Core/Src/main.c **** static void MX_TIM2_Init(void);
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 3


  89:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** /* USER CODE END PFP */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  95:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** /**
  98:Core/Src/main.c ****  *  Callback function that updates the period of the TSL237 period
  99:Core/Src/main.c ****  *  Updates global variable period
 100:Core/Src/main.c ****  **/ 
 101:Core/Src/main.c **** void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 102:Core/Src/main.c ****   static uint32_t last = 0;
 103:Core/Src/main.c ****   uint32_t current;
 104:Core/Src/main.c ****   current = htim->Instance->CCR1;
 105:Core/Src/main.c ****   if (last <= current) {
 106:Core/Src/main.c ****     period = current - last;
 107:Core/Src/main.c ****   }
 108:Core/Src/main.c ****   else {
 109:Core/Src/main.c ****     period = htim->Instance->ARR - last + current;
 110:Core/Src/main.c ****   }
 111:Core/Src/main.c ****   last = current;
 112:Core/Src/main.c ****   // printf("%ld\r\n", period);
 113:Core/Src/main.c **** }
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** /* USER CODE END 0 */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /**
 118:Core/Src/main.c ****   * @brief  The application entry point.
 119:Core/Src/main.c ****   * @retval int
 120:Core/Src/main.c ****   */
 121:Core/Src/main.c **** int main(void)
 122:Core/Src/main.c **** {
 123:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 124:Core/Src/main.c ****   // Clear command_buff and set index to 0
 125:Core/Src/main.c ****   // command_index = 0;
 126:Core/Src/main.c ****   // memset(command_buff, 0, MAX_COMMAND_BUFF_LEN)
 127:Core/Src/main.c ****   // Change to same size as RX_queue eventually
 128:Core/Src/main.c ****   uint8_t command[20];
 129:Core/Src/main.c ****   int command_length;
 130:Core/Src/main.c ****   /* USER CODE END 1 */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 135:Core/Src/main.c ****   HAL_Init();
 136:Core/Src/main.c ****   /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
 137:Core/Src/main.c ****   MX_APPE_Config();
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* USER CODE END Init */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* Configure the system clock */
 144:Core/Src/main.c ****   SystemClock_Config();
 145:Core/Src/main.c **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 4


 146:Core/Src/main.c **** /* Configure the peripherals common clocks */
 147:Core/Src/main.c ****   PeriphCommonClock_Config();
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   /* IPCC initialisation */
 150:Core/Src/main.c ****    MX_IPCC_Init();
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* USER CODE END SysInit */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /* Initialize all configured peripherals */
 157:Core/Src/main.c ****   MX_GPIO_Init();
 158:Core/Src/main.c ****   MX_DMA_Init();
 159:Core/Src/main.c ****   MX_RF_Init();
 160:Core/Src/main.c ****   MX_RTC_Init();
 161:Core/Src/main.c ****   MX_RNG_Init();
 162:Core/Src/main.c ****   MX_ADC1_Init();
 163:Core/Src/main.c ****   MX_TIM2_Init();
 164:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 165:Core/Src/main.c ****   /*
 166:Core/Src/main.c ****    Check if debug messages are set to 1, defined in main.h
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****    Retarget UART if not and call init function
 169:Core/Src/main.c ****   */
 170:Core/Src/main.c ****   if(USER_PRINT_DEBUG_MSG == 0) {
 171:Core/Src/main.c ****     MX_USART1_UART_Init();
 172:Core/Src/main.c ****     // RetargetInit(&huart1);
 173:Core/Src/main.c ****     LL_USART_EnableIT_RXNE(&huart1);
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****     // RetargetInit
 176:Core/Src/main.c ****   }
 177:Core/Src/main.c ****   // else {
 178:Core/Src/main.c ****   //   LL_USART_EnableIT_RXNE(USART1);
 179:Core/Src/main.c ****   //   LL_USART_EnableIT_ERROR(USART1);
 180:Core/Src/main.c ****   // }
 181:Core/Src/main.c ****   // RetargetInit(&huart1);
 182:Core/Src/main.c ****   // printf("\r\n\r\nIU Light Sensor System Running\r\n");
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* USER CODE END 2 */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* Init code for STM32_WPAN */
 187:Core/Src/main.c ****   MX_APPE_Init();
 188:Core/Src/main.c ****   /* Infinite loop */
 189:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   // Send command bufferand command index to all 0
 192:Core/Src/main.c ****   complete_command_flag = 0;
 193:Core/Src/main.c ****   command_index = 0;
 194:Core/Src/main.c ****   memset(command_buffer, 0, MAX_COMMAND_BUFF_LENGTH);
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   // Initalize flash;
 197:Core/Src/main.c ****   flash_write_init(&flash_status);
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   // printf("\r\nSystem Up and Running\r\n");
 200:Core/Src/main.c ****   prompt();
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   // check_max();
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 5


 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   LL_USART_EnableIT_RXNE(USART1);
 205:Core/Src/main.c ****   LL_USART_EnableIT_ERROR(USART1);
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   // HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
 208:Core/Src/main.c ****   // HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Turn on the IRQ for CH1 input capture
 209:Core/Src/main.c ****   // int r = 0;
 210:Core/Src/main.c ****     /*## Start the Input Capture in interrupt mode ##########################*/
 211:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 212:Core/Src/main.c ****   if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 213:Core/Src/main.c ****   {
 214:Core/Src/main.c ****     /* Starting Error */
 215:Core/Src/main.c ****     Error_Handler();
 216:Core/Src/main.c ****   }
 217:Core/Src/main.c ****   // if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK)
 218:Core/Src/main.c ****   // {
 219:Core/Src/main.c ****   //   /* Starting Error */
 220:Core/Src/main.c ****   //   Error_Handler();
 221:Core/Src/main.c ****   // }
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   while (1)
 224:Core/Src/main.c ****   {
 225:Core/Src/main.c ****     /* USER CODE END WHILE */
 226:Core/Src/main.c ****     MX_APPE_Process();
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 229:Core/Src/main.c ****   }
 230:Core/Src/main.c ****   /* USER CODE END 3 */
 231:Core/Src/main.c **** }
 232:Core/Src/main.c **** 
 233:Core/Src/main.c **** /**
 234:Core/Src/main.c ****   * @brief System Clock Configuration
 235:Core/Src/main.c ****   * @retval None
 236:Core/Src/main.c ****   */
 237:Core/Src/main.c **** void SystemClock_Config(void)
 238:Core/Src/main.c **** {
 239:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 240:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /** Macro to configure the PLL multiplication factor
 243:Core/Src/main.c ****   */
 244:Core/Src/main.c ****   __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 245:Core/Src/main.c ****   /** Macro to configure the PLL clock source
 246:Core/Src/main.c ****   */
 247:Core/Src/main.c ****   __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 248:Core/Src/main.c ****   /** Configure LSE Drive Capability
 249:Core/Src/main.c ****   */
 250:Core/Src/main.c ****   HAL_PWR_EnableBkUpAccess();
 251:Core/Src/main.c ****   __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 252:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 253:Core/Src/main.c ****   */
 254:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 255:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 256:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 257:Core/Src/main.c ****   */
 258:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 259:Core/Src/main.c ****                               |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 6


 260:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 261:Core/Src/main.c ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 262:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 266:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 267:Core/Src/main.c ****   {
 268:Core/Src/main.c ****     Error_Handler();
 269:Core/Src/main.c ****   }
 270:Core/Src/main.c ****   /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
 271:Core/Src/main.c ****   */
 272:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 273:Core/Src/main.c ****                               |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 274:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 275:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 276:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 277:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 278:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 279:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 280:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 283:Core/Src/main.c ****   {
 284:Core/Src/main.c ****     Error_Handler();
 285:Core/Src/main.c ****   }
 286:Core/Src/main.c **** }
 287:Core/Src/main.c **** 
 288:Core/Src/main.c **** /**
 289:Core/Src/main.c ****   * @brief Peripherals Common Clock Configuration
 290:Core/Src/main.c ****   * @retval None
 291:Core/Src/main.c ****   */
 292:Core/Src/main.c **** void PeriphCommonClock_Config(void)
 293:Core/Src/main.c **** {
 294:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /** Initializes the peripherals clock
 297:Core/Src/main.c ****   */
 298:Core/Src/main.c ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 299:Core/Src/main.c ****   PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 300:Core/Src/main.c ****   PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 301:Core/Src/main.c ****   PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 304:Core/Src/main.c ****   {
 305:Core/Src/main.c ****     Error_Handler();
 306:Core/Src/main.c ****   }
 307:Core/Src/main.c ****   /* USER CODE BEGIN Smps */
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /* USER CODE END Smps */
 310:Core/Src/main.c **** }
 311:Core/Src/main.c **** 
 312:Core/Src/main.c **** /**
 313:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 314:Core/Src/main.c ****   * @param None
 315:Core/Src/main.c ****   * @retval None
 316:Core/Src/main.c ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 7


 317:Core/Src/main.c **** static void MX_ADC1_Init(void)
 318:Core/Src/main.c **** {
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 329:Core/Src/main.c ****   /** Common config
 330:Core/Src/main.c ****   */
 331:Core/Src/main.c ****   hadc1.Instance = ADC1;
 332:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 333:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 334:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 335:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 336:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 337:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 338:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 339:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 340:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 341:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 342:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 343:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 344:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 345:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 346:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 347:Core/Src/main.c ****   {
 348:Core/Src/main.c ****     Error_Handler();
 349:Core/Src/main.c ****   }
 350:Core/Src/main.c ****   /** Configure Regular Channel
 351:Core/Src/main.c ****   */
 352:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_VREFINT;
 353:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 354:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 355:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 356:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 357:Core/Src/main.c ****   sConfig.Offset = 0;
 358:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 359:Core/Src/main.c ****   {
 360:Core/Src/main.c ****     Error_Handler();
 361:Core/Src/main.c ****   }
 362:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 365:Core/Src/main.c **** 
 366:Core/Src/main.c **** }
 367:Core/Src/main.c **** 
 368:Core/Src/main.c **** /**
 369:Core/Src/main.c ****   * @brief IPCC Initialization Function
 370:Core/Src/main.c ****   * @param None
 371:Core/Src/main.c ****   * @retval None
 372:Core/Src/main.c ****   */
 373:Core/Src/main.c **** static void MX_IPCC_Init(void)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 8


 374:Core/Src/main.c **** {
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   /* USER CODE BEGIN IPCC_Init 0 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE END IPCC_Init 0 */
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   /* USER CODE BEGIN IPCC_Init 1 */
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   /* USER CODE END IPCC_Init 1 */
 383:Core/Src/main.c ****   hipcc.Instance = IPCC;
 384:Core/Src/main.c ****   if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 385:Core/Src/main.c ****   {
 386:Core/Src/main.c ****     Error_Handler();
 387:Core/Src/main.c ****   }
 388:Core/Src/main.c ****   /* USER CODE BEGIN IPCC_Init 2 */
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /* USER CODE END IPCC_Init 2 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c **** }
 393:Core/Src/main.c **** 
 394:Core/Src/main.c **** /**
 395:Core/Src/main.c ****   * @brief LPUART1 Initialization Function
 396:Core/Src/main.c ****   * @param None
 397:Core/Src/main.c ****   * @retval None
 398:Core/Src/main.c ****   */
 399:Core/Src/main.c **** void MX_LPUART1_UART_Init(void)
 400:Core/Src/main.c **** {
 401:Core/Src/main.c **** 
 402:Core/Src/main.c ****   /* USER CODE BEGIN LPUART1_Init 0 */
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****   /* USER CODE END LPUART1_Init 0 */
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /* USER CODE BEGIN LPUART1_Init 1 */
 407:Core/Src/main.c ****   LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 410:Core/Src/main.c ****   /* USER CODE END LPUART1_Init 1 */
 411:Core/Src/main.c ****   hlpuart1.Instance = LPUART1;
 412:Core/Src/main.c ****   hlpuart1.Init.BaudRate = 115200;
 413:Core/Src/main.c ****   hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 414:Core/Src/main.c ****   hlpuart1.Init.StopBits = UART_STOPBITS_1;
 415:Core/Src/main.c ****   hlpuart1.Init.Parity = UART_PARITY_NONE;
 416:Core/Src/main.c ****   hlpuart1.Init.Mode = UART_MODE_TX_RX;
 417:Core/Src/main.c ****   hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 418:Core/Src/main.c ****   hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 419:Core/Src/main.c ****   hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 420:Core/Src/main.c ****   hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 421:Core/Src/main.c ****   hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 422:Core/Src/main.c ****   if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 423:Core/Src/main.c ****   {
 424:Core/Src/main.c ****     Error_Handler();
 425:Core/Src/main.c ****   }
 426:Core/Src/main.c ****   if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 427:Core/Src/main.c ****   {
 428:Core/Src/main.c ****     Error_Handler();
 429:Core/Src/main.c ****   }
 430:Core/Src/main.c ****   if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 9


 431:Core/Src/main.c ****   {
 432:Core/Src/main.c ****     Error_Handler();
 433:Core/Src/main.c ****   }
 434:Core/Src/main.c ****   if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 435:Core/Src/main.c ****   {
 436:Core/Src/main.c ****     Error_Handler();
 437:Core/Src/main.c ****   }
 438:Core/Src/main.c ****   /* USER CODE BEGIN LPUART1_Init 2 */
 439:Core/Src/main.c ****   // NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 440:Core/Src/main.c ****   // NVIC_EnableIRQ(LPUART1_IRQn);
 441:Core/Src/main.c ****   // LL_LPUART_SetWKUPType(LPUART1, LL_LPUART_WAKEUP_ON_RXNE);
 442:Core/Src/main.c ****   // LL_LPUART_Enable(LPUART1);
 443:Core/Src/main.c ****   //   /* Polling LPUART1 initialisation */
 444:Core/Src/main.c ****   // while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1)))
 445:Core/Src/main.c ****   // {
 446:Core/Src/main.c ****   // }
 447:Core/Src/main.c ****   /* USER CODE END LPUART1_Init 2 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c **** }
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** /**
 452:Core/Src/main.c ****   * @brief USART1 Initialization Function
 453:Core/Src/main.c ****   * @param None
 454:Core/Src/main.c ****   * @retval None
 455:Core/Src/main.c ****   */
 456:Core/Src/main.c **** void MX_USART1_UART_Init(void)
 457:Core/Src/main.c **** {
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 466:Core/Src/main.c ****   huart1.Instance = USART1;
 467:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 468:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 469:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 470:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 471:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 472:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 473:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 474:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 475:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 476:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 477:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 478:Core/Src/main.c ****   {
 479:Core/Src/main.c ****     Error_Handler();
 480:Core/Src/main.c ****   }
 481:Core/Src/main.c ****   if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 482:Core/Src/main.c ****   {
 483:Core/Src/main.c ****     Error_Handler();
 484:Core/Src/main.c ****   }
 485:Core/Src/main.c ****   if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 486:Core/Src/main.c ****   {
 487:Core/Src/main.c ****     Error_Handler();
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 10


 488:Core/Src/main.c ****   }
 489:Core/Src/main.c ****   if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 490:Core/Src/main.c ****   {
 491:Core/Src/main.c ****     Error_Handler();
 492:Core/Src/main.c ****   }
 493:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 494:Core/Src/main.c ****   // NVIC_EnableIRQ(USART1_IRQn); 
 495:Core/Src/main.c ****   // LL_USART_EnableIR
 496:Core/Src/main.c ****   // LL_USART_EnableIT_RXNE(USART1);  
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****   // LL_USART_EnableIT_RXNE(&huart1);
 499:Core/Src/main.c ****   // LL_USART_EnableIT_ERROR(&huart1);
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 502:Core/Src/main.c **** 
 503:Core/Src/main.c **** }
 504:Core/Src/main.c **** 
 505:Core/Src/main.c **** /**
 506:Core/Src/main.c ****   * @brief RF Initialization Function
 507:Core/Src/main.c ****   * @param None
 508:Core/Src/main.c ****   * @retval None
 509:Core/Src/main.c ****   */
 510:Core/Src/main.c **** static void MX_RF_Init(void)
 511:Core/Src/main.c **** {
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****   /* USER CODE BEGIN RF_Init 0 */
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****   /* USER CODE END RF_Init 0 */
 516:Core/Src/main.c **** 
 517:Core/Src/main.c ****   /* USER CODE BEGIN RF_Init 1 */
 518:Core/Src/main.c **** 
 519:Core/Src/main.c ****   /* USER CODE END RF_Init 1 */
 520:Core/Src/main.c ****   /* USER CODE BEGIN RF_Init 2 */
 521:Core/Src/main.c **** 
 522:Core/Src/main.c ****   /* USER CODE END RF_Init 2 */
 523:Core/Src/main.c **** 
 524:Core/Src/main.c **** }
 525:Core/Src/main.c **** 
 526:Core/Src/main.c **** /**
 527:Core/Src/main.c ****   * @brief RNG Initialization Function
 528:Core/Src/main.c ****   * @param None
 529:Core/Src/main.c ****   * @retval None
 530:Core/Src/main.c ****   */
 531:Core/Src/main.c **** static void MX_RNG_Init(void)
 532:Core/Src/main.c **** {
 533:Core/Src/main.c **** 
 534:Core/Src/main.c ****   /* USER CODE BEGIN RNG_Init 0 */
 535:Core/Src/main.c **** 
 536:Core/Src/main.c ****   /* USER CODE END RNG_Init 0 */
 537:Core/Src/main.c **** 
 538:Core/Src/main.c ****   /* USER CODE BEGIN RNG_Init 1 */
 539:Core/Src/main.c **** 
 540:Core/Src/main.c ****   /* USER CODE END RNG_Init 1 */
 541:Core/Src/main.c ****   hrng.Instance = RNG;
 542:Core/Src/main.c ****   hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 543:Core/Src/main.c ****   if (HAL_RNG_Init(&hrng) != HAL_OK)
 544:Core/Src/main.c ****   {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 11


 545:Core/Src/main.c ****     Error_Handler();
 546:Core/Src/main.c ****   }
 547:Core/Src/main.c ****   /* USER CODE BEGIN RNG_Init 2 */
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****   /* USER CODE END RNG_Init 2 */
 550:Core/Src/main.c **** 
 551:Core/Src/main.c **** }
 552:Core/Src/main.c **** 
 553:Core/Src/main.c **** /**
 554:Core/Src/main.c ****   * @brief RTC Initialization Function
 555:Core/Src/main.c ****   * @param None
 556:Core/Src/main.c ****   * @retval None
 557:Core/Src/main.c ****   */
 558:Core/Src/main.c **** static void MX_RTC_Init(void)
 559:Core/Src/main.c **** {
 560:Core/Src/main.c **** 
 561:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 0 */
 562:Core/Src/main.c **** 
 563:Core/Src/main.c ****   /* USER CODE END RTC_Init 0 */
 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****   RTC_TimeTypeDef sTime = {0};
 566:Core/Src/main.c ****   RTC_DateTypeDef sDate = {0};
 567:Core/Src/main.c ****   RTC_AlarmTypeDef sAlarm = {0};
 568:Core/Src/main.c **** 
 569:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 1 */
 570:Core/Src/main.c **** 
 571:Core/Src/main.c ****   /* USER CODE END RTC_Init 1 */
 572:Core/Src/main.c ****   /** Initialize RTC Only
 573:Core/Src/main.c ****   */
 574:Core/Src/main.c ****   hrtc.Instance = RTC;
 575:Core/Src/main.c ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 576:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 577:Core/Src/main.c ****   hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 578:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 579:Core/Src/main.c ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 580:Core/Src/main.c ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 581:Core/Src/main.c ****   hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 582:Core/Src/main.c ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 583:Core/Src/main.c ****   {
 584:Core/Src/main.c ****     Error_Handler();
 585:Core/Src/main.c ****   }
 586:Core/Src/main.c **** 
 587:Core/Src/main.c ****   /* USER CODE BEGIN Check_RTC_BKUP */
 588:Core/Src/main.c **** 
 589:Core/Src/main.c ****   /* USER CODE END Check_RTC_BKUP */
 590:Core/Src/main.c **** 
 591:Core/Src/main.c ****   /** Initialize RTC and set the Time and Date
 592:Core/Src/main.c ****   */
 593:Core/Src/main.c ****   sTime.Hours = 0x0;
 594:Core/Src/main.c ****   sTime.Minutes = 0x0;
 595:Core/Src/main.c ****   sTime.Seconds = 0x0;
 596:Core/Src/main.c ****   sTime.SubSeconds = 0x0;
 597:Core/Src/main.c ****   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 598:Core/Src/main.c ****   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 599:Core/Src/main.c ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 600:Core/Src/main.c ****   {
 601:Core/Src/main.c ****     Error_Handler();
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 12


 602:Core/Src/main.c ****   }
 603:Core/Src/main.c ****   sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 604:Core/Src/main.c ****   sDate.Month = RTC_MONTH_JANUARY;
 605:Core/Src/main.c ****   sDate.Date = 0x1;
 606:Core/Src/main.c ****   sDate.Year = 0x0;
 607:Core/Src/main.c ****   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 608:Core/Src/main.c ****   {
 609:Core/Src/main.c ****     Error_Handler();
 610:Core/Src/main.c ****   }
 611:Core/Src/main.c ****   /** Enable the Alarm A
 612:Core/Src/main.c ****   */
 613:Core/Src/main.c ****   sAlarm.AlarmTime.Hours = 0x0;
 614:Core/Src/main.c ****   sAlarm.AlarmTime.Minutes = 0x0;
 615:Core/Src/main.c ****   sAlarm.AlarmTime.Seconds = 0x30;
 616:Core/Src/main.c ****   sAlarm.AlarmTime.SubSeconds = 0x0;
 617:Core/Src/main.c ****   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 618:Core/Src/main.c ****   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 619:Core/Src/main.c ****   sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 620:Core/Src/main.c ****                               |RTC_ALARMMASK_MINUTES;
 621:Core/Src/main.c ****   sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 622:Core/Src/main.c ****   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 623:Core/Src/main.c ****   sAlarm.AlarmDateWeekDay = 0x1;
 624:Core/Src/main.c ****   sAlarm.Alarm = RTC_ALARM_A;
 625:Core/Src/main.c ****   if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 626:Core/Src/main.c ****   {
 627:Core/Src/main.c ****     Error_Handler();
 628:Core/Src/main.c ****   }
 629:Core/Src/main.c ****   /** Enable the WakeUp
 630:Core/Src/main.c ****   */
 631:Core/Src/main.c ****   if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 632:Core/Src/main.c ****   {
 633:Core/Src/main.c ****     Error_Handler();
 634:Core/Src/main.c ****   }
 635:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 2 */
 636:Core/Src/main.c ****   // sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 637:Core/Src/main.c ****   if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 638:Core/Src/main.c ****   {
 639:Core/Src/main.c ****     Error_Handler();
 640:Core/Src/main.c ****   }
 641:Core/Src/main.c **** 
 642:Core/Src/main.c ****   // added from https://community.st.com/s/question/0D53W00001K2koYSAR/hwtimerserver-hangs-on-stm32
 643:Core/Src/main.c ****    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 644:Core/Src/main.c ****   /* USER CODE END RTC_Init 2 */
 645:Core/Src/main.c **** 
 646:Core/Src/main.c **** }
 647:Core/Src/main.c **** 
 648:Core/Src/main.c **** /**
 649:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 650:Core/Src/main.c ****   * @param None
 651:Core/Src/main.c ****   * @retval None
 652:Core/Src/main.c ****   */
 653:Core/Src/main.c **** static void MX_TIM2_Init(void)
 654:Core/Src/main.c **** {
 655:Core/Src/main.c **** 
 656:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 657:Core/Src/main.c **** 
 658:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 13


 659:Core/Src/main.c **** 
 660:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 661:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 662:Core/Src/main.c **** 
 663:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 664:Core/Src/main.c **** 
 665:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 666:Core/Src/main.c ****   htim2.Instance = TIM2;
 667:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 668:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 669:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 670:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 671:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 672:Core/Src/main.c ****   if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 673:Core/Src/main.c ****   {
 674:Core/Src/main.c ****     Error_Handler();
 675:Core/Src/main.c ****   }
 676:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 677:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 678:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 679:Core/Src/main.c ****   {
 680:Core/Src/main.c ****     Error_Handler();
 681:Core/Src/main.c ****   }
 682:Core/Src/main.c ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 683:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 684:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 685:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 686:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 687:Core/Src/main.c ****   {
 688:Core/Src/main.c ****     Error_Handler();
 689:Core/Src/main.c ****   }
 690:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 691:Core/Src/main.c ****   {
 692:Core/Src/main.c ****     Error_Handler();
 693:Core/Src/main.c ****   }
 694:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 695:Core/Src/main.c ****   // HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
 696:Core/Src/main.c ****   // HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Turn on the IRQ for CH1 input capture
 697:Core/Src/main.c ****   // if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK){
 698:Core/Src/main.c ****   //   /* Starting Error */ 
 699:Core/Src/main.c ****   //   Error_Handler();
 700:Core/Src/main.c ****   // }
 701:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 702:Core/Src/main.c **** 
 703:Core/Src/main.c **** }
 704:Core/Src/main.c **** 
 705:Core/Src/main.c **** /**
 706:Core/Src/main.c ****   * Enable DMA controller clock
 707:Core/Src/main.c ****   */
 708:Core/Src/main.c **** static void MX_DMA_Init(void)
 709:Core/Src/main.c **** {
 710:Core/Src/main.c **** 
 711:Core/Src/main.c ****   /* DMA controller clock enable */
 712:Core/Src/main.c ****   __HAL_RCC_DMAMUX1_CLK_ENABLE();
 713:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 714:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 715:Core/Src/main.c **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 14


 716:Core/Src/main.c ****   /* DMA interrupt init */
 717:Core/Src/main.c ****   /* DMA1_Channel4_IRQn interrupt configuration */
 718:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 719:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 720:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 721:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 722:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 723:Core/Src/main.c **** 
 724:Core/Src/main.c **** }
 725:Core/Src/main.c **** 
 726:Core/Src/main.c **** /**
 727:Core/Src/main.c ****   * @brief GPIO Initialization Function
 728:Core/Src/main.c ****   * @param None
 729:Core/Src/main.c ****   * @retval None
 730:Core/Src/main.c ****   */
 731:Core/Src/main.c **** static void MX_GPIO_Init(void)
 732:Core/Src/main.c **** {
  28              		.loc 1 732 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 84B0     		sub	sp, sp, #16
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
 733:Core/Src/main.c **** 
 734:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 735:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  36              		.loc 1 735 3 view .LVU1
  37              	.LVL0:
  38              	.LBB61:
  39              	.LBI61:
  40              		.file 2 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h"
   1:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
   2:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   ******************************************************************************
   3:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @file    stm32wbxx_ll_bus.h
   4:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @author  MCD Application Team
   5:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief   Header file of BUS LL module.
   6:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   ******************************************************************************
   7:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @attention
   8:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *
   9:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * All rights reserved.
  11:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *
  12:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * in the root directory of this software component.
  14:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *
  16:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   ******************************************************************************
  17:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   @verbatim
  18:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****                       ##### RCC Limitations #####
  19:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   ==============================================================================
  20:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****     [..]
  21:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****       A delay between an RCC peripheral clock enable and the effective peripheral
  22:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****       enabling should be taken into account in order to manage the peripheral read/write
  23:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****       from/to registers.
  24:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****       (+) This delay depends on the peripheral mapping.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 15


  25:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  26:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  27:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****     [..]
  28:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****       Workarounds:
  29:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  30:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****           inserted in each LL_{BUS}_GRP{x}_EnableClock() function.
  31:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  32:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   @endverbatim
  33:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   ******************************************************************************
  34:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
  35:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  36:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #ifndef STM32WBxx_LL_BUS_H
  38:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define STM32WBxx_LL_BUS_H
  39:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  40:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #ifdef __cplusplus
  41:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** extern "C" {
  42:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
  43:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  44:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #include "stm32wbxx.h"
  46:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  47:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @addtogroup STM32WBxx_LL_Driver
  48:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
  49:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
  50:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  51:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(RCC)
  52:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  53:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL BUS
  54:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
  55:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
  56:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  57:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  60:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /* Private constants ---------------------------------------------------------*/
  61:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  62:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /* Private macros ------------------------------------------------------------*/
  63:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  64:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /* Exported types ------------------------------------------------------------*/
  65:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  66:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /* Exported constants --------------------------------------------------------*/
  67:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Constants BUS Exported Constants
  68:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
  69:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
  70:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  71:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_AHB1_GRP1_PERIPH  AHB1 GRP1 PERIPH
  72:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
  73:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
  74:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ALL            (0xFFFFFFFFU)
  75:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  76:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA1           RCC_AHB1ENR_DMA1EN
  77:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(DMA2)
  78:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA2           RCC_AHB1ENR_DMA2EN
  79:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
  80:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMAMUX1        RCC_AHB1ENR_DMAMUX1EN
  81:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_SRAM1          RCC_AHB1SMENR_SRAM1SMEN
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 16


  82:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRC            RCC_AHB1ENR_CRCEN
  83:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(TSC)
  84:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_TSC            RCC_AHB1ENR_TSCEN
  85:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
  86:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
  87:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
  88:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
  89:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  90:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_AHB2_GRP1_PERIPH  AHB2 GRP1 PERIPH
  91:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
  92:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
  93:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB2_GRP1_PERIPH_ALL            (0xFFFFFFFFU)
  94:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
  95:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB2_GRP1_PERIPH_GPIOA          RCC_AHB2ENR_GPIOAEN
  96:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB2_GRP1_PERIPH_GPIOB          RCC_AHB2ENR_GPIOBEN
  97:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB2_GRP1_PERIPH_GPIOC          RCC_AHB2ENR_GPIOCEN
  98:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(GPIOD)
  99:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB2_GRP1_PERIPH_GPIOD          RCC_AHB2ENR_GPIODEN
 100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB2_GRP1_PERIPH_GPIOE          RCC_AHB2ENR_GPIOEEN
 102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB2_GRP1_PERIPH_GPIOH          RCC_AHB2ENR_GPIOHEN
 103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(ADC_SUPPORT_5_MSPS)
 104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB2_GRP1_PERIPH_ADC            RCC_AHB2ENR_ADCEN
 105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(AES1)
 107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB2_GRP1_PERIPH_AES1           RCC_AHB2ENR_AES1EN
 108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_AHB3_GRP1_PERIPH  AHB3 GRP1 PERIPH
 114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB3_GRP1_PERIPH_ALL            (0xFFFFFFFFU)
 117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(QUADSPI)
 118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB3_GRP1_PERIPH_QUADSPI        RCC_AHB3ENR_QUADSPIEN
 119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB3_GRP1_PERIPH_PKA            RCC_AHB3ENR_PKAEN
 121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB3_GRP1_PERIPH_AES2           RCC_AHB3ENR_AES2EN
 122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB3_GRP1_PERIPH_RNG            RCC_AHB3ENR_RNGEN
 123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB3_GRP1_PERIPH_HSEM           RCC_AHB3ENR_HSEMEN
 124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB3_GRP1_PERIPH_IPCC           RCC_AHB3ENR_IPCCEN
 125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB3_GRP1_PERIPH_SRAM2          RCC_AHB3SMENR_SRAM2SMEN
 126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_AHB3_GRP1_PERIPH_FLASH          RCC_AHB3ENR_FLASHEN
 127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB1_GRP1_PERIPH  APB1 GRP1 PERIPH
 132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_ALL            (0xFFFFFFFFU)
 135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM2           RCC_APB1ENR1_TIM2EN
 136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(LCD)
 137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LCD            RCC_APB1ENR1_LCDEN
 138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 17


 139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_RTCAPB         RCC_APB1ENR1_RTCAPBEN
 140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_WWDG           RCC_APB1ENR1_WWDGEN
 141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(SPI2)
 142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_SPI2           RCC_APB1ENR1_SPI2EN
 143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C1           RCC_APB1ENR1_I2C1EN
 145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(I2C3)
 146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C3           RCC_APB1ENR1_I2C3EN
 147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(CRS)
 149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_CRS            RCC_APB1ENR1_CRSEN
 150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(USB)
 152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USB            RCC_APB1ENR1_USBEN
 153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LPTIM1         RCC_APB1ENR1_LPTIM1EN
 155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB1_GRP2_PERIPH  APB1 GRP2 PERIPH
 161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP2_PERIPH_ALL            (0xFFFFFFFFU)
 164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(LPUART1)
 166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP2_PERIPH_LPUART1        RCC_APB1ENR2_LPUART1EN
 167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB1_GRP2_PERIPH_LPTIM2         RCC_APB1ENR2_LPTIM2EN
 169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB2_GRP1_PERIPH  APB2 GRP1 PERIPH
 174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ALL            (0xFFFFFFFFU)
 177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   
 178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(ADC_SUPPORT_2_5_MSPS)
 179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ADC            RCC_APB2ENR_ADCEN
 180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM1           RCC_APB2ENR_TIM1EN
 182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SPI1           RCC_APB2ENR_SPI1EN
 183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_USART1         RCC_APB2ENR_USART1EN
 184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(TIM16)
 185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM16          RCC_APB2ENR_TIM16EN
 186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(TIM17)
 188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM17          RCC_APB2ENR_TIM17EN
 189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(SAI1)
 191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SAI1           RCC_APB2ENR_SAI1EN
 192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 18


 196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB3_GRP1_PERIPH  APB3 GRP1 PERIPH
 198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB3_GRP1_PERIPH_ALL            (0xFFFFFFFFU)
 201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_APB3_GRP1_PERIPH_RF             RCC_APB3RSTR_RFRST
 202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_C2_AHB1_GRP1_PERIPH  C2 AHB1 GRP1 PERIPH
 208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB1_GRP1_PERIPH_DMA1         RCC_C2AHB1ENR_DMA1EN
 211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(DMA2)
 212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB1_GRP1_PERIPH_DMA2         RCC_C2AHB1ENR_DMA2EN
 213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB1_GRP1_PERIPH_DMAMUX1      RCC_C2AHB1ENR_DMAMUX1EN
 215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB1_GRP1_PERIPH_SRAM1        RCC_C2AHB1ENR_SRAM1EN
 216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB1_GRP1_PERIPH_CRC          RCC_C2AHB1ENR_CRCEN
 217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(TSC)
 218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB1_GRP1_PERIPH_TSC          RCC_C2AHB1ENR_TSCEN
 219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_C2_AHB2_GRP1_PERIPH  C2 AHB2 GRP1 PERIPH
 226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB2_GRP1_PERIPH_GPIOA        RCC_C2AHB2ENR_GPIOAEN
 229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB2_GRP1_PERIPH_GPIOB        RCC_C2AHB2ENR_GPIOBEN
 230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB2_GRP1_PERIPH_GPIOC        RCC_C2AHB2ENR_GPIOCEN
 231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(GPIOD)
 232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB2_GRP1_PERIPH_GPIOD        RCC_C2AHB2ENR_GPIODEN
 233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB2_GRP1_PERIPH_GPIOE        RCC_C2AHB2ENR_GPIOEEN
 235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB2_GRP1_PERIPH_GPIOH        RCC_C2AHB2ENR_GPIOHEN
 236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(ADC_SUPPORT_5_MSPS)
 237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB2_GRP1_PERIPH_ADC          RCC_C2AHB2ENR_ADCEN
 238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(AES1)
 240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB2_GRP1_PERIPH_AES1         RCC_C2AHB2ENR_AES1EN
 241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_C2_AHB3_GRP1_PERIPH  C2 AHB3 GRP1 PERIPH
 248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB3_GRP1_PERIPH_PKA          RCC_C2AHB3ENR_PKAEN
 251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB3_GRP1_PERIPH_AES2         RCC_C2AHB3ENR_AES2EN
 252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB3_GRP1_PERIPH_RNG          RCC_C2AHB3ENR_RNGEN
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 19


 253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB3_GRP1_PERIPH_HSEM         RCC_C2AHB3ENR_HSEMEN
 254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB3_GRP1_PERIPH_IPCC         RCC_C2AHB3ENR_IPCCEN
 255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB3_GRP1_PERIPH_FLASH        RCC_C2AHB3ENR_FLASHEN
 256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_AHB3_GRP1_PERIPH_SRAM2        RCC_C2AHB3SMENR_SRAM2SMEN
 257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_C2_APB1_GRP1_PERIPH  C2 APB1 GRP1 PERIPH
 263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP1_PERIPH_TIM2         RCC_C2APB1ENR1_TIM2EN
 266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(LCD)
 267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP1_PERIPH_LCD          RCC_C2APB1ENR1_LCDEN
 268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP1_PERIPH_RTCAPB       RCC_C2APB1ENR1_RTCAPBEN
 270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(SPI2)
 271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP1_PERIPH_SPI2         RCC_C2APB1ENR1_SPI2EN
 272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP1_PERIPH_I2C1         RCC_C2APB1ENR1_I2C1EN
 274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(I2C3)
 275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP1_PERIPH_I2C3         RCC_C2APB1ENR1_I2C3EN
 276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP1_PERIPH_CRS          RCC_C2APB1ENR1_CRSEN
 277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP1_PERIPH_USB          RCC_C2APB1ENR1_USBEN
 278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP1_PERIPH_LPTIM1       RCC_C2APB1ENR1_LPTIM1EN
 280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_C2_APB1_GRP2_PERIPH  C2 APB1 GRP2 PERIPH
 286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(LPUART1)
 289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP2_PERIPH_LPUART1      RCC_C2APB1ENR2_LPUART1EN
 290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB1_GRP2_PERIPH_LPTIM2       RCC_C2APB1ENR2_LPTIM2EN
 292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_C2_APB2_GRP1_PERIPH  C2 APB2 GRP1 PERIPH
 298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(ADC_SUPPORT_2_5_MSPS)
 301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB2_GRP1_PERIPH_ADC          RCC_C2APB2ENR_ADCEN
 302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB2_GRP1_PERIPH_TIM1         RCC_C2APB2ENR_TIM1EN
 304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB2_GRP1_PERIPH_SPI1         RCC_C2APB2ENR_SPI1EN
 305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB2_GRP1_PERIPH_USART1       RCC_C2APB2ENR_USART1EN
 306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(TIM16)
 307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB2_GRP1_PERIPH_TIM16        RCC_C2APB2ENR_TIM16EN
 308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(TIM17)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 20


 310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB2_GRP1_PERIPH_TIM17        RCC_C2APB2ENR_TIM17EN
 311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(SAI1)
 313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB2_GRP1_PERIPH_SAI1         RCC_C2APB2ENR_SAI1EN
 314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EC_C2_APB3_GRP1_PERIPH  C2 APB3 GRP1 PERIPH
 321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB3_GRP1_PERIPH_BLE          RCC_C2APB3ENR_BLEEN
 324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #if defined(RCC_802_SUPPORT)
 325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #define LL_C2_APB3_GRP1_PERIPH_802          RCC_C2APB3ENR_802EN
 326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** #endif
 327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /* Exported macro ------------------------------------------------------------*/
 337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /* Exported functions --------------------------------------------------------*/
 339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Functions BUS Exported Functions
 341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EF_AHB1 AHB1
 345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock.
 350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB1ENR      DMA1EN        LL_AHB1_GRP1_EnableClock\n
 351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      DMA2EN        LL_AHB1_GRP1_EnableClock\n
 352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      DMAMUX1EN      LL_AHB1_GRP1_EnableClock\n
 353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      CRCEN         LL_AHB1_GRP1_EnableClock\n
 354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      TSCEN         LL_AHB1_GRP1_EnableClock
 355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
 359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
 365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   __IO uint32_t tmpreg;
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 21


 367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB1ENR, Periphs);
 368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Check if AHB1 peripheral clock is enabled or not
 375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB1ENR      DMA1EN        LL_AHB1_GRP1_IsEnabledClock\n
 376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      DMA2EN        LL_AHB1_GRP1_IsEnabledClock\n
 377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      DMAMUX1EN      LL_AHB1_GRP1_IsEnabledClock\n
 378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      CRCEN         LL_AHB1_GRP1_IsEnabledClock\n
 379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      TSCEN         LL_AHB1_GRP1_IsEnabledClock
 380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
 384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval uint32_t
 388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE uint32_t LL_AHB1_GRP1_IsEnabledClock(uint32_t Periphs)
 390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   return ((READ_BIT(RCC->AHB1ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock.
 396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB1ENR      DMA1EN        LL_AHB1_GRP1_DisableClock\n
 397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      DMA2EN        LL_AHB1_GRP1_DisableClock\n
 398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      DMAMUX1EN      LL_AHB1_GRP1_DisableClock\n
 399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      CRCEN         LL_AHB1_GRP1_DisableClock\n
 400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1ENR      TSCEN         LL_AHB1_GRP1_DisableClock
 401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
 405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClock(uint32_t Periphs)
 411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   CLEAR_BIT(RCC->AHB1ENR, Periphs);
 413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Force AHB1 peripherals reset.
 417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB1RSTR     DMA1RST       LL_AHB1_GRP1_ForceReset\n
 418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1RSTR     DMA2RST       LL_AHB1_GRP1_ForceReset\n
 419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1RSTR     DMAMUX1RST     LL_AHB1_GRP1_ForceReset\n
 420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1RSTR     CRCRST        LL_AHB1_GRP1_ForceReset\n
 421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1RSTR     TSCRST        LL_AHB1_GRP1_ForceReset
 422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 22


 424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
 427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
 433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB1RSTR, Periphs);
 435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Release AHB1 peripherals reset.
 439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB1RSTR     DMA1RST       LL_AHB1_GRP1_ReleaseReset\n
 440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1RSTR     DMA2RST       LL_AHB1_GRP1_ReleaseReset\n
 441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1RSTR     DMAMUX1RST     LL_AHB1_GRP1_ReleaseReset\n
 442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1RSTR     CRCRST        LL_AHB1_GRP1_ReleaseReset\n
 443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1RSTR     TSCRST        LL_AHB1_GRP1_ReleaseReset
 444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
 449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
 455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock during Low Power (Sleep) mode.
 461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB1SMENR    DMA1SMEN      LL_AHB1_GRP1_EnableClockSleep\n
 462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1SMENR    DMA2SMEN      LL_AHB1_GRP1_EnableClockSleep\n
 463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1SMENR    DMAMUX1SMEN    LL_AHB1_GRP1_EnableClockSleep\n
 464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1SMENR    SRAM1SMEN     LL_AHB1_GRP1_EnableClockSleep\n
 465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1SMENR    CRCSMEN       LL_AHB1_GRP1_EnableClockSleep\n
 466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1SMENR    TSCSMEN       LL_AHB1_GRP1_EnableClockSleep
 467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
 471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM1
 472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClockSleep(uint32_t Periphs)
 478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   __IO uint32_t tmpreg;
 480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB1SMENR, Periphs);
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 23


 481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHB1SMENR, Periphs);
 483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock during Low Power (Sleep) mode.
 488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB1SMENR    DMA1SMEN      LL_AHB1_GRP1_DisableClockSleep\n
 489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1SMENR    DMA2SMEN      LL_AHB1_GRP1_DisableClockSleep\n
 490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1SMENR    DMAMUX1SMEN    LL_AHB1_GRP1_DisableClockSleep\n
 491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1SMENR    SRAM1SMEN     LL_AHB1_GRP1_DisableClockSleep\n
 492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1SMENR    CRCSMEN       LL_AHB1_GRP1_DisableClockSleep\n
 493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB1SMENR    TSCSMEN       LL_AHB1_GRP1_DisableClockSleep
 494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
 498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM1
 499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClockSleep(uint32_t Periphs)
 505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   CLEAR_BIT(RCC->AHB1SMENR, Periphs);
 507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EF_AHB2 AHB2
 514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Enable AHB2 peripherals clock.
 519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB2ENR      GPIOAEN       LL_AHB2_GRP1_EnableClock\n
 520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOBEN       LL_AHB2_GRP1_EnableClock\n
 521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOCEN       LL_AHB2_GRP1_EnableClock\n
 522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIODEN       LL_AHB2_GRP1_EnableClock\n
 523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOEEN       LL_AHB2_GRP1_EnableClock\n
 524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOHEN       LL_AHB2_GRP1_EnableClock\n
 525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      ADCEN         LL_AHB2_GRP1_EnableClock\n
 526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      AES1EN        LL_AHB2_GRP1_EnableClock
 527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOA
 529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOB
 530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
 531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOD (*)
 532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOE
 533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
 534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC (*)
 535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
 536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 24


 538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
  41              		.loc 2 539 22 view .LVU2
  42              	.LBB62:
 540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   __IO uint32_t tmpreg;
  43              		.loc 2 541 3 view .LVU3
 542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB2ENR, Periphs);
  44              		.loc 2 542 3 view .LVU4
  45 0002 4FF0B043 		mov	r3, #1476395008
  46 0006 DA6C     		ldr	r2, [r3, #76]
  47 0008 42F00402 		orr	r2, r2, #4
  48 000c DA64     		str	r2, [r3, #76]
 543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
  49              		.loc 2 544 3 view .LVU5
  50              		.loc 2 544 12 is_stmt 0 view .LVU6
  51 000e DA6C     		ldr	r2, [r3, #76]
  52 0010 02F00402 		and	r2, r2, #4
  53              		.loc 2 544 10 view .LVU7
  54 0014 0392     		str	r2, [sp, #12]
 545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
  55              		.loc 2 545 3 is_stmt 1 view .LVU8
  56 0016 039A     		ldr	r2, [sp, #12]
  57              	.LVL1:
  58              		.loc 2 545 3 is_stmt 0 view .LVU9
  59              	.LBE62:
  60              	.LBE61:
 736:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  61              		.loc 1 736 3 is_stmt 1 view .LVU10
  62              	.LBB63:
  63              	.LBI63:
 539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
  64              		.loc 2 539 22 view .LVU11
  65              	.LBB64:
 541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB2ENR, Periphs);
  66              		.loc 2 541 3 view .LVU12
 542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
  67              		.loc 2 542 3 view .LVU13
  68 0018 DA6C     		ldr	r2, [r3, #76]
  69 001a 42F00102 		orr	r2, r2, #1
  70 001e DA64     		str	r2, [r3, #76]
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
  71              		.loc 2 544 3 view .LVU14
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
  72              		.loc 2 544 12 is_stmt 0 view .LVU15
  73 0020 DA6C     		ldr	r2, [r3, #76]
  74 0022 02F00102 		and	r2, r2, #1
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
  75              		.loc 2 544 10 view .LVU16
  76 0026 0292     		str	r2, [sp, #8]
  77              		.loc 2 545 3 is_stmt 1 view .LVU17
  78 0028 029A     		ldr	r2, [sp, #8]
  79              	.LVL2:
  80              		.loc 2 545 3 is_stmt 0 view .LVU18
  81              	.LBE64:
  82              	.LBE63:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 25


 737:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  83              		.loc 1 737 3 is_stmt 1 view .LVU19
  84              	.LBB65:
  85              	.LBI65:
 539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
  86              		.loc 2 539 22 view .LVU20
  87              	.LBB66:
 541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB2ENR, Periphs);
  88              		.loc 2 541 3 view .LVU21
 542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
  89              		.loc 2 542 3 view .LVU22
  90 002a DA6C     		ldr	r2, [r3, #76]
  91 002c 42F00202 		orr	r2, r2, #2
  92 0030 DA64     		str	r2, [r3, #76]
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
  93              		.loc 2 544 3 view .LVU23
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
  94              		.loc 2 544 12 is_stmt 0 view .LVU24
  95 0032 DB6C     		ldr	r3, [r3, #76]
  96 0034 03F00203 		and	r3, r3, #2
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
  97              		.loc 2 544 10 view .LVU25
  98 0038 0193     		str	r3, [sp, #4]
  99              		.loc 2 545 3 is_stmt 1 view .LVU26
 100 003a 019B     		ldr	r3, [sp, #4]
 101              	.LVL3:
 102              		.loc 2 545 3 is_stmt 0 view .LVU27
 103              	.LBE66:
 104              	.LBE65:
 738:Core/Src/main.c **** 
 739:Core/Src/main.c **** }
 105              		.loc 1 739 1 view .LVU28
 106 003c 04B0     		add	sp, sp, #16
 107              	.LCFI1:
 108              		.cfi_def_cfa_offset 0
 109              		@ sp needed
 110 003e 7047     		bx	lr
 111              		.cfi_endproc
 112              	.LFE1836:
 114              		.section	.text.MX_DMA_Init,"ax",%progbits
 115              		.align	1
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 119              		.fpu fpv4-sp-d16
 121              	MX_DMA_Init:
 122              	.LFB1835:
 709:Core/Src/main.c **** 
 123              		.loc 1 709 1 is_stmt 1 view -0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 16
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127 0000 00B5     		push	{lr}
 128              	.LCFI2:
 129              		.cfi_def_cfa_offset 4
 130              		.cfi_offset 14, -4
 131 0002 85B0     		sub	sp, sp, #20
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 26


 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 24
 712:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 134              		.loc 1 712 3 view .LVU30
 135              	.LVL4:
 136              	.LBB67:
 137              	.LBI67:
 364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 138              		.loc 2 364 22 view .LVU31
 139              	.LBB68:
 366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB1ENR, Periphs);
 140              		.loc 2 366 3 view .LVU32
 367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 141              		.loc 2 367 3 view .LVU33
 142 0004 4FF0B043 		mov	r3, #1476395008
 143 0008 9A6C     		ldr	r2, [r3, #72]
 144 000a 42F00402 		orr	r2, r2, #4
 145 000e 9A64     		str	r2, [r3, #72]
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 146              		.loc 2 369 3 view .LVU34
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 147              		.loc 2 369 12 is_stmt 0 view .LVU35
 148 0010 9A6C     		ldr	r2, [r3, #72]
 149 0012 02F00402 		and	r2, r2, #4
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 150              		.loc 2 369 10 view .LVU36
 151 0016 0392     		str	r2, [sp, #12]
 370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 152              		.loc 2 370 3 is_stmt 1 view .LVU37
 153 0018 039A     		ldr	r2, [sp, #12]
 154              	.LVL5:
 370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 155              		.loc 2 370 3 is_stmt 0 view .LVU38
 156              	.LBE68:
 157              	.LBE67:
 713:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 158              		.loc 1 713 3 is_stmt 1 view .LVU39
 159              	.LBB69:
 160              	.LBI69:
 364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 161              		.loc 2 364 22 view .LVU40
 162              	.LBB70:
 366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB1ENR, Periphs);
 163              		.loc 2 366 3 view .LVU41
 367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 164              		.loc 2 367 3 view .LVU42
 165 001a 9A6C     		ldr	r2, [r3, #72]
 166 001c 42F00102 		orr	r2, r2, #1
 167 0020 9A64     		str	r2, [r3, #72]
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 168              		.loc 2 369 3 view .LVU43
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 169              		.loc 2 369 12 is_stmt 0 view .LVU44
 170 0022 9A6C     		ldr	r2, [r3, #72]
 171 0024 02F00102 		and	r2, r2, #1
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 172              		.loc 2 369 10 view .LVU45
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 27


 173 0028 0292     		str	r2, [sp, #8]
 370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 174              		.loc 2 370 3 is_stmt 1 view .LVU46
 175 002a 029A     		ldr	r2, [sp, #8]
 176              	.LVL6:
 370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 177              		.loc 2 370 3 is_stmt 0 view .LVU47
 178              	.LBE70:
 179              	.LBE69:
 714:Core/Src/main.c **** 
 180              		.loc 1 714 3 is_stmt 1 view .LVU48
 181              	.LBB71:
 182              	.LBI71:
 364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 183              		.loc 2 364 22 view .LVU49
 184              	.LBB72:
 366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB1ENR, Periphs);
 185              		.loc 2 366 3 view .LVU50
 367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 186              		.loc 2 367 3 view .LVU51
 187 002c 9A6C     		ldr	r2, [r3, #72]
 188 002e 42F00202 		orr	r2, r2, #2
 189 0032 9A64     		str	r2, [r3, #72]
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 190              		.loc 2 369 3 view .LVU52
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 191              		.loc 2 369 12 is_stmt 0 view .LVU53
 192 0034 9B6C     		ldr	r3, [r3, #72]
 193 0036 03F00203 		and	r3, r3, #2
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 194              		.loc 2 369 10 view .LVU54
 195 003a 0193     		str	r3, [sp, #4]
 370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 196              		.loc 2 370 3 is_stmt 1 view .LVU55
 197 003c 019B     		ldr	r3, [sp, #4]
 198              	.LVL7:
 370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 199              		.loc 2 370 3 is_stmt 0 view .LVU56
 200              	.LBE72:
 201              	.LBE71:
 718:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 202              		.loc 1 718 3 is_stmt 1 view .LVU57
 203 003e 0022     		movs	r2, #0
 204 0040 0F21     		movs	r1, #15
 205 0042 0E20     		movs	r0, #14
 206 0044 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 207              	.LVL8:
 719:Core/Src/main.c ****   /* DMA2_Channel4_IRQn interrupt configuration */
 208              		.loc 1 719 3 view .LVU58
 209 0048 0E20     		movs	r0, #14
 210 004a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 211              	.LVL9:
 721:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 212              		.loc 1 721 3 view .LVU59
 213 004e 0022     		movs	r2, #0
 214 0050 0F21     		movs	r1, #15
 215 0052 3A20     		movs	r0, #58
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 28


 216 0054 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 217              	.LVL10:
 722:Core/Src/main.c **** 
 218              		.loc 1 722 3 view .LVU60
 219 0058 3A20     		movs	r0, #58
 220 005a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 221              	.LVL11:
 724:Core/Src/main.c **** 
 222              		.loc 1 724 1 is_stmt 0 view .LVU61
 223 005e 05B0     		add	sp, sp, #20
 224              	.LCFI4:
 225              		.cfi_def_cfa_offset 4
 226              		@ sp needed
 227 0060 5DF804FB 		ldr	pc, [sp], #4
 228              		.cfi_endproc
 229              	.LFE1835:
 231              		.section	.text.HAL_TIM_IC_CaptureCallback,"ax",%progbits
 232              		.align	1
 233              		.global	HAL_TIM_IC_CaptureCallback
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	HAL_TIM_IC_CaptureCallback:
 240              	.LVL12:
 241              	.LFB1823:
 101:Core/Src/main.c ****   static uint32_t last = 0;
 242              		.loc 1 101 58 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              		@ link register save eliminated.
 102:Core/Src/main.c ****   uint32_t current;
 247              		.loc 1 102 3 view .LVU63
 103:Core/Src/main.c ****   current = htim->Instance->CCR1;
 248              		.loc 1 103 3 view .LVU64
 104:Core/Src/main.c ****   if (last <= current) {
 249              		.loc 1 104 3 view .LVU65
 104:Core/Src/main.c ****   if (last <= current) {
 250              		.loc 1 104 17 is_stmt 0 view .LVU66
 251 0000 0168     		ldr	r1, [r0]
 104:Core/Src/main.c ****   if (last <= current) {
 252              		.loc 1 104 11 view .LVU67
 253 0002 4B6B     		ldr	r3, [r1, #52]
 254              	.LVL13:
 105:Core/Src/main.c ****     period = current - last;
 255              		.loc 1 105 3 is_stmt 1 view .LVU68
 105:Core/Src/main.c ****     period = current - last;
 256              		.loc 1 105 12 is_stmt 0 view .LVU69
 257 0004 074A     		ldr	r2, .L8
 258 0006 1268     		ldr	r2, [r2]
 105:Core/Src/main.c ****     period = current - last;
 259              		.loc 1 105 6 view .LVU70
 260 0008 9A42     		cmp	r2, r3
 261 000a 05D8     		bhi	.L6
 106:Core/Src/main.c ****   }
 262              		.loc 1 106 5 is_stmt 1 view .LVU71
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 29


 106:Core/Src/main.c ****   }
 263              		.loc 1 106 22 is_stmt 0 view .LVU72
 264 000c 9A1A     		subs	r2, r3, r2
 106:Core/Src/main.c ****   }
 265              		.loc 1 106 12 view .LVU73
 266 000e 0649     		ldr	r1, .L8+4
 267 0010 0A60     		str	r2, [r1]
 268              	.L7:
 111:Core/Src/main.c ****   // printf("%ld\r\n", period);
 269              		.loc 1 111 3 is_stmt 1 view .LVU74
 111:Core/Src/main.c ****   // printf("%ld\r\n", period);
 270              		.loc 1 111 8 is_stmt 0 view .LVU75
 271 0012 044A     		ldr	r2, .L8
 272 0014 1360     		str	r3, [r2]
 113:Core/Src/main.c **** 
 273              		.loc 1 113 1 view .LVU76
 274 0016 7047     		bx	lr
 275              	.L6:
 109:Core/Src/main.c ****   }
 276              		.loc 1 109 5 is_stmt 1 view .LVU77
 109:Core/Src/main.c ****   }
 277              		.loc 1 109 28 is_stmt 0 view .LVU78
 278 0018 C96A     		ldr	r1, [r1, #44]
 109:Core/Src/main.c ****   }
 279              		.loc 1 109 34 view .LVU79
 280 001a 8A1A     		subs	r2, r1, r2
 109:Core/Src/main.c ****   }
 281              		.loc 1 109 41 view .LVU80
 282 001c 1A44     		add	r2, r2, r3
 109:Core/Src/main.c ****   }
 283              		.loc 1 109 12 view .LVU81
 284 001e 0249     		ldr	r1, .L8+4
 285 0020 0A60     		str	r2, [r1]
 286 0022 F6E7     		b	.L7
 287              	.L9:
 288              		.align	2
 289              	.L8:
 290 0024 00000000 		.word	.LANCHOR0
 291 0028 00000000 		.word	.LANCHOR1
 292              		.cfi_endproc
 293              	.LFE1823:
 295              		.section	.rodata.UART_CharReception_Callback.str1.4,"aMS",%progbits,1
 296              		.align	2
 297              	.LC0:
 298 0000 08200800 		.ascii	"\010 \010\000"
 299              		.section	.text.UART_CharReception_Callback,"ax",%progbits
 300              		.align	1
 301              		.global	UART_CharReception_Callback
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	UART_CharReception_Callback:
 308              	.LFB1837:
 740:Core/Src/main.c **** 
 741:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 742:Core/Src/main.c **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 30


 743:Core/Src/main.c **** /**
 744:Core/Src/main.c ****  *  Callback function handle reception of characters from uart
 745:Core/Src/main.c ****  *  Stores recived characters in command buffer
 746:Core/Src/main.c ****  **/
 747:Core/Src/main.c **** void UART_CharReception_Callback(void)
 748:Core/Src/main.c **** {
 309              		.loc 1 748 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313 0000 10B5     		push	{r4, lr}
 314              	.LCFI5:
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 4, -8
 317              		.cfi_offset 14, -4
 749:Core/Src/main.c ****   uint8_t ch;
 318              		.loc 1 749 3 view .LVU83
 750:Core/Src/main.c ****   ch = LL_USART_ReceiveData8(USART1); // Recieve input char RX
 319              		.loc 1 750 3 view .LVU84
 320              	.LVL14:
 321              	.LBB73:
 322              	.LBI73:
 323              		.file 3 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h"
   1:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
   2:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @file    stm32wbxx_ll_usart.h
   4:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @attention
   8:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *
   9:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * All rights reserved.
  11:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *
  12:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * in the root directory of this software component.
  14:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *
  16:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ******************************************************************************
  17:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  18:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  19:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #ifndef STM32WBxx_LL_USART_H
  21:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define STM32WBxx_LL_USART_H
  22:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  23:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #ifdef __cplusplus
  24:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** extern "C" {
  25:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #endif
  26:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  27:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #include "stm32wbxx.h"
  29:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  30:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @addtogroup STM32WBxx_LL_Driver
  31:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  32:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  33:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  34:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #if defined (USART1)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 31


  35:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  36:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL USART
  37:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  38:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  39:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  40:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Private_Variables USART Private Variables
  43:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  44:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  45:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Array used to get the USART prescaler division decimal values versus @ref USART_LL_EC_PRESCALER 
  46:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** static const uint16_t USART_PRESCALER_TAB[] =
  47:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
  48:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)1,
  49:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)2,
  50:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)4,
  51:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)6,
  52:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)8,
  53:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)10,
  54:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)12,
  55:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)16,
  56:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)32,
  57:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)64,
  58:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)128,
  59:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   (uint16_t)256
  60:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** };
  61:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
  62:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
  63:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  64:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  65:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  66:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  67:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  68:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  69:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
  70:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
  71:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  72:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  73:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  74:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  75:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  76:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  77:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  78:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
  79:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
  80:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  81:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  82:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  83:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  84:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  85:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  86:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
  87:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
  88:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  89:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
  90:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief LL USART Init Structure definition
  91:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 32


  92:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** typedef struct
  93:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
  94:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t PrescalerValue;            /*!< Specifies the Prescaler to compute the communication bau
  95:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PRESCA
  96:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
  97:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  98:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetPrescaler().*/
  99:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
 101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetBaudRate().*/
 104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
 106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
 107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetDataWidth().*/
 110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
 112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
 113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetStopBitsLength().*/
 116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetParity().*/
 122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetTransferDirection().*/
 128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetHWFlowCtrl().*/
 134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            function @ref LL_USART_SetOverSampling().*/
 140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** } LL_USART_InitTypeDef;
 142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** typedef struct
 147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 33


 149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            For more details, refer to description of this function.
 154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPolarity().
 160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            For more details, refer to description of this function.
 161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPhase().
 167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            For more details, refer to description of this function.
 168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            functions @ref LL_USART_SetLastClkPulseOutput().
 175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                            For more details, refer to description of this function.
 176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_CLEAR_FLAG Clear Flags Defines
 190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_WriteReg function
 191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_PECF                       USART_ICR_PECF                /*!< Parity error fla
 194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_FECF                       USART_ICR_FECF                /*!< Framing error fl
 195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_NECF                       USART_ICR_NECF                /*!< Noise error dete
 196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_ORECF                      USART_ICR_ORECF               /*!< Overrun error fl
 197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_IDLECF                     USART_ICR_IDLECF              /*!< Idle line detect
 198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_TXFECF                     USART_ICR_TXFECF              /*!< TX FIFO Empty Cl
 199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_TCCF                       USART_ICR_TCCF                /*!< Transmission com
 200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_TCBGTCF                    USART_ICR_TCBGTCF             /*!< Transmission com
 201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_LBDCF                      USART_ICR_LBDCF               /*!< LIN break detect
 202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_CTSCF                      USART_ICR_CTSCF               /*!< CTS flag */
 203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_RTOCF                      USART_ICR_RTOCF               /*!< Receiver timeout
 204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_EOBCF                      USART_ICR_EOBCF               /*!< End of block fla
 205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_UDRCF                      USART_ICR_UDRCF               /*!< SPI Slave Underr
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 34


 206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_CMCF                       USART_ICR_CMCF                /*!< Character match 
 207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ICR_WUCF                       USART_ICR_WUCF                /*!< Wakeup from Stop
 208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_PE                         USART_ISR_PE                  /*!< Parity error fla
 217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_FE                         USART_ISR_FE                  /*!< Framing error fl
 218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_NE                         USART_ISR_NE                  /*!< Noise detected f
 219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_ORE                        USART_ISR_ORE                 /*!< Overrun error fl
 220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_IDLE                       USART_ISR_IDLE                /*!< Idle line detect
 221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_RXNE_RXFNE                 USART_ISR_RXNE_RXFNE          /*!< Read data regist
 222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TC                         USART_ISR_TC                  /*!< Transmission com
 223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TXE_TXFNF                  USART_ISR_TXE_TXFNF           /*!< Transmit data re
 224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_LBDF                       USART_ISR_LBDF                /*!< LIN break detect
 225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_CTSIF                      USART_ISR_CTSIF               /*!< CTS interrupt fl
 226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_CTS                        USART_ISR_CTS                 /*!< CTS flag */
 227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_RTOF                       USART_ISR_RTOF                /*!< Receiver timeout
 228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_EOBF                       USART_ISR_EOBF                /*!< End of block fla
 229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_UDR                        USART_ISR_UDR                 /*!< SPI Slave underr
 230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_ABRE                       USART_ISR_ABRE                /*!< Auto baud rate e
 231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_ABRF                       USART_ISR_ABRF                /*!< Auto baud rate f
 232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_BUSY                       USART_ISR_BUSY                /*!< Busy flag */
 233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_CMF                        USART_ISR_CMF                 /*!< Character match 
 234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_SBKF                       USART_ISR_SBKF                /*!< Send break flag 
 235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_RWU                        USART_ISR_RWU                 /*!< Receiver wakeup 
 236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_WUF                        USART_ISR_WUF                 /*!< Wakeup from Stop
 237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TEACK                      USART_ISR_TEACK               /*!< Transmit enable 
 238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_REACK                      USART_ISR_REACK               /*!< Receive enable a
 239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TXFE                       USART_ISR_TXFE                /*!< TX FIFO empty fl
 240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_RXFF                       USART_ISR_RXFF                /*!< RX FIFO full fla
 241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TCBGT                      USART_ISR_TCBGT               /*!< Transmission com
 242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_RXFT                       USART_ISR_RXFT                /*!< RX FIFO threshol
 243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ISR_TXFT                       USART_ISR_TXFT                /*!< TX FIFO threshol
 244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_RXNEIE_RXFNEIE             USART_CR1_RXNEIE_RXFNEIE      /*!< Read data regist
 254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_TXEIE_TXFNFIE              USART_CR1_TXEIE_TXFNFIE       /*!< Transmit data re
 256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_CMIE                       USART_CR1_CMIE                /*!< Character match 
 258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_RTOIE                      USART_CR1_RTOIE               /*!< Receiver timeout
 259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_EOBIE                      USART_CR1_EOBIE               /*!< End of Block int
 260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_TXFEIE                     USART_CR1_TXFEIE              /*!< TX FIFO empty in
 261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR1_RXFFIE                     USART_CR1_RXFFIE              /*!< RX FIFO full int
 262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 35


 263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_WUFIE                      USART_CR3_WUFIE               /*!< Wakeup from Stop
 266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_TXFTIE                     USART_CR3_TXFTIE              /*!< TX FIFO threshol
 267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_TCBGTIE                    USART_CR3_TCBGTIE             /*!< Transmission com
 268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CR3_RXFTIE                     USART_CR3_RXFTIE              /*!< RX FIFO threshol
 269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_FIFOTHRESHOLD FIFO Threshold
 274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_8              0x00000000U /*!< FIFO reaches 1/8 of its depth */
 277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_4              0x00000001U /*!< FIFO reaches 1/4 of its depth */
 278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_2              0x00000002U /*!< FIFO reaches 1/2 of its depth */
 279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_3_4              0x00000003U /*!< FIFO reaches 3/4 of its depth */
 280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_7_8              0x00000004U /*!< FIFO reaches 7/8 of its depth */
 281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_8_8              0x00000005U /*!< FIFO becomes empty for TX and full
 282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DATAWIDTH_7B                   USART_CR1_M1            /*!< 7 bits word length : S
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 36


 320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M0            /*!< 9 bits word length : S
 322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_PRESCALER Clock Source Prescaler
 375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 37


 377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV1                 0x00000000U                                        
 378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV2                 (USART_PRESC_PRESCALER_0)                          
 379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV4                 (USART_PRESC_PRESCALER_1)                          
 380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV6                 (USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
 381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV8                 (USART_PRESC_PRESCALER_2)                          
 382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV10                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_0)
 383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV12                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1)
 384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV16                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1 
 385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV32                (USART_PRESC_PRESCALER_3)                          
 386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV64                (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_0)
 387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV128               (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1)
 388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_PRESCALER_DIV256               (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1 
 389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_TXRX TX RX Pins Swap
 405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_TXRX_STANDARD                  0x00000000U           /*!< TX/RX pins are used as d
 408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_TXRX_SWAPPED                   (USART_CR2_SWAP)      /*!< TX and RX pins functions
 409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_RXPIN_LEVEL RX Pin Active Level Inversion
 414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_STANDARD           0x00000000U           /*!< RX pin signal works usin
 417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_INVERTED           (USART_CR2_RXINV)     /*!< RX pin signal values are
 418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_TXPIN_LEVEL TX Pin Active Level Inversion
 423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_STANDARD           0x00000000U           /*!< TX pin signal works usin
 426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_INVERTED           (USART_CR2_TXINV)     /*!< TX pin signal values are
 427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_BINARY_LOGIC Binary Data Inversion
 432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 38


 434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_POSITIVE          0x00000000U           /*!< Logical data from the da
 435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_NEGATIVE          USART_CR2_DATAINV     /*!< Logical data from the da
 436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_BITORDER Bit Order
 441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_BITORDER_LSBFIRST              0x00000000U           /*!< data is transmitted/rece
 444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_BITORDER_MSBFIRST              USART_CR2_MSBFIRST    /*!< data is transmitted/rece
 445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_AUTOBAUD_DETECT_ON Autobaud Detection
 450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT    0x00000000U                                 /*!< Me
 453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0                         /*!< Fa
 454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME    USART_CR2_ABRMODE_1                         /*!< 0x
 455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME    (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0) /*!< 0x
 456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_ADDRESS_DETECT Address Length Detection
 461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_4B              0x00000000U           /*!< 4-bit address detection 
 464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_7B              USART_CR2_ADDM7       /*!< 7-bit address detection 
 465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP_ON Wakeup Activation
 481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WAKEUP_ON_ADDRESS              0x00000000U                             /*!< Wake u
 484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WAKEUP_ON_STARTBIT             USART_CR3_WUS_1                         /*!< Wake u
 485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WAKEUP_ON_RXNE                 (USART_CR3_WUS_0 | USART_CR3_WUS_1)     /*!< Wake u
 486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 39


 491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_DE_POLARITY Driver Enable Polarity
 509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DE_POLARITY_HIGH               0x00000000U           /*!< DE signal is active high
 512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DE_POLARITY_LOW                USART_CR3_DEP         /*!< DE signal is active low 
 513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EC_DMA_REG_DATA DMA Register Data
 518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_TRANSMIT          0x00000000U          /*!< Get address of data regis
 521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_RECEIVE           0x00000001U          /*!< Get address of data regis
 522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Write a value in USART register
 541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __REG__ Register to be written
 543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 40


 548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Read a value in USART register
 550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __REG__ Register to be read
 552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Register value
 553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __PRESCALER__ This parameter can be one of the following values:
 568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
 569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
 570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
 571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
 572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
 573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
 574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
 575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
 576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
 577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
 578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
 579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
 580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __PRESCALER__, __BAUDRATE__) (((((__PERIPHCLK__)/(u
 584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __PRESCALER__ This parameter can be one of the following values:
 590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
 591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
 592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
 593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
 594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
 595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
 596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
 597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
 598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
 599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
 600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
 601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
 602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 41


 605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __PRESCALER__, __BAUDRATE__) ((((__PERIPHCLK__)/(u
 606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
 613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
 623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  USART Enable
 627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         flags, in the USARTx_ISR are set to their default values.
 641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
 655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1U : 0U);
 659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 42


 662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  FIFO Mode Enable
 663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_EnableFIFO
 666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 669:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableFIFO(USART_TypeDef *USARTx)
 670:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 671:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 672:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 673:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 674:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 675:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  FIFO Mode Disable
 676:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 677:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 678:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
 679:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 680:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 681:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 682:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
 683:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 684:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 685:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 686:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 687:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 688:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if FIFO Mode is enabled
 689:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 690:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 691:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_IsEnabledFIFO
 692:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 693:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
 694:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 695:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledFIFO(USART_TypeDef *USARTx)
 696:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 697:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_FIFOEN) == (USART_CR1_FIFOEN)) ? 1U : 0U);
 698:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 699:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 700:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 701:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure TX FIFO Threshold
 702:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 703:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 704:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_SetTXFIFOThreshold
 705:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 706:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Threshold This parameter can be one of the following values:
 707:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 708:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 709:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 710:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 711:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 712:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 713:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 714:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 715:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
 716:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 717:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 718:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 43


 719:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 720:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 721:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return TX FIFO Threshold Configuration
 722:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 723:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 724:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_GetTXFIFOThreshold
 725:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 726:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 727:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 728:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 729:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 730:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 731:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 732:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 733:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 734:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXFIFOThreshold(USART_TypeDef *USARTx)
 735:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 736:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 737:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 738:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 739:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 740:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure RX FIFO Threshold
 741:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 742:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 743:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RXFTCFG       LL_USART_SetRXFIFOThreshold
 744:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 745:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Threshold This parameter can be one of the following values:
 746:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 747:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 748:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 749:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 750:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 751:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 752:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 753:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 754:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
 755:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 756:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 757:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 758:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 759:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 760:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return RX FIFO Threshold Configuration
 761:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 762:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 763:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RXFTCFG       LL_USART_GetRXFIFOThreshold
 764:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 765:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 766:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 767:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 768:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 769:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 770:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 771:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 772:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 773:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXFIFOThreshold(USART_TypeDef *USARTx)
 774:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 775:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 44


 776:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 777:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 778:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 779:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure TX and RX FIFOs Threshold
 780:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 781:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 782:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_ConfigFIFOsThreshold\n
 783:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          RXFTCFG       LL_USART_ConfigFIFOsThreshold
 784:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 785:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  TXThreshold This parameter can be one of the following values:
 786:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 787:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 788:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 789:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 790:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 791:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 792:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  RXThreshold This parameter can be one of the following values:
 793:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 794:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 795:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 796:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 797:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 798:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 799:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 800:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 801:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigFIFOsThreshold(USART_TypeDef *USARTx, uint32_t TXThreshold, uin
 802:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 803:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG | USART_CR3_RXFTCFG,
 804:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                     (TXThreshold << USART_CR3_TXFTCFG_Pos) | (RXThreshold << USART_CR3_RXFTCFG_Pos)
 805:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 806:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 807:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 808:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  USART enabled in STOP Mode.
 809:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   When this function is enabled, USART is able to wake up the MCU from Stop mode, provide
 810:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         USART clock selection is HSI or LSE in RCC.
 811:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 812:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 813:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_EnableInStopMode
 814:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 815:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 816:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 817:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
 818:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 819:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_UESM);
 820:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 821:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 822:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 823:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  USART disabled in STOP Mode.
 824:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   When this function is disabled, USART is not able to wake up the MCU from Stop mode
 825:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 826:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 827:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_DisableInStopMode
 828:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 829:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 830:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 831:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
 832:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 45


 833:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 834:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 835:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 836:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 837:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if USART is enabled in STOP Mode (able to wake up MCU from Stop mode or not)
 838:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 839:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 840:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_IsEnabledInStopMode
 841:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 842:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
 843:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 844:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledInStopMode(USART_TypeDef *USARTx)
 845:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 846:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UESM) == (USART_CR1_UESM)) ? 1U : 0U);
 847:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 848:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 849:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 850:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 851:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 852:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 853:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 854:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 855:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 856:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 857:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 858:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 859:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 860:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 861:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Receiver Disable
 862:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 863:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 864:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 865:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 866:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 867:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 868:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 869:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 870:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 871:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 872:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Transmitter Enable
 873:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 874:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 875:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 876:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 877:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 878:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 879:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 880:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 881:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 882:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 883:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Transmitter Disable
 884:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 885:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 886:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 887:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 888:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 889:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 46


 890:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 891:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 892:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 893:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 894:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 895:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         of Transmitter and Receiver
 896:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 897:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 898:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 899:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 900:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 901:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 902:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 903:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 904:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 905:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 906:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 907:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 908:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 909:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 910:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 911:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 912:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 913:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 914:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 915:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 916:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 917:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 918:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 919:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 920:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 921:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 922:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 923:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 924:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 925:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 926:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 927:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 928:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 929:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 930:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 931:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 932:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 933:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 934:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 935:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 936:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 937:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 938:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 939:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 941:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 943:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 944:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 945:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 946:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 47


 947:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 948:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 949:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 950:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 951:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 952:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 953:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 954:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 955:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 956:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 957:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 958:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 959:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 960:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 961:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 962:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 963:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 964:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 965:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 966:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 967:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 968:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 969:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 970:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 971:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 972:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 973:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 974:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 975:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 976:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 977:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 978:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 979:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 980:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 981:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 982:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 983:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 984:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 985:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 986:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 987:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
 988:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
 989:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 990:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_SetDataWidth\n
 991:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          M1            LL_USART_SetDataWidth
 992:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
 993:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 994:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
 995:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 996:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 997:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
 998:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
 999:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
1000:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1001:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
1002:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1003:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 48


1004:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1005:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
1006:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_GetDataWidth\n
1007:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          M1            LL_USART_GetDataWidth
1008:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1009:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1010:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1011:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1012:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1013:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1014:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
1015:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1016:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
1017:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1018:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1019:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1020:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Allow switch between Mute Mode and Active mode
1021:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_EnableMuteMode
1022:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1023:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1024:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1025:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
1026:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1027:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_MME);
1028:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1029:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1030:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1031:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Prevent Mute Mode use. Set Receiver in active mode permanently.
1032:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_DisableMuteMode
1033:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1034:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1035:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1036:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
1037:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1038:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_MME);
1039:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1040:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1041:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1042:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if switch between Mute Mode and Active mode is allowed
1043:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_IsEnabledMuteMode
1044:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1045:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1046:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1047:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledMuteMode(USART_TypeDef *USARTx)
1048:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1049:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_MME) == (USART_CR1_MME)) ? 1U : 0U);
1050:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1051:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1052:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1053:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
1054:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
1055:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1056:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1057:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1058:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1059:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1060:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 49


1061:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
1062:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1063:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
1064:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1065:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1066:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1067:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Oversampling mode
1068:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
1069:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1070:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1071:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1072:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1073:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1074:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
1075:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1076:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
1077:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1078:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1079:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1080:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
1081:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1082:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1083:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
1084:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1085:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
1086:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1087:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1088:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1089:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1090:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
1091:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1092:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
1093:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1094:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1095:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1096:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
1097:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
1098:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1099:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
1101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
1107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
1109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
1113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
1116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 50


1118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
1123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
1125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
1129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
1132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
1138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
1140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
1144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
1147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
1149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
1154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
1156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
1160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
1163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
1169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
1171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 51


1175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
1179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
1180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
1181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
1182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
1183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
1184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
1186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
1189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
1192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
1197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
1199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure Clock source prescaler for baudrate generator and oversampling
1203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
1204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
1205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll PRESC        PRESCALER     LL_USART_SetPrescaler
1206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
1225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve the Clock source prescaler for baudrate generator and oversampling
1229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
1230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
1231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll PRESC        PRESCALER     LL_USART_GetPrescaler
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 52


1232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetPrescaler(USART_TypeDef *USARTx)
1248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->PRESC, USART_PRESC_PRESCALER));
1250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
1254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
1257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
1261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
1267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
1270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
1274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
1276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
1280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
1283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
1287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN)) ? 1U : 0U);
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 53


1289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set the length of the stop bits
1293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
1294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
1303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
1309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
1310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
1318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
1320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
1324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
1326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
1327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
1328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
1329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
1330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          M0            LL_USART_ConfigCharacter\n
1331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR1          M1            LL_USART_ConfigCharacter\n
1332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
1333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 54


1346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
1350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                               uint32_t StopBits)
1351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
1353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure TX/RX pins swapping setting.
1358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_SetTXRXSwap
1359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  SwapConfig This parameter can be one of the following values:
1361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
1366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
1368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve TX/RX pins swapping configuration.
1372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_GetTXRXSwap
1373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXRXSwap(USART_TypeDef *USARTx)
1379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_SWAP));
1381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure RX pin active level logic
1385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_SetRXPinLevel
1386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
1395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve RX pin active level logic configuration
1399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_GetRXPinLevel
1400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 55


1403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXPinLevel(USART_TypeDef *USARTx)
1406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_RXINV));
1408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure TX pin active level logic
1412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_SetTXPinLevel
1413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
1422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve TX pin active level logic configuration
1426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_GetTXPinLevel
1427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXPinLevel(USART_TypeDef *USARTx)
1433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_TXINV));
1435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure Binary data logic.
1439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Allow to define how Logical data from the data register are send/received :
1440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         either in positive/direct logic (1=H, 0=L) or in negative/inverse logic (1=L, 0=H)
1441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_SetBinaryDataLogic
1442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  DataLogic This parameter can be one of the following values:
1444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
1449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_DATAINV, DataLogic);
1451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve Binary data configuration
1455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_GetBinaryDataLogic
1456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 56


1460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBinaryDataLogic(USART_TypeDef *USARTx)
1462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_DATAINV));
1464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure transfer bit order (either Less or Most Significant Bit First)
1468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_SetTransferBitOrder
1471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  BitOrder This parameter can be one of the following values:
1473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
1478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_MSBFIRST, BitOrder);
1480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return transfer bit order (either Less or Most Significant Bit First)
1484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_GetTransferBitOrder
1487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferBitOrder(USART_TypeDef *USARTx)
1493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_MSBFIRST));
1495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Auto Baud-Rate Detection
1499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
1502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
1506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_ABREN);
1508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Auto Baud-Rate Detection
1512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_DisableAutoBaudRate
1515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 57


1517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
1519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_ABREN);
1521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Auto Baud-Rate Detection mechanism is enabled
1525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_IsEnabledAutoBaud
1528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledAutoBaud(USART_TypeDef *USARTx)
1532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_ABREN) == (USART_CR2_ABREN)) ? 1U : 0U);
1534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Auto Baud-Rate mode bits
1538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_SetAutoBaudRateMode
1541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  AutoBaudRateMode This parameter can be one of the following values:
1543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
1550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
1552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Auto Baud-Rate mode
1556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_GetAutoBaudRateMode
1559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetAutoBaudRateMode(USART_TypeDef *USARTx)
1567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ABRMODE));
1569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Receiver Timeout
1573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 58


1574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
1578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
1580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Receiver Timeout
1584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_DisableRxTimeout
1585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
1589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_RTOEN);
1591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Receiver Timeout feature is enabled
1595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_IsEnabledRxTimeout
1596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledRxTimeout(USART_TypeDef *USARTx)
1600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_RTOEN) == (USART_CR2_RTOEN)) ? 1U : 0U);
1602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Address of the USART node.
1606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
1607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         for wake up with address mark detection.
1608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   4bits address node is used when 4-bit Address Detection is selected in ADDM7.
1609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (b7-b4 should be set to 0)
1610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         8bits address node is used when 7-bit Address Detection is selected in ADDM7.
1611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (This is used in multiprocessor communication during Mute mode or Stop mode,
1612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         for wake up with 7-bit address mark detection.
1613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         The MSB of the character sent by the transmitter should be equal to 1.
1614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         It may also be used for character detection during normal reception,
1615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Mute mode inactive (for example, end of block detection in ModBus protocol).
1616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         In this case, the whole received character (8-bit) is compared to the ADD[7:0]
1617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         value and CMF flag is set on match)
1618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_ConfigNodeAddress\n
1619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          ADDM7         LL_USART_ConfigNodeAddress
1620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  AddressLen This parameter can be one of the following values:
1622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  NodeAddress 4 or 7 bit Address of the USART node.
1625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_
1628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
1630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****              (uint32_t)(AddressLen | (NodeAddress << USART_CR2_ADD_Pos)));
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 59


1631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return 8 bit Address of the USART node as set in ADD field of CR2.
1635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   If 4-bit Address Detection is selected in ADDM7,
1636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
1637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         If 7-bit Address Detection is selected in ADDM7,
1638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         only 8bits (b7-b0) of returned value are relevant (b31-b8 are not relevant)
1639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
1640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
1642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
1644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD) >> USART_CR2_ADD_Pos);
1646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Length of Node Address used in Address Detection mode (7-bit or 4-bit)
1650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          ADDM7         LL_USART_GetNodeAddressLen
1651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddressLen(USART_TypeDef *USARTx)
1657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADDM7));
1659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
1663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
1666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1669:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1670:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1671:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
1672:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1673:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1674:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1675:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
1676:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1677:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1678:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
1679:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1680:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1681:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1682:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1683:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1684:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
1685:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1686:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1687:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 60


1688:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
1689:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1690:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1691:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
1692:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1693:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1694:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1695:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1696:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1697:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
1698:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1699:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1700:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1701:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
1702:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1703:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1704:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
1705:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1706:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1707:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1708:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1709:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1710:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
1711:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1712:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1713:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1714:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
1715:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1716:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1717:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
1718:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
1719:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1720:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
1721:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1722:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1723:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1724:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1725:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1726:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1727:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
1728:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1729:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
1730:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1731:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1732:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1733:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
1734:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1735:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1736:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
1737:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
1738:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1739:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1740:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1741:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1742:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1743:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1744:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 61


1745:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
1746:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1747:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
1748:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1749:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1750:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1751:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable One bit sampling method
1752:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
1753:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1754:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1755:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1756:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1757:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1758:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1759:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1760:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1761:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1762:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable One bit sampling method
1763:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1764:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1765:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1766:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1767:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1768:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1769:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1770:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1771:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1772:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1773:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1774:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1775:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1776:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1777:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1778:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1779:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1780:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT)) ? 1U : 0U);
1781:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1782:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1783:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1784:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Overrun detection
1785:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_EnableOverrunDetect
1786:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1787:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1788:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1789:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
1790:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1791:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1792:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1793:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1794:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1795:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Overrun detection
1796:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
1797:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1798:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1799:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1800:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
1801:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 62


1802:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1803:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1804:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1805:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1806:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Overrun detection is enabled
1807:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_IsEnabledOverrunDetect
1808:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1809:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
1810:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1811:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOverrunDetect(USART_TypeDef *USARTx)
1812:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1813:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_OVRDIS) != USART_CR3_OVRDIS) ? 1U : 0U);
1814:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1815:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1816:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1817:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Select event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1818:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1819:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1820:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_SetWKUPType
1821:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1822:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Type This parameter can be one of the following values:
1823:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1824:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1825:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1826:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1827:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1828:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
1829:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1830:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_WUS, Type);
1831:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1832:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1833:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1834:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1835:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1836:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1837:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_GetWKUPType
1838:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1839:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1840:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1841:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1842:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1843:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1844:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWKUPType(USART_TypeDef *USARTx)
1845:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1846:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
1847:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1848:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1849:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1850:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1851:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1852:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1853:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1854:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (Baud rate value != 0)
1855:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1856:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1857:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1858:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 63


1859:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1860:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1861:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1862:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1863:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1864:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1865:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1866:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1867:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1868:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1869:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1870:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1871:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1872:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1873:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1874:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1875:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  BaudRate Baud Rate
1876:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1877:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1878:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Presc
1879:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****                                           uint32_t BaudRate)
1880:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1881:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t usartdiv;
1882:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t brrtemp;
1883:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1884:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1885:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
1886:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
1887:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     brrtemp = usartdiv & 0xFFF0U;
1888:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1889:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     USARTx->BRR = brrtemp;
1890:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
1891:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   else
1892:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
1893:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRat
1894:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
1895:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1896:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1897:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1898:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1899:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1900:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1901:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1902:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1903:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1904:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1905:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1906:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1907:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1908:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1909:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1910:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1911:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1912:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1913:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1914:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1915:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 64


1916:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1917:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1918:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1919:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1920:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1921:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Baud Rate
1922:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1923:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t P
1924:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1925:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t usartdiv;
1926:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t brrresult = 0x0U;
1927:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t periphclkpresc = (uint32_t)(PeriphClk / (uint32_t)(USART_PRESCALER_TAB[(uint16_t)Prescal
1928:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1929:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   usartdiv = USARTx->BRR;
1930:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1931:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   if(usartdiv == 0U)
1932:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
1933:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     /* Do not perform a division by 0 */
1934:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
1935:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   else if (OverSampling == LL_USART_OVERSAMPLING_8)
1936:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
1937:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1938:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     if(usartdiv != 0U)
1939:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     {
1940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****       brrresult = (periphclkpresc * 2U) / usartdiv;
1941:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     }
1942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
1943:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   else
1944:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
1945:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1946:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     {
1947:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****       brrresult = periphclkpresc / usartdiv;
1948:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     }
1949:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
1950:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (brrresult);
1951:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1952:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1953:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1954:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Receiver Time Out Value (expressed in nb of bits duration)
1955:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_SetRxTimeout
1956:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1957:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1958:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1959:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1960:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
1961:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1962:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
1963:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1964:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1965:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1966:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Get Receiver Time Out Value (expressed in nb of bits duration)
1967:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_GetRxTimeout
1968:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1969:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1970:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1971:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRxTimeout(USART_TypeDef *USARTx)
1972:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 65


1973:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_RTO));
1974:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1975:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1976:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1977:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Block Length value in reception
1978:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_SetBlockLength
1979:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1980:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  BlockLength Value between Min_Data=0x00 and Max_Data=0xFF
1981:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
1982:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1983:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
1984:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1985:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_BLEN, BlockLength << USART_RTOR_BLEN_Pos);
1986:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1987:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1988:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
1989:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Get Block Length value in reception
1990:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_GetBlockLength
1991:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
1992:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
1993:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
1994:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBlockLength(USART_TypeDef *USARTx)
1995:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
1996:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_BLEN) >> USART_RTOR_BLEN_Pos);
1997:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
1998:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
1999:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2000:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2001:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2002:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2003:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
2004:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2005:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2006:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2007:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2008:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable IrDA mode
2009:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2010:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2011:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
2012:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2013:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2014:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2015:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
2016:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2017:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2018:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2019:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2020:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2021:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable IrDA mode
2022:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2023:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2024:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
2025:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2026:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2027:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2028:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
2029:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 66


2030:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
2031:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2032:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2033:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2034:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
2035:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2036:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2037:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
2038:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2039:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2040:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2041:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
2042:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2043:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN)) ? 1U : 0U);
2044:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2045:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2046:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2047:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
2048:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2049:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2050:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
2051:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2052:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
2053:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
2054:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
2055:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2056:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2057:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
2058:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2059:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
2060:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2061:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2062:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2063:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
2064:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2065:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2066:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
2067:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2068:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2069:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
2070:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
2071:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2072:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
2073:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2074:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
2075:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2076:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2077:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2078:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
2079:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
2080:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2081:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2082:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
2083:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2084:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
2085:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2086:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 67


2087:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
2088:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2089:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, (uint16_t)PrescalerValue);
2090:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2091:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2092:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2093:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
2094:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
2095:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2096:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2097:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
2098:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2099:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
2100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
2102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
2104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
2111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
2116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
2119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
2123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
2125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
2129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
2132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
2136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
2138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
2142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 68


2144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
2145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
2149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK)) ? 1U : 0U);
2151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Smartcard mode
2155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
2158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
2162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Smartcard mode
2168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
2171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
2175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
2177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
2181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
2184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
2188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN)) ? 1U : 0U);
2190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
2194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   This bit-field specifies the number of retries in transmit and receive, in Smartcard mo
2197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         In transmission mode, it specifies the number of automatic retransmission retries, befo
2198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         generating a transmission error (FE bit set).
2199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         In reception mode, it specifies the number or erroneous reception trials, before genera
2200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         reception error (RXNE and PE bits set)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 69


2201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_SetSmartcardAutoRetryCount
2202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  AutoRetryCount Value between Min_Data=0 and Max_Data=7
2204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryC
2207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_SCARCNT, AutoRetryCount << USART_CR3_SCARCNT_Pos);
2209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
2213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_GetSmartcardAutoRetryCount
2216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Smartcard Auto-Retry Count value (Value between Min_Data=0 and Max_Data=7)
2218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardAutoRetryCount(USART_TypeDef *USARTx)
2220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_SCARCNT) >> USART_CR3_SCARCNT_Pos);
2222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
2226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
2227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
2230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
2232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
2235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, (uint16_t)PrescalerValue);
2237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
2241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
2242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
2245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
2247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
2249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
2251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
2255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
2256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 70


2258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
2259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
2261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
2264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_GTPR_GT_Pos);
2266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
2270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
2271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
2274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
2276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
2278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_GTPR_GT_Pos);
2280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
2287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
2292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
2295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
2299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
2305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
2308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
2312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 71


2315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
2318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
2321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
2325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL)) ? 1U : 0U);
2327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_SPI_SLAVE Configuration functions related to SPI Slave feat
2334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable SPI Synchronous Slave mode
2338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_EnableSPISlave
2341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSPISlave(USART_TypeDef *USARTx)
2345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_SLVEN);
2347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable SPI Synchronous Slave mode
2351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_DisableSPISlave
2354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSPISlave(USART_TypeDef *USARTx)
2358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_SLVEN);
2360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if  SPI Synchronous Slave mode is enabled
2364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_IsEnabledSPISlave
2367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSPISlave(USART_TypeDef *USARTx)
2371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 72


2372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_SLVEN) == (USART_CR2_SLVEN)) ? 1U : 0U);
2373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable SPI Slave Selection using NSS input pin
2377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   SPI Slave Selection depends on NSS input pin
2380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (The slave is selected when NSS is low and deselected when NSS is high).
2381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_EnableSPISlaveSelect
2382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSPISlaveSelect(USART_TypeDef *USARTx)
2386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_DIS_NSS);
2388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable SPI Slave Selection using NSS input pin
2392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   SPI Slave will be always selected and NSS input pin will be ignored.
2395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_DisableSPISlaveSelect
2396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSPISlaveSelect(USART_TypeDef *USARTx)
2400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_DIS_NSS);
2402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if  SPI Slave Selection depends on NSS input pin
2406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_IsEnabledSPISlaveSelect
2409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSPISlaveSelect(USART_TypeDef *USARTx)
2413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_DIS_NSS) != (USART_CR2_DIS_NSS)) ? 1U : 0U);
2415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
2422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
2427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 73


2429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
2430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
2432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
2437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
2439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
2443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
2446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
2452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
2454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable LIN mode
2458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
2461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
2465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable LIN mode
2471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
2474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
2478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
2480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
2484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 74


2486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
2487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
2491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN)) ? 1U : 0U);
2493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_DE Configuration functions related to Driver Enable feature
2500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set DEDT (Driver Enable De-Assertion Time), Time value expressed on 5 bits ([4:0] bits)
2505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_SetDEDeassertionTime
2508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
2513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
2515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return DEDT (Driver Enable De-Assertion Time)
2519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_GetDEDeassertionTime
2522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEDeassertionTime(USART_TypeDef *USARTx)
2526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEDT) >> USART_CR1_DEDT_Pos);
2528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Set DEAT (Driver Enable Assertion Time), Time value expressed on 5 bits ([4:0] bits).
2532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_SetDEAssertionTime
2535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
2540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
2542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 75


2543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return DEAT (Driver Enable Assertion Time)
2546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_GetDEAssertionTime
2549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEAssertionTime(USART_TypeDef *USARTx)
2553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEAT) >> USART_CR1_DEAT_Pos);
2555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Driver Enable (DE) Mode
2559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_EnableDEMode
2562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
2566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DEM);
2568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Driver Enable (DE) Mode
2572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_DisableDEMode
2575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
2579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
2581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if Driver Enable (DE) Mode is enabled
2585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_IsEnabledDEMode
2588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(USART_TypeDef *USARTx)
2592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1U : 0U);
2594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Select Driver Enable Polarity
2598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 76


2600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_SetDESignalPolarity
2601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
2603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
2608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
2610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Return Driver Enable Polarity
2614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_GetDESignalPolarity
2617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDESignalPolarity(USART_TypeDef *USARTx)
2623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_DEP));
2625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
2632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
2637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
2638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
2650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
2653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
2654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
2655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
2656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 77


2657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
2661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
2663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
2664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2669:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2670:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
2671:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
2672:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2673:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2674:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2675:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2676:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
2677:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
2678:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
2679:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2680:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2681:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2682:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2683:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2684:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2685:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
2686:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
2687:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2688:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
2689:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
2690:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
2691:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
2692:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
2693:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2694:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2695:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2696:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
2697:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2698:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
2699:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2700:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2701:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2702:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2703:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
2704:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
2705:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2706:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2707:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2708:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
2709:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
2710:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2711:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2712:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2713:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 78


2714:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
2715:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2716:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2717:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2718:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2719:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2720:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2721:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2722:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2723:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
2724:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
2725:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
2726:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2727:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
2728:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
2729:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
2730:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
2731:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
2732:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
2733:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2734:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2735:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2736:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
2737:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2738:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
2739:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
2740:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2741:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
2742:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
2743:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
2744:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2745:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2746:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2747:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2748:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
2749:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
2750:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2751:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2752:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2753:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2754:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
2755:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2756:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2757:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2758:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2759:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2760:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2761:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2762:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
2763:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
2764:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2765:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2766:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
2767:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
2768:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
2769:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
2770:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 79


2771:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2772:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2773:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2774:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
2775:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2776:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
2777:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2778:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
2779:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2780:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
2781:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
2782:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2783:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2784:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2785:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2786:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
2787:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
2788:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2789:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2790:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2791:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
2792:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
2793:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
2794:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2795:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2796:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2797:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2798:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2799:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2800:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2801:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2802:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
2803:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
2804:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2805:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2806:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
2807:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
2808:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
2809:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
2810:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
2811:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2812:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2813:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2814:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
2815:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2816:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
2817:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2818:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
2819:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2820:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2821:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
2822:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* Synchronous mode is activated by default */
2823:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
2824:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
2825:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2826:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2827:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 80


2828:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2829:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
2830:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
2831:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2832:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2833:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2834:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2835:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
2836:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2837:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2838:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2839:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2840:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2841:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2842:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2843:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2844:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
2845:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
2846:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
2847:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2848:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
2849:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
2850:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
2851:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
2852:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
2853:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
2854:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2855:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2856:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2857:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
2858:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2859:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
2860:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
2861:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
2862:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
2863:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2864:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
2865:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2866:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2867:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2868:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2869:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
2870:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
2871:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
2872:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
2873:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2874:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2875:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2876:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2877:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2878:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2879:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2880:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2881:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2882:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2883:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2884:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 81


2885:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
2886:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         dedicated functions
2887:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
2888:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
2889:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
2890:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
2891:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
2892:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2893:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
2894:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2895:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
2896:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2897:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
2898:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2899:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2900:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2901:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2902:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2903:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2904:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2905:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
2906:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2907:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2908:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
2909:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
2910:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2911:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2912:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2913:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
2914:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
2915:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2916:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2917:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2918:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
2919:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2920:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1U : 0U);
2921:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2922:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2923:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2924:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
2925:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
2926:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2927:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2928:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2929:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
2930:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2931:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1U : 0U);
2932:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2933:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2934:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2935:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
2936:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
2937:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2938:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2939:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
2941:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 82


2942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1U : 0U);
2943:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2944:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2945:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2946:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
2947:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
2948:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2949:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2950:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2951:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
2952:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2953:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1U : 0U);
2954:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2955:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2956:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2957:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
2958:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
2959:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2960:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2961:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2962:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
2963:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2964:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1U : 0U);
2965:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2966:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2967:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
2968:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IsActiveFlag_RXNE  LL_USART_IsActiveFlag_RXNE_RXFNE
2969:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2970:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2971:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Read Data Register or USART RX FIFO Not Empty Flag is set or not
2972:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
2973:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
2974:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
2975:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2976:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2977:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2978:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
2979:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2980:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1U : 0U);
2981:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2982:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2983:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2984:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
2985:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
2986:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
2987:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
2988:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
2989:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
2990:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
2991:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1U : 0U);
2992:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
2993:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2994:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
2995:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IsActiveFlag_TXE  LL_USART_IsActiveFlag_TXE_TXFNF
2996:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
2997:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
2998:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty or USART TX FIFO Not Full Flag is set o
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 83


2999:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3000:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3001:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
3002:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3003:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3004:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3005:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
3006:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3007:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1U : 0U);
3008:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3009:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3010:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3011:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
3012:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3013:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3014:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          LBDF          LL_USART_IsActiveFlag_LBD
3015:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3016:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3017:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3018:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
3019:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3020:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1U : 0U);
3021:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3022:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3023:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3024:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART CTS interrupt Flag is set or not
3025:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3026:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3027:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          CTSIF         LL_USART_IsActiveFlag_nCTS
3028:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3029:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3030:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3031:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
3032:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3033:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTSIF) == (USART_ISR_CTSIF)) ? 1U : 0U);
3034:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3035:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3036:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3037:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
3038:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3039:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3040:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          CTS           LL_USART_IsActiveFlag_CTS
3041:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3042:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3043:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3044:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CTS(USART_TypeDef *USARTx)
3045:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3046:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1U : 0U);
3047:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3048:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3049:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3050:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Receiver Time Out Flag is set or not
3051:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
3052:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3053:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3054:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3055:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(USART_TypeDef *USARTx)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 84


3056:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3057:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF)) ? 1U : 0U);
3058:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3059:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3060:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3061:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART End Of Block Flag is set or not
3062:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3063:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3064:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          EOBF          LL_USART_IsActiveFlag_EOB
3065:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3066:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3067:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3068:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_EOB(USART_TypeDef *USARTx)
3069:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3070:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_EOBF) == (USART_ISR_EOBF)) ? 1U : 0U);
3071:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3072:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3073:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3074:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the SPI Slave Underrun error flag is set or not
3075:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
3076:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
3077:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          UDR           LL_USART_IsActiveFlag_UDR
3078:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3079:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3080:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3081:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_UDR(USART_TypeDef *USARTx)
3082:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3083:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_UDR) == (USART_ISR_UDR)) ? 1U : 0U);
3084:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3085:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3086:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3087:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Error Flag is set or not
3088:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
3089:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
3090:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          ABRE          LL_USART_IsActiveFlag_ABRE
3091:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3092:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3093:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3094:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABRE(USART_TypeDef *USARTx)
3095:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3096:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRE) == (USART_ISR_ABRE)) ? 1U : 0U);
3097:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3098:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3099:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Flag is set or not
3101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
3102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
3103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          ABRF          LL_USART_IsActiveFlag_ABR
3104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABR(USART_TypeDef *USARTx)
3108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRF) == (USART_ISR_ABRF)) ? 1U : 0U);
3110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 85


3113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Busy Flag is set or not
3114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          BUSY          LL_USART_IsActiveFlag_BUSY
3115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_BUSY(USART_TypeDef *USARTx)
3119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1U : 0U);
3121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Character Match Flag is set or not
3125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          CMF           LL_USART_IsActiveFlag_CM
3126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CM(USART_TypeDef *USARTx)
3130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CMF) == (USART_ISR_CMF)) ? 1U : 0U);
3132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
3136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          SBKF          LL_USART_IsActiveFlag_SBK
3137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
3141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_SBKF) == (USART_ISR_SBKF)) ? 1U : 0U);
3143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
3147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          RWU           LL_USART_IsActiveFlag_RWU
3148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
3152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RWU) == (USART_ISR_RWU)) ? 1U : 0U);
3154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Wake Up from stop mode Flag is set or not
3158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          WUF           LL_USART_IsActiveFlag_WKUP
3161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_WKUP(USART_TypeDef *USARTx)
3165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF)) ? 1U : 0U);
3167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 86


3170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Transmit Enable Acknowledge Flag is set or not
3171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
3172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
3176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1U : 0U);
3178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Receive Enable Acknowledge Flag is set or not
3182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
3183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
3187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1U : 0U);
3189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Empty Flag is set or not
3193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TXFE          LL_USART_IsActiveFlag_TXFE
3196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXFE(USART_TypeDef *USARTx)
3200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXFE) == (USART_ISR_TXFE)) ? 1U : 0U);
3202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Full Flag is set or not
3206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          RXFF          LL_USART_IsActiveFlag_RXFF
3209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXFF(USART_TypeDef *USARTx)
3213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXFF) == (USART_ISR_RXFF)) ? 1U : 0U);
3215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the Smartcard Transmission Complete Before Guard Time Flag is set or not
3219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TCBGT         LL_USART_IsActiveFlag_TCBGT
3220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TCBGT(USART_TypeDef *USARTx)
3224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TCBGT) == (USART_ISR_TCBGT)) ? 1U : 0U);
3226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 87


3227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Threshold Flag is set or not
3230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          TXFT          LL_USART_IsActiveFlag_TXFT
3233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXFT(USART_TypeDef *USARTx)
3237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXFT) == (USART_ISR_TXFT)) ? 1U : 0U);
3239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Threshold Flag is set or not
3243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ISR          RXFT          LL_USART_IsActiveFlag_RXFT
3246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXFT(USART_TypeDef *USARTx)
3250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXFT) == (USART_ISR_RXFT)) ? 1U : 0U);
3252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Parity Error Flag
3256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
3257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
3261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_PECF);
3263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Framing Error Flag
3267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
3268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
3272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_FECF);
3274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Noise Error detected Flag
3278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          NECF           LL_USART_ClearFlag_NE
3279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
3283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 88


3284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_NECF);
3285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
3289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
3290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
3294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
3296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
3300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
3301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
3305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
3307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear TX FIFO Empty Flag
3311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          TXFECF        LL_USART_ClearFlag_TXFE
3314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TXFE(USART_TypeDef *USARTx)
3318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TXFECF);
3320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
3324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
3325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
3329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
3331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Smartcard Transmission Complete Before Guard Time Flag
3335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          TCBGTCF       LL_USART_ClearFlag_TCBGT
3336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TCBGT(USART_TypeDef *USARTx)
3340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 89


3341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCBGTCF);
3342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
3346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          LBDCF         LL_USART_ClearFlag_LBD
3349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
3353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
3355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
3359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          CTSCF         LL_USART_ClearFlag_nCTS
3362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
3366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CTSCF);
3368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Receiver Time Out Flag
3372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
3373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
3377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
3379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear End Of Block Flag
3383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          EOBCF         LL_USART_ClearFlag_EOB
3386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_EOB(USART_TypeDef *USARTx)
3390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_EOBCF);
3392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear SPI Slave Underrun Flag
3396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
3397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 90


3398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          UDRCF         LL_USART_ClearFlag_UDR
3399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_UDR(USART_TypeDef *USARTx)
3403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_UDRCF);
3405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Character Match Flag
3409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          CMCF          LL_USART_ClearFlag_CM
3410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_CM(USART_TypeDef *USARTx)
3414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CMCF);
3416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Clear Wake Up from stop mode Flag
3420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll ICR          WUCF          LL_USART_ClearFlag_WKUP
3423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_WKUP(USART_TypeDef *USARTx)
3427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
3429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
3433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
3436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
3437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
3441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
3442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
3446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_EnableIT_RXNE  LL_USART_EnableIT_RXNE_RXFNE
3452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable RX Not Empty and RX FIFO Not Empty Interrupt
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 91


3455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
3458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
3462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
3464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
3468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
3469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
3473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
3475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_EnableIT_TXE  LL_USART_EnableIT_TXE_TXFNF
3479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable TX Empty and TX FIFO Not Full Interrupt
3482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
3485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
3489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
3491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
3495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
3496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
3500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
3502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Character Match Interrupt
3506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_EnableIT_CM
3507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CM(USART_TypeDef *USARTx)
3511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 92


3512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_CMIE);
3513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Receiver Timeout Interrupt
3517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
3518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
3522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
3524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable End Of Block Interrupt
3528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_EnableIT_EOB
3531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_EOB(USART_TypeDef *USARTx)
3535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_EOBIE);
3537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable TX FIFO Empty Interrupt
3541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_EnableIT_TXFE
3544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXFE(USART_TypeDef *USARTx)
3548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXFEIE);
3550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable RX FIFO Full Interrupt
3554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_EnableIT_RXFF
3555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXFF(USART_TypeDef *USARTx)
3559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXFFIE);
3561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
3565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
3568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 93


3569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
3572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
3574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Error Interrupt
3578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           0: Interrupt is inhibited
3581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
3583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
3587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
3589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable CTS Interrupt
3593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
3596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
3600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
3602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Wake Up from Stop Mode Interrupt
3606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_EnableIT_WKUP
3609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_WKUP(USART_TypeDef *USARTx)
3613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_WUFIE);
3615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable TX FIFO Threshold Interrupt
3619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_EnableIT_TXFT
3622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXFT(USART_TypeDef *USARTx)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 94


3626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_TXFTIE);
3628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable Smartcard Transmission Complete Before Guard Time Interrupt
3632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_EnableIT_TCBGT
3635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TCBGT(USART_TypeDef *USARTx)
3639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_TCBGTIE);
3641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable RX FIFO Threshold Interrupt
3645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_EnableIT_RXFT
3648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXFT(USART_TypeDef *USARTx)
3652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_RXFTIE);
3654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
3658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
3659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
3663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DisableIT_RXNE  LL_USART_DisableIT_RXNE_RXFNE
3669:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3670:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3671:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable RX Not Empty and RX FIFO Not Empty Interrupt
3672:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3673:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3674:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_DisableIT_RXNE_RXFNE
3675:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3676:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3677:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3678:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
3679:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3680:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
3681:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3682:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 95


3683:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3684:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
3685:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
3686:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3687:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3688:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3689:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
3690:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3691:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
3692:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3693:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3694:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3695:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_DisableIT_TXE  LL_USART_DisableIT_TXE_TXFNF
3696:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3697:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3698:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable TX Empty and TX FIFO Not Full Interrupt
3699:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3700:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3701:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
3702:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3703:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3704:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3705:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
3706:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3707:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
3708:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3709:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3710:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3711:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
3712:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
3713:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3714:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3715:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3716:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
3717:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3718:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
3719:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3720:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3721:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3722:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Character Match Interrupt
3723:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_DisableIT_CM
3724:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3725:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3726:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3727:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CM(USART_TypeDef *USARTx)
3728:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3729:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_CMIE);
3730:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3731:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3732:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3733:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Receiver Timeout Interrupt
3734:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_DisableIT_RTO
3735:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3736:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3737:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3738:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RTO(USART_TypeDef *USARTx)
3739:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 96


3740:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RTOIE);
3741:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3742:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3743:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3744:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable End Of Block Interrupt
3745:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3746:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3747:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_DisableIT_EOB
3748:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3749:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3750:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3751:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_EOB(USART_TypeDef *USARTx)
3752:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3753:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_EOBIE);
3754:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3755:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3756:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3757:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable TX FIFO Empty Interrupt
3758:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3759:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3760:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_DisableIT_TXFE
3761:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3762:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3763:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3764:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXFE(USART_TypeDef *USARTx)
3765:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3766:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXFEIE);
3767:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3768:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3769:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3770:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable RX FIFO Full Interrupt
3771:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3772:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3773:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_DisableIT_RXFF
3774:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3775:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3776:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3777:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXFF(USART_TypeDef *USARTx)
3778:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3779:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXFFIE);
3780:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3781:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3782:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3783:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
3784:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3785:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3786:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
3787:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3788:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3789:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3790:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
3791:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3792:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
3793:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3794:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3795:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3796:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Error Interrupt
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 97


3797:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3798:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3799:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           0: Interrupt is inhibited
3800:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3801:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
3802:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3803:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3804:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3805:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
3806:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3807:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
3808:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3809:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3810:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3811:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable CTS Interrupt
3812:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3813:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3814:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
3815:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3816:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3817:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3818:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
3819:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3820:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
3821:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3822:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3823:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3824:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Wake Up from Stop Mode Interrupt
3825:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3826:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3827:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_DisableIT_WKUP
3828:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3829:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3830:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3831:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_WKUP(USART_TypeDef *USARTx)
3832:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3833:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_WUFIE);
3834:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3835:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3836:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3837:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable TX FIFO Threshold Interrupt
3838:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3839:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3840:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_DisableIT_TXFT
3841:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3842:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3843:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3844:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXFT(USART_TypeDef *USARTx)
3845:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3846:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_TXFTIE);
3847:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3848:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3849:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3850:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable Smartcard Transmission Complete Before Guard Time Interrupt
3851:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3852:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3853:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_DisableIT_TCBGT
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 98


3854:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3855:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3856:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3857:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TCBGT(USART_TypeDef *USARTx)
3858:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3859:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_TCBGTIE);
3860:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3861:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3862:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3863:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable RX FIFO Threshold Interrupt
3864:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3865:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3866:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_DisableIT_RXFT
3867:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3868:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
3869:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3870:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXFT(USART_TypeDef *USARTx)
3871:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3872:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_RXFTIE);
3873:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3874:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3875:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3876:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
3877:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
3878:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3879:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3880:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3881:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
3882:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3883:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1U : 0U);
3884:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3885:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3886:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3887:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IsEnabledIT_RXNE  LL_USART_IsEnabledIT_RXNE_RXFNE
3888:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3889:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3890:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty and USART RX FIFO Not Empty Interrupt is enabled or dis
3891:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3892:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3893:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
3894:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3895:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3896:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3897:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
3898:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3899:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1U : 0U
3900:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3901:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3902:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3903:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
3904:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
3905:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3906:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3907:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3908:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
3909:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3910:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1U : 0U);
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 99


3911:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3912:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3913:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /* Legacy define */
3914:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** #define LL_USART_IsEnabledIT_TXE  LL_USART_IsEnabledIT_TXE_TXFNF
3915:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3916:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3917:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART TX Empty and USART TX FIFO Not Full Interrupt is enabled or disabled
3918:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3919:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3920:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
3921:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3922:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3923:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3924:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
3925:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3926:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1U : 0U);
3927:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3928:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3929:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3930:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
3931:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
3932:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3933:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3934:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3935:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
3936:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3937:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1U : 0U);
3938:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3939:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3941:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Character Match Interrupt is enabled or disabled.
3942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_IsEnabledIT_CM
3943:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3944:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3945:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3946:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CM(USART_TypeDef *USARTx)
3947:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3948:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_CMIE) == (USART_CR1_CMIE)) ? 1U : 0U);
3949:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3950:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3951:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3952:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Receiver Timeout Interrupt is enabled or disabled.
3953:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_IsEnabledIT_RTO
3954:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3955:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3956:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3957:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RTO(USART_TypeDef *USARTx)
3958:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3959:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RTOIE) == (USART_CR1_RTOIE)) ? 1U : 0U);
3960:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3961:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3962:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3963:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART End Of Block Interrupt is enabled or disabled.
3964:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3965:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3966:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_IsEnabledIT_EOB
3967:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 100


3968:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3969:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3970:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_EOB(USART_TypeDef *USARTx)
3971:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3972:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_EOBIE) == (USART_CR1_EOBIE)) ? 1U : 0U);
3973:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3974:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3975:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3976:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Empty Interrupt is enabled or disabled
3977:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3978:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3979:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_IsEnabledIT_TXFE
3980:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3981:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3982:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3983:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXFE(USART_TypeDef *USARTx)
3984:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3985:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TXFEIE) == (USART_CR1_TXFEIE)) ? 1U : 0U);
3986:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
3987:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
3988:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
3989:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Full Interrupt is enabled or disabled
3990:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3991:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3992:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_IsEnabledIT_RXFF
3993:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
3994:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
3995:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
3996:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXFF(USART_TypeDef *USARTx)
3997:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
3998:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RXFFIE) == (USART_CR1_RXFFIE)) ? 1U : 0U);
3999:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4000:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4001:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4002:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
4003:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
4004:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
4005:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
4006:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4007:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4008:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4009:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
4010:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4011:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE)) ? 1U : 0U);
4012:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4013:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4014:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4015:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
4016:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
4017:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4018:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4019:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4020:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
4021:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4022:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1U : 0U);
4023:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4024:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 101


4025:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4026:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
4027:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
4028:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
4029:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
4030:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4031:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4032:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4033:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(USART_TypeDef *USARTx)
4034:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4035:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE)) ? 1U : 0U);
4036:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4037:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4038:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4039:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the USART Wake Up from Stop Mode Interrupt is enabled or disabled.
4040:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
4041:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
4042:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_IsEnabledIT_WKUP
4043:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4044:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4045:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4046:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_WKUP(USART_TypeDef *USARTx)
4047:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4048:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_WUFIE) == (USART_CR3_WUFIE)) ? 1U : 0U);
4049:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4050:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4051:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4052:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if USART TX FIFO Threshold Interrupt is enabled or disabled
4053:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4054:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4055:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_IsEnabledIT_TXFT
4056:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4057:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4058:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4059:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXFT(USART_TypeDef *USARTx)
4060:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4061:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_TXFTIE) == (USART_CR3_TXFTIE)) ? 1U : 0U);
4062:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4063:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4064:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4065:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if the Smartcard Transmission Complete Before Guard Time Interrupt is enabled or 
4066:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
4067:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
4068:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_IsEnabledIT_TCBGT
4069:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4070:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4071:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4072:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TCBGT(USART_TypeDef *USARTx)
4073:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4074:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_TCBGTIE) == (USART_CR3_TCBGTIE)) ? 1U : 0U);
4075:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4076:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4077:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4078:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if USART RX FIFO Threshold Interrupt is enabled or disabled
4079:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @note   Macro @ref IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4080:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4081:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_IsEnabledIT_RXFT
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 102


4082:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4083:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4084:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4085:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXFT(USART_TypeDef *USARTx)
4086:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4087:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_RXFTIE) == (USART_CR3_RXFTIE)) ? 1U : 0U);
4088:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4089:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4090:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4091:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
4092:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4093:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4094:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
4095:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
4096:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4097:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4098:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4099:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
4100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
4101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
4103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
4105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
4107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable DMA Mode for reception
4111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
4112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
4114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
4116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
4118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for reception
4122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_IsEnabledDMAReq_RX
4123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_RX(USART_TypeDef *USARTx)
4127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DMAR) == (USART_CR3_DMAR)) ? 1U : 0U);
4129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable DMA Mode for transmission
4133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
4134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
4136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
4138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 103


4139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
4140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable DMA Mode for transmission
4144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_DisableDMAReq_TX
4145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
4147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
4149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
4151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for transmission
4155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_IsEnabledDMAReq_TX
4156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_TX(USART_TypeDef *USARTx)
4160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DMAT) == (USART_CR3_DMAT)) ? 1U : 0U);
4162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Enable DMA Disabling on Reception Error
4166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DDRE          LL_USART_EnableDMADeactOnRxErr
4167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
4169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMADeactOnRxErr(USART_TypeDef *USARTx)
4171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DDRE);
4173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Disable DMA Disabling on Reception Error
4177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DDRE          LL_USART_DisableDMADeactOnRxErr
4178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
4180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMADeactOnRxErr(USART_TypeDef *USARTx)
4182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
4184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Indicate if DMA Disabling on Reception Error is disabled
4188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll CR3          DDRE          LL_USART_IsEnabledDMADeactOnRxErr
4189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval State of bit (1 or 0).
4191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMADeactOnRxErr(USART_TypeDef *USARTx)
4193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DDRE) == (USART_CR3_DDRE)) ? 1U : 0U);
4195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 104


4196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Get the data register address used for DMA transfer
4199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RDR          RDR           LL_USART_DMA_GetRegAddr\n
4200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll TDR          TDR           LL_USART_DMA_GetRegAddr
4201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Direction This parameter can be one of the following values:
4203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
4204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
4205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Address of data register
4206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
4208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   uint32_t data_reg_addr;
4210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
4212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
4213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     /* return address of TDR register */
4214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     data_reg_addr = (uint32_t) &(USARTx->TDR);
4215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
4216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   else
4217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   {
4218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     /* return address of RDR register */
4219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****     data_reg_addr = (uint32_t) &(USARTx->RDR);
4220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   }
4221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return data_reg_addr;
4223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @}
4227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /** @defgroup USART_LL_EF_Data_Management Data_Management
4230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @{
4231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 8 bits)
4235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RDR          RDR           LL_USART_ReceiveData8
4236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
4238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
 324              		.loc 3 4239 25 view .LVU85
 325              	.LBB74:
4240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 326              		.loc 3 4241 3 view .LVU86
 327              		.loc 3 4241 20 is_stmt 0 view .LVU87
 328 0002 164A     		ldr	r2, .L17
 329 0004 536A     		ldr	r3, [r2, #36]
 330              		.loc 3 4241 10 view .LVU88
 331 0006 DBB2     		uxtb	r3, r3
 332              	.LVL15:
 333              		.loc 3 4241 10 view .LVU89
 334              	.LBE74:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 105


 335              	.LBE73:
 751:Core/Src/main.c ****   LL_USART_TransmitData8(USART1, ch); // Echo char recieved on TX
 336              		.loc 1 751 3 is_stmt 1 view .LVU90
 337              	.LBB75:
 338              	.LBI75:
4242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 9 bits)
4246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll RDR          RDR           LL_USART_ReceiveData9
4247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
4249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
4251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
4253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
4254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** 
4255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** /**
4256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @brief  Write in Transmitter Data Register (Transmit Data value, 8 bits)
4257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @rmtoll TDR          TDR           LL_USART_TransmitData8
4258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  USARTx USART Instance
4259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @param  Value between Min_Data=0x00 and Max_Data=0xFF
4260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   * @retval None
4261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   */
4262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** __STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
 339              		.loc 3 4262 22 view .LVU91
 340              	.LBB76:
4263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
4264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h ****   USARTx->TDR = Value;
 341              		.loc 3 4264 3 view .LVU92
 342              		.loc 3 4264 15 is_stmt 0 view .LVU93
 343 0008 9362     		str	r3, [r2, #40]
 344              	.LVL16:
 345              		.loc 3 4264 15 view .LVU94
 346              	.LBE76:
 347              	.LBE75:
 752:Core/Src/main.c **** 
 753:Core/Src/main.c ****   // Execute command if new line or carriage return character is recieved.
 754:Core/Src/main.c ****   if (ch == '\r' || ch == '\n') {
 348              		.loc 1 754 3 is_stmt 1 view .LVU95
 349              		.loc 1 754 6 is_stmt 0 view .LVU96
 350 000a 0D2B     		cmp	r3, #13
 351 000c 0AD0     		beq	.L11
 352              		.loc 1 754 18 discriminator 1 view .LVU97
 353 000e 0A2B     		cmp	r3, #10
 354 0010 08D0     		beq	.L11
 755:Core/Src/main.c ****     // complete_command_flag = 1;
 756:Core/Src/main.c **** 
 757:Core/Src/main.c ****     execute_command(command_buffer);
 758:Core/Src/main.c ****     // complete_command_flag = 0;
 759:Core/Src/main.c ****     prompt();
 760:Core/Src/main.c ****     command_index = 0;
 761:Core/Src/main.c ****     memset(command_buffer, 0, MAX_COMMAND_BUFF_LENGTH);
 762:Core/Src/main.c ****    
 763:Core/Src/main.c ****     // UTIL_SEQ_RegTask( 1<<CFG_TASK_EXECUTE_COMAMND, UTIL_SEQ_RFU, ButtonTriggerReceived);
 764:Core/Src/main.c ****   }
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 106


 765:Core/Src/main.c ****   else if (ch==0x0f) {               // backspace functionality
 355              		.loc 1 765 8 is_stmt 1 view .LVU98
 356              		.loc 1 765 11 is_stmt 0 view .LVU99
 357 0012 0F2B     		cmp	r3, #15
 358 0014 15D0     		beq	.L16
 766:Core/Src/main.c ****     if (command_index > 0) { 
 767:Core/Src/main.c ****       printf("\b \b");
 768:Core/Src/main.c ****       command_index--;
 769:Core/Src/main.c ****       }
 770:Core/Src/main.c ****   }
 771:Core/Src/main.c **** 
 772:Core/Src/main.c ****   // Store new character otherwise
 773:Core/Src/main.c ****   else {
 774:Core/Src/main.c ****     command_buffer[command_index++] = ch; // Store in command buff
 359              		.loc 1 774 5 is_stmt 1 view .LVU100
 360              		.loc 1 774 33 is_stmt 0 view .LVU101
 361 0016 1249     		ldr	r1, .L17+4
 362 0018 0A68     		ldr	r2, [r1]
 363 001a 501C     		adds	r0, r2, #1
 364 001c 0860     		str	r0, [r1]
 365              		.loc 1 774 37 view .LVU102
 366 001e 1149     		ldr	r1, .L17+8
 367 0020 8B54     		strb	r3, [r1, r2]
 775:Core/Src/main.c ****   }
 776:Core/Src/main.c **** }
 368              		.loc 1 776 1 view .LVU103
 369 0022 0DE0     		b	.L10
 370              	.L11:
 757:Core/Src/main.c ****     // complete_command_flag = 0;
 371              		.loc 1 757 5 is_stmt 1 view .LVU104
 372 0024 0F4C     		ldr	r4, .L17+8
 373 0026 2046     		mov	r0, r4
 374 0028 FFF7FEFF 		bl	execute_command
 375              	.LVL17:
 759:Core/Src/main.c ****     command_index = 0;
 376              		.loc 1 759 5 view .LVU105
 377 002c FFF7FEFF 		bl	prompt
 378              	.LVL18:
 760:Core/Src/main.c ****     memset(command_buffer, 0, MAX_COMMAND_BUFF_LENGTH);
 379              		.loc 1 760 5 view .LVU106
 760:Core/Src/main.c ****     memset(command_buffer, 0, MAX_COMMAND_BUFF_LENGTH);
 380              		.loc 1 760 19 is_stmt 0 view .LVU107
 381 0030 0023     		movs	r3, #0
 382 0032 0B4A     		ldr	r2, .L17+4
 383 0034 1360     		str	r3, [r2]
 761:Core/Src/main.c ****    
 384              		.loc 1 761 5 is_stmt 1 view .LVU108
 385 0036 2360     		str	r3, [r4]	@ unaligned
 386 0038 6360     		str	r3, [r4, #4]	@ unaligned
 387 003a A360     		str	r3, [r4, #8]	@ unaligned
 388 003c E360     		str	r3, [r4, #12]	@ unaligned
 389 003e 2361     		str	r3, [r4, #16]	@ unaligned
 390              	.L10:
 391              		.loc 1 776 1 is_stmt 0 view .LVU109
 392 0040 10BD     		pop	{r4, pc}
 393              	.LVL19:
 394              	.L16:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 107


 766:Core/Src/main.c ****       printf("\b \b");
 395              		.loc 1 766 5 is_stmt 1 view .LVU110
 766:Core/Src/main.c ****       printf("\b \b");
 396              		.loc 1 766 23 is_stmt 0 view .LVU111
 397 0042 074B     		ldr	r3, .L17+4
 398              	.LVL20:
 766:Core/Src/main.c ****       printf("\b \b");
 399              		.loc 1 766 23 view .LVU112
 400 0044 1B68     		ldr	r3, [r3]
 766:Core/Src/main.c ****       printf("\b \b");
 401              		.loc 1 766 8 view .LVU113
 402 0046 002B     		cmp	r3, #0
 403 0048 FADD     		ble	.L10
 767:Core/Src/main.c ****       command_index--;
 404              		.loc 1 767 7 is_stmt 1 view .LVU114
 405 004a 0748     		ldr	r0, .L17+12
 406 004c FFF7FEFF 		bl	printf
 407              	.LVL21:
 768:Core/Src/main.c ****       }
 408              		.loc 1 768 7 view .LVU115
 768:Core/Src/main.c ****       }
 409              		.loc 1 768 20 is_stmt 0 view .LVU116
 410 0050 034A     		ldr	r2, .L17+4
 411 0052 1368     		ldr	r3, [r2]
 412 0054 013B     		subs	r3, r3, #1
 413 0056 1360     		str	r3, [r2]
 414 0058 F2E7     		b	.L10
 415              	.L18:
 416 005a 00BF     		.align	2
 417              	.L17:
 418 005c 00380140 		.word	1073821696
 419 0060 00000000 		.word	command_index
 420 0064 00000000 		.word	command_buffer
 421 0068 00000000 		.word	.LC0
 422              		.cfi_endproc
 423              	.LFE1837:
 425              		.section	.text.UART_Error_Callback,"ax",%progbits
 426              		.align	1
 427              		.global	UART_Error_Callback
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv4-sp-d16
 433              	UART_Error_Callback:
 434              	.LFB1838:
 777:Core/Src/main.c **** 
 778:Core/Src/main.c **** /**
 779:Core/Src/main.c ****   * @brief  Function called in case of error detected in USART IT Handler
 780:Core/Src/main.c ****   * @param  None
 781:Core/Src/main.c ****   * @retval None
 782:Core/Src/main.c ****   */
 783:Core/Src/main.c **** 
 784:Core/Src/main.c **** void UART_Error_Callback(void)
 785:Core/Src/main.c **** {
 435              		.loc 1 785 1 is_stmt 1 view -0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 108


 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440 0000 82B0     		sub	sp, sp, #8
 441              	.LCFI6:
 442              		.cfi_def_cfa_offset 8
 786:Core/Src/main.c ****   __IO uint32_t isr_reg;
 443              		.loc 1 786 3 view .LVU118
 787:Core/Src/main.c **** 
 788:Core/Src/main.c ****   /* Disable USARTx_IRQn */
 789:Core/Src/main.c ****   NVIC_DisableIRQ(USART1_IRQn);
 444              		.loc 1 789 3 view .LVU119
 445              	.LVL22:
 446              	.LBB77:
 447              	.LBI77:
 448              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
   1:Drivers/CMSIS/Include/core_cm4.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm4.h ****  * @file     core_cm4.h
   3:Drivers/CMSIS/Include/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm4.h ****  * @version  V5.1.0
   5:Drivers/CMSIS/Include/core_cm4.h ****  * @date     13. March 2019
   6:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm4.h **** /*
   8:Drivers/CMSIS/Include/core_cm4.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm4.h ****  *
  10:Drivers/CMSIS/Include/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm4.h ****  *
  12:Drivers/CMSIS/Include/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm4.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm4.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm4.h ****  *
  16:Drivers/CMSIS/Include/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm4.h ****  *
  18:Drivers/CMSIS/Include/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm4.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm4.h ****  */
  24:Drivers/CMSIS/Include/core_cm4.h **** 
  25:Drivers/CMSIS/Include/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm4.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm4.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm4.h **** #endif
  30:Drivers/CMSIS/Include/core_cm4.h **** 
  31:Drivers/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm4.h **** 
  34:Drivers/CMSIS/Include/core_cm4.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm4.h **** 
  36:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm4.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm4.h **** #endif
  39:Drivers/CMSIS/Include/core_cm4.h **** 
  40:Drivers/CMSIS/Include/core_cm4.h **** /**
  41:Drivers/CMSIS/Include/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 109


  43:Drivers/CMSIS/Include/core_cm4.h **** 
  44:Drivers/CMSIS/Include/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm4.h **** 
  47:Drivers/CMSIS/Include/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm4.h **** 
  50:Drivers/CMSIS/Include/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm4.h ****  */
  53:Drivers/CMSIS/Include/core_cm4.h **** 
  54:Drivers/CMSIS/Include/core_cm4.h **** 
  55:Drivers/CMSIS/Include/core_cm4.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm4.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm4.h **** /**
  59:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup Cortex_M4
  60:Drivers/CMSIS/Include/core_cm4.h ****   @{
  61:Drivers/CMSIS/Include/core_cm4.h ****  */
  62:Drivers/CMSIS/Include/core_cm4.h **** 
  63:Drivers/CMSIS/Include/core_cm4.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm4.h **** 
  65:Drivers/CMSIS/Include/core_cm4.h **** /* CMSIS CM4 definitions */
  66:Drivers/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm4.h **** 
  71:Drivers/CMSIS/Include/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm4.h **** 
  73:Drivers/CMSIS/Include/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:Drivers/CMSIS/Include/core_cm4.h **** */
  76:Drivers/CMSIS/Include/core_cm4.h **** #if defined ( __CC_ARM )
  77:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
  80:Drivers/CMSIS/Include/core_cm4.h ****     #else
  81:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
  83:Drivers/CMSIS/Include/core_cm4.h ****     #endif
  84:Drivers/CMSIS/Include/core_cm4.h ****   #else
  85:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
  86:Drivers/CMSIS/Include/core_cm4.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm4.h **** 
  88:Drivers/CMSIS/Include/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __ARM_FP
  90:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
  92:Drivers/CMSIS/Include/core_cm4.h ****     #else
  93:Drivers/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
  95:Drivers/CMSIS/Include/core_cm4.h ****     #endif
  96:Drivers/CMSIS/Include/core_cm4.h ****   #else
  97:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
  98:Drivers/CMSIS/Include/core_cm4.h ****   #endif
  99:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 110


 100:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
 101:Drivers/CMSIS/Include/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 104:Drivers/CMSIS/Include/core_cm4.h ****     #else
 105:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 107:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 108:Drivers/CMSIS/Include/core_cm4.h ****   #else
 109:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 110:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 111:Drivers/CMSIS/Include/core_cm4.h **** 
 112:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __ARMVFP__
 114:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 116:Drivers/CMSIS/Include/core_cm4.h ****     #else
 117:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 119:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 120:Drivers/CMSIS/Include/core_cm4.h ****   #else
 121:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 122:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 123:Drivers/CMSIS/Include/core_cm4.h **** 
 124:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 128:Drivers/CMSIS/Include/core_cm4.h ****     #else
 129:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 131:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 132:Drivers/CMSIS/Include/core_cm4.h ****   #else
 133:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 134:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm4.h **** 
 136:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
 137:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __FPU_VFP__
 138:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 140:Drivers/CMSIS/Include/core_cm4.h ****     #else
 141:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 143:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 144:Drivers/CMSIS/Include/core_cm4.h ****   #else
 145:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 146:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 147:Drivers/CMSIS/Include/core_cm4.h **** 
 148:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __CSMC__ )
 149:Drivers/CMSIS/Include/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:Drivers/CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 152:Drivers/CMSIS/Include/core_cm4.h ****     #else
 153:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 155:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 156:Drivers/CMSIS/Include/core_cm4.h ****   #else
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 111


 157:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 158:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm4.h **** 
 160:Drivers/CMSIS/Include/core_cm4.h **** #endif
 161:Drivers/CMSIS/Include/core_cm4.h **** 
 162:Drivers/CMSIS/Include/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:Drivers/CMSIS/Include/core_cm4.h **** 
 164:Drivers/CMSIS/Include/core_cm4.h **** 
 165:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 166:Drivers/CMSIS/Include/core_cm4.h **** }
 167:Drivers/CMSIS/Include/core_cm4.h **** #endif
 168:Drivers/CMSIS/Include/core_cm4.h **** 
 169:Drivers/CMSIS/Include/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:Drivers/CMSIS/Include/core_cm4.h **** 
 171:Drivers/CMSIS/Include/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:Drivers/CMSIS/Include/core_cm4.h **** 
 173:Drivers/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:Drivers/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm4.h **** 
 176:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 177:Drivers/CMSIS/Include/core_cm4.h ****  extern "C" {
 178:Drivers/CMSIS/Include/core_cm4.h **** #endif
 179:Drivers/CMSIS/Include/core_cm4.h **** 
 180:Drivers/CMSIS/Include/core_cm4.h **** /* check device defines and use defaults */
 181:Drivers/CMSIS/Include/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __CM4_REV
 183:Drivers/CMSIS/Include/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 186:Drivers/CMSIS/Include/core_cm4.h **** 
 187:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 191:Drivers/CMSIS/Include/core_cm4.h **** 
 192:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:Drivers/CMSIS/Include/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 196:Drivers/CMSIS/Include/core_cm4.h **** 
 197:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:Drivers/CMSIS/Include/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 201:Drivers/CMSIS/Include/core_cm4.h **** 
 202:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:Drivers/CMSIS/Include/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 206:Drivers/CMSIS/Include/core_cm4.h **** #endif
 207:Drivers/CMSIS/Include/core_cm4.h **** 
 208:Drivers/CMSIS/Include/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:Drivers/CMSIS/Include/core_cm4.h **** /**
 210:Drivers/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:Drivers/CMSIS/Include/core_cm4.h **** 
 212:Drivers/CMSIS/Include/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:Drivers/CMSIS/Include/core_cm4.h ****     \li to specify the access to peripheral variables.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 112


 214:Drivers/CMSIS/Include/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:Drivers/CMSIS/Include/core_cm4.h **** */
 216:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 217:Drivers/CMSIS/Include/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:Drivers/CMSIS/Include/core_cm4.h **** #else
 219:Drivers/CMSIS/Include/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:Drivers/CMSIS/Include/core_cm4.h **** #endif
 221:Drivers/CMSIS/Include/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:Drivers/CMSIS/Include/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:Drivers/CMSIS/Include/core_cm4.h **** 
 224:Drivers/CMSIS/Include/core_cm4.h **** /* following defines should be used for structure members */
 225:Drivers/CMSIS/Include/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:Drivers/CMSIS/Include/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:Drivers/CMSIS/Include/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:Drivers/CMSIS/Include/core_cm4.h **** 
 229:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:Drivers/CMSIS/Include/core_cm4.h **** 
 231:Drivers/CMSIS/Include/core_cm4.h **** 
 232:Drivers/CMSIS/Include/core_cm4.h **** 
 233:Drivers/CMSIS/Include/core_cm4.h **** /*******************************************************************************
 234:Drivers/CMSIS/Include/core_cm4.h ****  *                 Register Abstraction
 235:Drivers/CMSIS/Include/core_cm4.h ****   Core Register contain:
 236:Drivers/CMSIS/Include/core_cm4.h ****   - Core Register
 237:Drivers/CMSIS/Include/core_cm4.h ****   - Core NVIC Register
 238:Drivers/CMSIS/Include/core_cm4.h ****   - Core SCB Register
 239:Drivers/CMSIS/Include/core_cm4.h ****   - Core SysTick Register
 240:Drivers/CMSIS/Include/core_cm4.h ****   - Core Debug Register
 241:Drivers/CMSIS/Include/core_cm4.h ****   - Core MPU Register
 242:Drivers/CMSIS/Include/core_cm4.h ****   - Core FPU Register
 243:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
 244:Drivers/CMSIS/Include/core_cm4.h **** /**
 245:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:Drivers/CMSIS/Include/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:Drivers/CMSIS/Include/core_cm4.h **** */
 248:Drivers/CMSIS/Include/core_cm4.h **** 
 249:Drivers/CMSIS/Include/core_cm4.h **** /**
 250:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Core Register type definitions.
 253:Drivers/CMSIS/Include/core_cm4.h ****   @{
 254:Drivers/CMSIS/Include/core_cm4.h ****  */
 255:Drivers/CMSIS/Include/core_cm4.h **** 
 256:Drivers/CMSIS/Include/core_cm4.h **** /**
 257:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:Drivers/CMSIS/Include/core_cm4.h ****  */
 259:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 260:Drivers/CMSIS/Include/core_cm4.h **** {
 261:Drivers/CMSIS/Include/core_cm4.h ****   struct
 262:Drivers/CMSIS/Include/core_cm4.h ****   {
 263:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 113


 271:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:Drivers/CMSIS/Include/core_cm4.h **** } APSR_Type;
 274:Drivers/CMSIS/Include/core_cm4.h **** 
 275:Drivers/CMSIS/Include/core_cm4.h **** /* APSR Register Definitions */
 276:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:Drivers/CMSIS/Include/core_cm4.h **** 
 279:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:Drivers/CMSIS/Include/core_cm4.h **** 
 282:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:Drivers/CMSIS/Include/core_cm4.h **** 
 285:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:Drivers/CMSIS/Include/core_cm4.h **** 
 288:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:Drivers/CMSIS/Include/core_cm4.h **** 
 291:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:Drivers/CMSIS/Include/core_cm4.h **** 
 294:Drivers/CMSIS/Include/core_cm4.h **** 
 295:Drivers/CMSIS/Include/core_cm4.h **** /**
 296:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:Drivers/CMSIS/Include/core_cm4.h ****  */
 298:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 299:Drivers/CMSIS/Include/core_cm4.h **** {
 300:Drivers/CMSIS/Include/core_cm4.h ****   struct
 301:Drivers/CMSIS/Include/core_cm4.h ****   {
 302:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm4.h **** } IPSR_Type;
 307:Drivers/CMSIS/Include/core_cm4.h **** 
 308:Drivers/CMSIS/Include/core_cm4.h **** /* IPSR Register Definitions */
 309:Drivers/CMSIS/Include/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:Drivers/CMSIS/Include/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:Drivers/CMSIS/Include/core_cm4.h **** 
 312:Drivers/CMSIS/Include/core_cm4.h **** 
 313:Drivers/CMSIS/Include/core_cm4.h **** /**
 314:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:Drivers/CMSIS/Include/core_cm4.h ****  */
 316:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 317:Drivers/CMSIS/Include/core_cm4.h **** {
 318:Drivers/CMSIS/Include/core_cm4.h ****   struct
 319:Drivers/CMSIS/Include/core_cm4.h ****   {
 320:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 114


 328:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:Drivers/CMSIS/Include/core_cm4.h **** } xPSR_Type;
 335:Drivers/CMSIS/Include/core_cm4.h **** 
 336:Drivers/CMSIS/Include/core_cm4.h **** /* xPSR Register Definitions */
 337:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:Drivers/CMSIS/Include/core_cm4.h **** 
 340:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:Drivers/CMSIS/Include/core_cm4.h **** 
 343:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:Drivers/CMSIS/Include/core_cm4.h **** 
 346:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:Drivers/CMSIS/Include/core_cm4.h **** 
 349:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:Drivers/CMSIS/Include/core_cm4.h **** 
 352:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:Drivers/CMSIS/Include/core_cm4.h **** 
 355:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:Drivers/CMSIS/Include/core_cm4.h **** 
 358:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:Drivers/CMSIS/Include/core_cm4.h **** 
 361:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:Drivers/CMSIS/Include/core_cm4.h **** 
 364:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:Drivers/CMSIS/Include/core_cm4.h **** 
 367:Drivers/CMSIS/Include/core_cm4.h **** 
 368:Drivers/CMSIS/Include/core_cm4.h **** /**
 369:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:Drivers/CMSIS/Include/core_cm4.h ****  */
 371:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 372:Drivers/CMSIS/Include/core_cm4.h **** {
 373:Drivers/CMSIS/Include/core_cm4.h ****   struct
 374:Drivers/CMSIS/Include/core_cm4.h ****   {
 375:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:Drivers/CMSIS/Include/core_cm4.h **** } CONTROL_Type;
 382:Drivers/CMSIS/Include/core_cm4.h **** 
 383:Drivers/CMSIS/Include/core_cm4.h **** /* CONTROL Register Definitions */
 384:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 115


 385:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:Drivers/CMSIS/Include/core_cm4.h **** 
 387:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:Drivers/CMSIS/Include/core_cm4.h **** 
 390:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:Drivers/CMSIS/Include/core_cm4.h **** 
 393:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:Drivers/CMSIS/Include/core_cm4.h **** 
 395:Drivers/CMSIS/Include/core_cm4.h **** 
 396:Drivers/CMSIS/Include/core_cm4.h **** /**
 397:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:Drivers/CMSIS/Include/core_cm4.h ****   @{
 401:Drivers/CMSIS/Include/core_cm4.h ****  */
 402:Drivers/CMSIS/Include/core_cm4.h **** 
 403:Drivers/CMSIS/Include/core_cm4.h **** /**
 404:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:Drivers/CMSIS/Include/core_cm4.h ****  */
 406:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 407:Drivers/CMSIS/Include/core_cm4.h **** {
 408:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[24U];
 412:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:Drivers/CMSIS/Include/core_cm4.h **** }  NVIC_Type;
 422:Drivers/CMSIS/Include/core_cm4.h **** 
 423:Drivers/CMSIS/Include/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:Drivers/CMSIS/Include/core_cm4.h **** 
 427:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:Drivers/CMSIS/Include/core_cm4.h **** 
 429:Drivers/CMSIS/Include/core_cm4.h **** 
 430:Drivers/CMSIS/Include/core_cm4.h **** /**
 431:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:Drivers/CMSIS/Include/core_cm4.h ****   @{
 435:Drivers/CMSIS/Include/core_cm4.h ****  */
 436:Drivers/CMSIS/Include/core_cm4.h **** 
 437:Drivers/CMSIS/Include/core_cm4.h **** /**
 438:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:Drivers/CMSIS/Include/core_cm4.h ****  */
 440:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 441:Drivers/CMSIS/Include/core_cm4.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 116


 442:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:Drivers/CMSIS/Include/core_cm4.h **** } SCB_Type;
 464:Drivers/CMSIS/Include/core_cm4.h **** 
 465:Drivers/CMSIS/Include/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm4.h **** 
 469:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm4.h **** 
 472:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm4.h **** 
 475:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm4.h **** 
 478:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:Drivers/CMSIS/Include/core_cm4.h **** 
 481:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:Drivers/CMSIS/Include/core_cm4.h **** 
 485:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:Drivers/CMSIS/Include/core_cm4.h **** 
 488:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:Drivers/CMSIS/Include/core_cm4.h **** 
 491:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:Drivers/CMSIS/Include/core_cm4.h **** 
 494:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:Drivers/CMSIS/Include/core_cm4.h **** 
 497:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 117


 499:Drivers/CMSIS/Include/core_cm4.h **** 
 500:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:Drivers/CMSIS/Include/core_cm4.h **** 
 503:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:Drivers/CMSIS/Include/core_cm4.h **** 
 506:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:Drivers/CMSIS/Include/core_cm4.h **** 
 509:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:Drivers/CMSIS/Include/core_cm4.h **** 
 512:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:Drivers/CMSIS/Include/core_cm4.h **** 
 516:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:Drivers/CMSIS/Include/core_cm4.h **** 
 520:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:Drivers/CMSIS/Include/core_cm4.h **** 
 523:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:Drivers/CMSIS/Include/core_cm4.h **** 
 526:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:Drivers/CMSIS/Include/core_cm4.h **** 
 529:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:Drivers/CMSIS/Include/core_cm4.h **** 
 532:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:Drivers/CMSIS/Include/core_cm4.h **** 
 535:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:Drivers/CMSIS/Include/core_cm4.h **** 
 538:Drivers/CMSIS/Include/core_cm4.h **** /* SCB System Control Register Definitions */
 539:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:Drivers/CMSIS/Include/core_cm4.h **** 
 542:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:Drivers/CMSIS/Include/core_cm4.h **** 
 545:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:Drivers/CMSIS/Include/core_cm4.h **** 
 548:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:Drivers/CMSIS/Include/core_cm4.h **** 
 552:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:Drivers/CMSIS/Include/core_cm4.h **** 
 555:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 118


 556:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:Drivers/CMSIS/Include/core_cm4.h **** 
 558:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:Drivers/CMSIS/Include/core_cm4.h **** 
 561:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:Drivers/CMSIS/Include/core_cm4.h **** 
 564:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:Drivers/CMSIS/Include/core_cm4.h **** 
 567:Drivers/CMSIS/Include/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:Drivers/CMSIS/Include/core_cm4.h **** 
 571:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:Drivers/CMSIS/Include/core_cm4.h **** 
 574:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:Drivers/CMSIS/Include/core_cm4.h **** 
 577:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:Drivers/CMSIS/Include/core_cm4.h **** 
 580:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:Drivers/CMSIS/Include/core_cm4.h **** 
 583:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:Drivers/CMSIS/Include/core_cm4.h **** 
 586:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:Drivers/CMSIS/Include/core_cm4.h **** 
 589:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:Drivers/CMSIS/Include/core_cm4.h **** 
 592:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:Drivers/CMSIS/Include/core_cm4.h **** 
 595:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:Drivers/CMSIS/Include/core_cm4.h **** 
 598:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:Drivers/CMSIS/Include/core_cm4.h **** 
 601:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:Drivers/CMSIS/Include/core_cm4.h **** 
 604:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:Drivers/CMSIS/Include/core_cm4.h **** 
 607:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:Drivers/CMSIS/Include/core_cm4.h **** 
 610:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 119


 613:Drivers/CMSIS/Include/core_cm4.h **** 
 614:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:Drivers/CMSIS/Include/core_cm4.h **** 
 617:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:Drivers/CMSIS/Include/core_cm4.h **** 
 620:Drivers/CMSIS/Include/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:Drivers/CMSIS/Include/core_cm4.h **** 
 624:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:Drivers/CMSIS/Include/core_cm4.h **** 
 627:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:Drivers/CMSIS/Include/core_cm4.h **** 
 630:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:Drivers/CMSIS/Include/core_cm4.h **** 
 633:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:Drivers/CMSIS/Include/core_cm4.h **** 
 636:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:Drivers/CMSIS/Include/core_cm4.h **** 
 639:Drivers/CMSIS/Include/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:Drivers/CMSIS/Include/core_cm4.h **** 
 643:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:Drivers/CMSIS/Include/core_cm4.h **** 
 646:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:Drivers/CMSIS/Include/core_cm4.h **** 
 649:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:Drivers/CMSIS/Include/core_cm4.h **** 
 652:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:Drivers/CMSIS/Include/core_cm4.h **** 
 655:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:Drivers/CMSIS/Include/core_cm4.h **** 
 658:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:Drivers/CMSIS/Include/core_cm4.h **** 
 661:Drivers/CMSIS/Include/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:Drivers/CMSIS/Include/core_cm4.h **** 
 665:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:Drivers/CMSIS/Include/core_cm4.h **** 
 668:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 120


 670:Drivers/CMSIS/Include/core_cm4.h **** 
 671:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:Drivers/CMSIS/Include/core_cm4.h **** 
 674:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:Drivers/CMSIS/Include/core_cm4.h **** 
 677:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:Drivers/CMSIS/Include/core_cm4.h **** 
 680:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:Drivers/CMSIS/Include/core_cm4.h **** 
 684:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:Drivers/CMSIS/Include/core_cm4.h **** 
 687:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:Drivers/CMSIS/Include/core_cm4.h **** 
 690:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:Drivers/CMSIS/Include/core_cm4.h **** 
 694:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:Drivers/CMSIS/Include/core_cm4.h **** 
 697:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:Drivers/CMSIS/Include/core_cm4.h **** 
 700:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:Drivers/CMSIS/Include/core_cm4.h **** 
 703:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:Drivers/CMSIS/Include/core_cm4.h **** 
 706:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:Drivers/CMSIS/Include/core_cm4.h **** 
 708:Drivers/CMSIS/Include/core_cm4.h **** 
 709:Drivers/CMSIS/Include/core_cm4.h **** /**
 710:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:Drivers/CMSIS/Include/core_cm4.h ****   @{
 714:Drivers/CMSIS/Include/core_cm4.h ****  */
 715:Drivers/CMSIS/Include/core_cm4.h **** 
 716:Drivers/CMSIS/Include/core_cm4.h **** /**
 717:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:Drivers/CMSIS/Include/core_cm4.h ****  */
 719:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 720:Drivers/CMSIS/Include/core_cm4.h **** {
 721:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:Drivers/CMSIS/Include/core_cm4.h **** } SCnSCB_Type;
 725:Drivers/CMSIS/Include/core_cm4.h **** 
 726:Drivers/CMSIS/Include/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 121


 727:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:Drivers/CMSIS/Include/core_cm4.h **** 
 730:Drivers/CMSIS/Include/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:Drivers/CMSIS/Include/core_cm4.h **** 
 734:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:Drivers/CMSIS/Include/core_cm4.h **** 
 737:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:Drivers/CMSIS/Include/core_cm4.h **** 
 740:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:Drivers/CMSIS/Include/core_cm4.h **** 
 743:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:Drivers/CMSIS/Include/core_cm4.h **** 
 746:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:Drivers/CMSIS/Include/core_cm4.h **** 
 748:Drivers/CMSIS/Include/core_cm4.h **** 
 749:Drivers/CMSIS/Include/core_cm4.h **** /**
 750:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:Drivers/CMSIS/Include/core_cm4.h ****   @{
 754:Drivers/CMSIS/Include/core_cm4.h ****  */
 755:Drivers/CMSIS/Include/core_cm4.h **** 
 756:Drivers/CMSIS/Include/core_cm4.h **** /**
 757:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:Drivers/CMSIS/Include/core_cm4.h ****  */
 759:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 760:Drivers/CMSIS/Include/core_cm4.h **** {
 761:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:Drivers/CMSIS/Include/core_cm4.h **** } SysTick_Type;
 766:Drivers/CMSIS/Include/core_cm4.h **** 
 767:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:Drivers/CMSIS/Include/core_cm4.h **** 
 771:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:Drivers/CMSIS/Include/core_cm4.h **** 
 774:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:Drivers/CMSIS/Include/core_cm4.h **** 
 777:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:Drivers/CMSIS/Include/core_cm4.h **** 
 780:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 122


 784:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Current Register Definitions */
 785:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:Drivers/CMSIS/Include/core_cm4.h **** 
 788:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:Drivers/CMSIS/Include/core_cm4.h **** 
 792:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:Drivers/CMSIS/Include/core_cm4.h **** 
 795:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:Drivers/CMSIS/Include/core_cm4.h **** 
 798:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:Drivers/CMSIS/Include/core_cm4.h **** 
 800:Drivers/CMSIS/Include/core_cm4.h **** 
 801:Drivers/CMSIS/Include/core_cm4.h **** /**
 802:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:Drivers/CMSIS/Include/core_cm4.h ****   @{
 806:Drivers/CMSIS/Include/core_cm4.h ****  */
 807:Drivers/CMSIS/Include/core_cm4.h **** 
 808:Drivers/CMSIS/Include/core_cm4.h **** /**
 809:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:Drivers/CMSIS/Include/core_cm4.h ****  */
 811:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 812:Drivers/CMSIS/Include/core_cm4.h **** {
 813:Drivers/CMSIS/Include/core_cm4.h ****   __OM  union
 814:Drivers/CMSIS/Include/core_cm4.h ****   {
 815:Drivers/CMSIS/Include/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:Drivers/CMSIS/Include/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:Drivers/CMSIS/Include/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:Drivers/CMSIS/Include/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[32U];
 826:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[43U];
 827:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 828:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 829:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[6U];
 830:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 831:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 832:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 833:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 834:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 835:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 836:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 837:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 838:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 839:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 840:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 123


 841:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 842:Drivers/CMSIS/Include/core_cm4.h **** } ITM_Type;
 843:Drivers/CMSIS/Include/core_cm4.h **** 
 844:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 845:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 846:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 847:Drivers/CMSIS/Include/core_cm4.h **** 
 848:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Trace Control Register Definitions */
 849:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 850:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 851:Drivers/CMSIS/Include/core_cm4.h **** 
 852:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 853:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 854:Drivers/CMSIS/Include/core_cm4.h **** 
 855:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 856:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 857:Drivers/CMSIS/Include/core_cm4.h **** 
 858:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 859:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 860:Drivers/CMSIS/Include/core_cm4.h **** 
 861:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 862:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 863:Drivers/CMSIS/Include/core_cm4.h **** 
 864:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 865:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 866:Drivers/CMSIS/Include/core_cm4.h **** 
 867:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 868:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 869:Drivers/CMSIS/Include/core_cm4.h **** 
 870:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 871:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 872:Drivers/CMSIS/Include/core_cm4.h **** 
 873:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 874:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 875:Drivers/CMSIS/Include/core_cm4.h **** 
 876:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:Drivers/CMSIS/Include/core_cm4.h **** 
 880:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:Drivers/CMSIS/Include/core_cm4.h **** 
 883:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:Drivers/CMSIS/Include/core_cm4.h **** 
 886:Drivers/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:Drivers/CMSIS/Include/core_cm4.h **** 
 888:Drivers/CMSIS/Include/core_cm4.h **** 
 889:Drivers/CMSIS/Include/core_cm4.h **** /**
 890:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 891:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:Drivers/CMSIS/Include/core_cm4.h ****   @{
 894:Drivers/CMSIS/Include/core_cm4.h ****  */
 895:Drivers/CMSIS/Include/core_cm4.h **** 
 896:Drivers/CMSIS/Include/core_cm4.h **** /**
 897:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 124


 898:Drivers/CMSIS/Include/core_cm4.h ****  */
 899:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 900:Drivers/CMSIS/Include/core_cm4.h **** {
 901:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
 913:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[1U];
 917:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[1U];
 921:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:Drivers/CMSIS/Include/core_cm4.h **** } DWT_Type;
 925:Drivers/CMSIS/Include/core_cm4.h **** 
 926:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Control Register Definitions */
 927:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:Drivers/CMSIS/Include/core_cm4.h **** 
 930:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:Drivers/CMSIS/Include/core_cm4.h **** 
 933:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:Drivers/CMSIS/Include/core_cm4.h **** 
 936:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:Drivers/CMSIS/Include/core_cm4.h **** 
 939:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:Drivers/CMSIS/Include/core_cm4.h **** 
 942:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:Drivers/CMSIS/Include/core_cm4.h **** 
 945:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:Drivers/CMSIS/Include/core_cm4.h **** 
 948:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:Drivers/CMSIS/Include/core_cm4.h **** 
 951:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:Drivers/CMSIS/Include/core_cm4.h **** 
 954:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 125


 955:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:Drivers/CMSIS/Include/core_cm4.h **** 
 957:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:Drivers/CMSIS/Include/core_cm4.h **** 
 960:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:Drivers/CMSIS/Include/core_cm4.h **** 
 963:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:Drivers/CMSIS/Include/core_cm4.h **** 
 966:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:Drivers/CMSIS/Include/core_cm4.h **** 
 969:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:Drivers/CMSIS/Include/core_cm4.h **** 
 972:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:Drivers/CMSIS/Include/core_cm4.h **** 
 975:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:Drivers/CMSIS/Include/core_cm4.h **** 
 978:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:Drivers/CMSIS/Include/core_cm4.h **** 
 981:Drivers/CMSIS/Include/core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:Drivers/CMSIS/Include/core_cm4.h **** 
 985:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:Drivers/CMSIS/Include/core_cm4.h **** 
 989:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:Drivers/CMSIS/Include/core_cm4.h **** 
 993:Drivers/CMSIS/Include/core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:Drivers/CMSIS/Include/core_cm4.h **** 
 997:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:Drivers/CMSIS/Include/core_cm4.h **** 
1001:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:Drivers/CMSIS/Include/core_cm4.h **** 
1005:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:Drivers/CMSIS/Include/core_cm4.h **** 
1009:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 126


1012:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:Drivers/CMSIS/Include/core_cm4.h **** 
1015:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:Drivers/CMSIS/Include/core_cm4.h **** 
1018:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:Drivers/CMSIS/Include/core_cm4.h **** 
1021:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:Drivers/CMSIS/Include/core_cm4.h **** 
1024:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:Drivers/CMSIS/Include/core_cm4.h **** 
1027:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:Drivers/CMSIS/Include/core_cm4.h **** 
1030:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:Drivers/CMSIS/Include/core_cm4.h **** 
1033:Drivers/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:Drivers/CMSIS/Include/core_cm4.h **** 
1035:Drivers/CMSIS/Include/core_cm4.h **** 
1036:Drivers/CMSIS/Include/core_cm4.h **** /**
1037:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1038:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:Drivers/CMSIS/Include/core_cm4.h ****   @{
1041:Drivers/CMSIS/Include/core_cm4.h ****  */
1042:Drivers/CMSIS/Include/core_cm4.h **** 
1043:Drivers/CMSIS/Include/core_cm4.h **** /**
1044:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:Drivers/CMSIS/Include/core_cm4.h ****  */
1046:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1047:Drivers/CMSIS/Include/core_cm4.h **** {
1048:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[2U];
1051:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[55U];
1053:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[131U];
1055:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[759U];
1059:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1060:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[1U];
1063:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[39U];
1067:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 127


1069:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED7[8U];
1070:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:Drivers/CMSIS/Include/core_cm4.h **** } TPI_Type;
1073:Drivers/CMSIS/Include/core_cm4.h **** 
1074:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:Drivers/CMSIS/Include/core_cm4.h **** 
1078:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:Drivers/CMSIS/Include/core_cm4.h **** 
1082:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:Drivers/CMSIS/Include/core_cm4.h **** 
1086:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:Drivers/CMSIS/Include/core_cm4.h **** 
1089:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:Drivers/CMSIS/Include/core_cm4.h **** 
1092:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:Drivers/CMSIS/Include/core_cm4.h **** 
1095:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:Drivers/CMSIS/Include/core_cm4.h **** 
1099:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:Drivers/CMSIS/Include/core_cm4.h **** 
1102:Drivers/CMSIS/Include/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:Drivers/CMSIS/Include/core_cm4.h **** 
1106:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x1UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:Drivers/CMSIS/Include/core_cm4.h **** 
1110:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:Drivers/CMSIS/Include/core_cm4.h **** 
1113:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x1UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:Drivers/CMSIS/Include/core_cm4.h **** 
1116:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:Drivers/CMSIS/Include/core_cm4.h **** 
1119:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:Drivers/CMSIS/Include/core_cm4.h **** 
1122:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:Drivers/CMSIS/Include/core_cm4.h **** 
1125:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 128


1126:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:Drivers/CMSIS/Include/core_cm4.h **** 
1128:Drivers/CMSIS/Include/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1130:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1131:Drivers/CMSIS/Include/core_cm4.h **** 
1132:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1133:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1134:Drivers/CMSIS/Include/core_cm4.h **** 
1135:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1136:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1137:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x1UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1138:Drivers/CMSIS/Include/core_cm4.h **** 
1139:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1140:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1141:Drivers/CMSIS/Include/core_cm4.h **** 
1142:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1143:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x1UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1144:Drivers/CMSIS/Include/core_cm4.h **** 
1145:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1146:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1147:Drivers/CMSIS/Include/core_cm4.h **** 
1148:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1149:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1150:Drivers/CMSIS/Include/core_cm4.h **** 
1151:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1152:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1153:Drivers/CMSIS/Include/core_cm4.h **** 
1154:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1155:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1156:Drivers/CMSIS/Include/core_cm4.h **** 
1157:Drivers/CMSIS/Include/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1158:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1159:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1160:Drivers/CMSIS/Include/core_cm4.h **** 
1161:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1162:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1163:Drivers/CMSIS/Include/core_cm4.h **** 
1164:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1165:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1166:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1167:Drivers/CMSIS/Include/core_cm4.h **** 
1168:Drivers/CMSIS/Include/core_cm4.h **** /* TPI DEVID Register Definitions */
1169:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1170:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1171:Drivers/CMSIS/Include/core_cm4.h **** 
1172:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1173:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1174:Drivers/CMSIS/Include/core_cm4.h **** 
1175:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1176:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1177:Drivers/CMSIS/Include/core_cm4.h **** 
1178:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1179:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1180:Drivers/CMSIS/Include/core_cm4.h **** 
1181:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1182:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 129


1183:Drivers/CMSIS/Include/core_cm4.h **** 
1184:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1185:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1186:Drivers/CMSIS/Include/core_cm4.h **** 
1187:Drivers/CMSIS/Include/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1188:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1189:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1190:Drivers/CMSIS/Include/core_cm4.h **** 
1191:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1192:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1193:Drivers/CMSIS/Include/core_cm4.h **** 
1194:Drivers/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1195:Drivers/CMSIS/Include/core_cm4.h **** 
1196:Drivers/CMSIS/Include/core_cm4.h **** 
1197:Drivers/CMSIS/Include/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1198:Drivers/CMSIS/Include/core_cm4.h **** /**
1199:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1200:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1201:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1202:Drivers/CMSIS/Include/core_cm4.h ****   @{
1203:Drivers/CMSIS/Include/core_cm4.h ****  */
1204:Drivers/CMSIS/Include/core_cm4.h **** 
1205:Drivers/CMSIS/Include/core_cm4.h **** /**
1206:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1207:Drivers/CMSIS/Include/core_cm4.h ****  */
1208:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1209:Drivers/CMSIS/Include/core_cm4.h **** {
1210:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1211:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1212:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1213:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1214:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1215:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1216:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1217:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1218:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1219:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1220:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1221:Drivers/CMSIS/Include/core_cm4.h **** } MPU_Type;
1222:Drivers/CMSIS/Include/core_cm4.h **** 
1223:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_RALIASES                  4U
1224:Drivers/CMSIS/Include/core_cm4.h **** 
1225:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Type Register Definitions */
1226:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1227:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1228:Drivers/CMSIS/Include/core_cm4.h **** 
1229:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1230:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1231:Drivers/CMSIS/Include/core_cm4.h **** 
1232:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1233:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1234:Drivers/CMSIS/Include/core_cm4.h **** 
1235:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Control Register Definitions */
1236:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1237:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1238:Drivers/CMSIS/Include/core_cm4.h **** 
1239:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 130


1240:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1241:Drivers/CMSIS/Include/core_cm4.h **** 
1242:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1243:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1244:Drivers/CMSIS/Include/core_cm4.h **** 
1245:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Region Number Register Definitions */
1246:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1247:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1248:Drivers/CMSIS/Include/core_cm4.h **** 
1249:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1250:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1251:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1252:Drivers/CMSIS/Include/core_cm4.h **** 
1253:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1254:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1255:Drivers/CMSIS/Include/core_cm4.h **** 
1256:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1257:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1258:Drivers/CMSIS/Include/core_cm4.h **** 
1259:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1260:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1261:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1262:Drivers/CMSIS/Include/core_cm4.h **** 
1263:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1264:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1265:Drivers/CMSIS/Include/core_cm4.h **** 
1266:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1267:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1268:Drivers/CMSIS/Include/core_cm4.h **** 
1269:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1270:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1271:Drivers/CMSIS/Include/core_cm4.h **** 
1272:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1273:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1274:Drivers/CMSIS/Include/core_cm4.h **** 
1275:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1276:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1277:Drivers/CMSIS/Include/core_cm4.h **** 
1278:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1279:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1280:Drivers/CMSIS/Include/core_cm4.h **** 
1281:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1282:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1283:Drivers/CMSIS/Include/core_cm4.h **** 
1284:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1285:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1286:Drivers/CMSIS/Include/core_cm4.h **** 
1287:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1288:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1289:Drivers/CMSIS/Include/core_cm4.h **** 
1290:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_MPU */
1291:Drivers/CMSIS/Include/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1292:Drivers/CMSIS/Include/core_cm4.h **** 
1293:Drivers/CMSIS/Include/core_cm4.h **** 
1294:Drivers/CMSIS/Include/core_cm4.h **** /**
1295:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1296:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 131


1297:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1298:Drivers/CMSIS/Include/core_cm4.h ****   @{
1299:Drivers/CMSIS/Include/core_cm4.h ****  */
1300:Drivers/CMSIS/Include/core_cm4.h **** 
1301:Drivers/CMSIS/Include/core_cm4.h **** /**
1302:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1303:Drivers/CMSIS/Include/core_cm4.h ****  */
1304:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1305:Drivers/CMSIS/Include/core_cm4.h **** {
1306:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
1307:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1308:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1309:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1310:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1311:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1312:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR2;                  /*!< Offset: 0x018 (R/ )  Media and FP Feature Register 2 
1313:Drivers/CMSIS/Include/core_cm4.h **** } FPU_Type;
1314:Drivers/CMSIS/Include/core_cm4.h **** 
1315:Drivers/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1316:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1317:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1318:Drivers/CMSIS/Include/core_cm4.h **** 
1319:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1320:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1321:Drivers/CMSIS/Include/core_cm4.h **** 
1322:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1323:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1324:Drivers/CMSIS/Include/core_cm4.h **** 
1325:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1326:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1327:Drivers/CMSIS/Include/core_cm4.h **** 
1328:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1329:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1330:Drivers/CMSIS/Include/core_cm4.h **** 
1331:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1332:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1333:Drivers/CMSIS/Include/core_cm4.h **** 
1334:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1335:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1336:Drivers/CMSIS/Include/core_cm4.h **** 
1337:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1338:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1339:Drivers/CMSIS/Include/core_cm4.h **** 
1340:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1341:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1342:Drivers/CMSIS/Include/core_cm4.h **** 
1343:Drivers/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1344:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1345:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1346:Drivers/CMSIS/Include/core_cm4.h **** 
1347:Drivers/CMSIS/Include/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1348:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1349:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1350:Drivers/CMSIS/Include/core_cm4.h **** 
1351:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1352:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1353:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 132


1354:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1355:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1356:Drivers/CMSIS/Include/core_cm4.h **** 
1357:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1358:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1359:Drivers/CMSIS/Include/core_cm4.h **** 
1360:Drivers/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1361:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1362:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1363:Drivers/CMSIS/Include/core_cm4.h **** 
1364:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1365:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1366:Drivers/CMSIS/Include/core_cm4.h **** 
1367:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1368:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1369:Drivers/CMSIS/Include/core_cm4.h **** 
1370:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1371:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1372:Drivers/CMSIS/Include/core_cm4.h **** 
1373:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1374:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1375:Drivers/CMSIS/Include/core_cm4.h **** 
1376:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1377:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1378:Drivers/CMSIS/Include/core_cm4.h **** 
1379:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1380:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1381:Drivers/CMSIS/Include/core_cm4.h **** 
1382:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1383:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1384:Drivers/CMSIS/Include/core_cm4.h **** 
1385:Drivers/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1386:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1387:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1388:Drivers/CMSIS/Include/core_cm4.h **** 
1389:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1390:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1391:Drivers/CMSIS/Include/core_cm4.h **** 
1392:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1393:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1394:Drivers/CMSIS/Include/core_cm4.h **** 
1395:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1396:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1397:Drivers/CMSIS/Include/core_cm4.h **** 
1398:Drivers/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 2 Definitions */
1399:Drivers/CMSIS/Include/core_cm4.h **** 
1400:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR2_VFP_Misc_Pos              4U                                            /*!< MVFR
1401:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR2_VFP_Misc_Msk             (0xFUL << FPU_MVFR2_VFP_Misc_Pos)              /*!< MVFR
1402:Drivers/CMSIS/Include/core_cm4.h **** 
1403:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_FPU */
1404:Drivers/CMSIS/Include/core_cm4.h **** 
1405:Drivers/CMSIS/Include/core_cm4.h **** 
1406:Drivers/CMSIS/Include/core_cm4.h **** /**
1407:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1408:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1409:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1410:Drivers/CMSIS/Include/core_cm4.h ****   @{
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 133


1411:Drivers/CMSIS/Include/core_cm4.h ****  */
1412:Drivers/CMSIS/Include/core_cm4.h **** 
1413:Drivers/CMSIS/Include/core_cm4.h **** /**
1414:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1415:Drivers/CMSIS/Include/core_cm4.h ****  */
1416:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1417:Drivers/CMSIS/Include/core_cm4.h **** {
1418:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1419:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1420:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1421:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1422:Drivers/CMSIS/Include/core_cm4.h **** } CoreDebug_Type;
1423:Drivers/CMSIS/Include/core_cm4.h **** 
1424:Drivers/CMSIS/Include/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1425:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1426:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1427:Drivers/CMSIS/Include/core_cm4.h **** 
1428:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1429:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1430:Drivers/CMSIS/Include/core_cm4.h **** 
1431:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1432:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1433:Drivers/CMSIS/Include/core_cm4.h **** 
1434:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1435:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1436:Drivers/CMSIS/Include/core_cm4.h **** 
1437:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1438:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1439:Drivers/CMSIS/Include/core_cm4.h **** 
1440:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1441:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1442:Drivers/CMSIS/Include/core_cm4.h **** 
1443:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1444:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1445:Drivers/CMSIS/Include/core_cm4.h **** 
1446:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1447:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1448:Drivers/CMSIS/Include/core_cm4.h **** 
1449:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1450:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1451:Drivers/CMSIS/Include/core_cm4.h **** 
1452:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1453:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1454:Drivers/CMSIS/Include/core_cm4.h **** 
1455:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1456:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1457:Drivers/CMSIS/Include/core_cm4.h **** 
1458:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1459:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1460:Drivers/CMSIS/Include/core_cm4.h **** 
1461:Drivers/CMSIS/Include/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1462:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1463:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1464:Drivers/CMSIS/Include/core_cm4.h **** 
1465:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1466:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1467:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 134


1468:Drivers/CMSIS/Include/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1469:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1470:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1471:Drivers/CMSIS/Include/core_cm4.h **** 
1472:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1473:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1474:Drivers/CMSIS/Include/core_cm4.h **** 
1475:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1476:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1477:Drivers/CMSIS/Include/core_cm4.h **** 
1478:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1479:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1480:Drivers/CMSIS/Include/core_cm4.h **** 
1481:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1482:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1483:Drivers/CMSIS/Include/core_cm4.h **** 
1484:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1485:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1486:Drivers/CMSIS/Include/core_cm4.h **** 
1487:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1488:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1489:Drivers/CMSIS/Include/core_cm4.h **** 
1490:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1491:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1492:Drivers/CMSIS/Include/core_cm4.h **** 
1493:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1494:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1495:Drivers/CMSIS/Include/core_cm4.h **** 
1496:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1497:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1498:Drivers/CMSIS/Include/core_cm4.h **** 
1499:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1500:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1501:Drivers/CMSIS/Include/core_cm4.h **** 
1502:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1503:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1504:Drivers/CMSIS/Include/core_cm4.h **** 
1505:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1506:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1507:Drivers/CMSIS/Include/core_cm4.h **** 
1508:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1509:Drivers/CMSIS/Include/core_cm4.h **** 
1510:Drivers/CMSIS/Include/core_cm4.h **** 
1511:Drivers/CMSIS/Include/core_cm4.h **** /**
1512:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
1513:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1514:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1515:Drivers/CMSIS/Include/core_cm4.h ****   @{
1516:Drivers/CMSIS/Include/core_cm4.h ****  */
1517:Drivers/CMSIS/Include/core_cm4.h **** 
1518:Drivers/CMSIS/Include/core_cm4.h **** /**
1519:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1520:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] field  Name of the register bit field.
1521:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1522:Drivers/CMSIS/Include/core_cm4.h ****   \return           Masked and shifted value.
1523:Drivers/CMSIS/Include/core_cm4.h **** */
1524:Drivers/CMSIS/Include/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 135


1525:Drivers/CMSIS/Include/core_cm4.h **** 
1526:Drivers/CMSIS/Include/core_cm4.h **** /**
1527:Drivers/CMSIS/Include/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1528:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] field  Name of the register bit field.
1529:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1530:Drivers/CMSIS/Include/core_cm4.h ****   \return           Masked and shifted bit field value.
1531:Drivers/CMSIS/Include/core_cm4.h **** */
1532:Drivers/CMSIS/Include/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1533:Drivers/CMSIS/Include/core_cm4.h **** 
1534:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1535:Drivers/CMSIS/Include/core_cm4.h **** 
1536:Drivers/CMSIS/Include/core_cm4.h **** 
1537:Drivers/CMSIS/Include/core_cm4.h **** /**
1538:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
1539:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1540:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1541:Drivers/CMSIS/Include/core_cm4.h ****   @{
1542:Drivers/CMSIS/Include/core_cm4.h ****  */
1543:Drivers/CMSIS/Include/core_cm4.h **** 
1544:Drivers/CMSIS/Include/core_cm4.h **** /* Memory mapping of Core Hardware */
1545:Drivers/CMSIS/Include/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1546:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1547:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1548:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1549:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1550:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1551:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1552:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1553:Drivers/CMSIS/Include/core_cm4.h **** 
1554:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1555:Drivers/CMSIS/Include/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1556:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1557:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1558:Drivers/CMSIS/Include/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1559:Drivers/CMSIS/Include/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1560:Drivers/CMSIS/Include/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1561:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1562:Drivers/CMSIS/Include/core_cm4.h **** 
1563:Drivers/CMSIS/Include/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1564:Drivers/CMSIS/Include/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1565:Drivers/CMSIS/Include/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1566:Drivers/CMSIS/Include/core_cm4.h **** #endif
1567:Drivers/CMSIS/Include/core_cm4.h **** 
1568:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1569:Drivers/CMSIS/Include/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1570:Drivers/CMSIS/Include/core_cm4.h **** 
1571:Drivers/CMSIS/Include/core_cm4.h **** /*@} */
1572:Drivers/CMSIS/Include/core_cm4.h **** 
1573:Drivers/CMSIS/Include/core_cm4.h **** 
1574:Drivers/CMSIS/Include/core_cm4.h **** 
1575:Drivers/CMSIS/Include/core_cm4.h **** /*******************************************************************************
1576:Drivers/CMSIS/Include/core_cm4.h ****  *                Hardware Abstraction Layer
1577:Drivers/CMSIS/Include/core_cm4.h ****   Core Function Interface contains:
1578:Drivers/CMSIS/Include/core_cm4.h ****   - Core NVIC Functions
1579:Drivers/CMSIS/Include/core_cm4.h ****   - Core SysTick Functions
1580:Drivers/CMSIS/Include/core_cm4.h ****   - Core Debug Functions
1581:Drivers/CMSIS/Include/core_cm4.h ****   - Core Register Access Functions
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 136


1582:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
1583:Drivers/CMSIS/Include/core_cm4.h **** /**
1584:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1585:Drivers/CMSIS/Include/core_cm4.h **** */
1586:Drivers/CMSIS/Include/core_cm4.h **** 
1587:Drivers/CMSIS/Include/core_cm4.h **** 
1588:Drivers/CMSIS/Include/core_cm4.h **** 
1589:Drivers/CMSIS/Include/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1590:Drivers/CMSIS/Include/core_cm4.h **** /**
1591:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1592:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1593:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1594:Drivers/CMSIS/Include/core_cm4.h ****   @{
1595:Drivers/CMSIS/Include/core_cm4.h ****  */
1596:Drivers/CMSIS/Include/core_cm4.h **** 
1597:Drivers/CMSIS/Include/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1598:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1599:Drivers/CMSIS/Include/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1600:Drivers/CMSIS/Include/core_cm4.h ****   #endif
1601:Drivers/CMSIS/Include/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1602:Drivers/CMSIS/Include/core_cm4.h **** #else
1603:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1604:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1605:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1606:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1607:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1608:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1609:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1610:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1611:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1612:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1613:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1614:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1615:Drivers/CMSIS/Include/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1616:Drivers/CMSIS/Include/core_cm4.h **** 
1617:Drivers/CMSIS/Include/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1618:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1619:Drivers/CMSIS/Include/core_cm4.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1620:Drivers/CMSIS/Include/core_cm4.h ****   #endif
1621:Drivers/CMSIS/Include/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1622:Drivers/CMSIS/Include/core_cm4.h **** #else
1623:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1624:Drivers/CMSIS/Include/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1625:Drivers/CMSIS/Include/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1626:Drivers/CMSIS/Include/core_cm4.h **** 
1627:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1628:Drivers/CMSIS/Include/core_cm4.h **** 
1629:Drivers/CMSIS/Include/core_cm4.h **** 
1630:Drivers/CMSIS/Include/core_cm4.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1631:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1632:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1633:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1634:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_HANDLER_FPU     (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after ret
1635:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_MSP_FPU  (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after retu
1636:Drivers/CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_PSP_FPU  (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after retu
1637:Drivers/CMSIS/Include/core_cm4.h **** 
1638:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 137


1639:Drivers/CMSIS/Include/core_cm4.h **** /**
1640:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Set Priority Grouping
1641:Drivers/CMSIS/Include/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1642:Drivers/CMSIS/Include/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1643:Drivers/CMSIS/Include/core_cm4.h ****            Only values from 0..7 are used.
1644:Drivers/CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1645:Drivers/CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1646:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1647:Drivers/CMSIS/Include/core_cm4.h ****  */
1648:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1649:Drivers/CMSIS/Include/core_cm4.h **** {
1650:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t reg_value;
1651:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1652:Drivers/CMSIS/Include/core_cm4.h **** 
1653:Drivers/CMSIS/Include/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1654:Drivers/CMSIS/Include/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1655:Drivers/CMSIS/Include/core_cm4.h ****   reg_value  =  (reg_value                                   |
1656:Drivers/CMSIS/Include/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1657:Drivers/CMSIS/Include/core_cm4.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key a
1658:Drivers/CMSIS/Include/core_cm4.h ****   SCB->AIRCR =  reg_value;
1659:Drivers/CMSIS/Include/core_cm4.h **** }
1660:Drivers/CMSIS/Include/core_cm4.h **** 
1661:Drivers/CMSIS/Include/core_cm4.h **** 
1662:Drivers/CMSIS/Include/core_cm4.h **** /**
1663:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Priority Grouping
1664:Drivers/CMSIS/Include/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1665:Drivers/CMSIS/Include/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1666:Drivers/CMSIS/Include/core_cm4.h ****  */
1667:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1668:Drivers/CMSIS/Include/core_cm4.h **** {
1669:Drivers/CMSIS/Include/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1670:Drivers/CMSIS/Include/core_cm4.h **** }
1671:Drivers/CMSIS/Include/core_cm4.h **** 
1672:Drivers/CMSIS/Include/core_cm4.h **** 
1673:Drivers/CMSIS/Include/core_cm4.h **** /**
1674:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Enable Interrupt
1675:Drivers/CMSIS/Include/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1676:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1677:Drivers/CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1678:Drivers/CMSIS/Include/core_cm4.h ****  */
1679:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1680:Drivers/CMSIS/Include/core_cm4.h **** {
1681:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1682:Drivers/CMSIS/Include/core_cm4.h ****   {
1683:Drivers/CMSIS/Include/core_cm4.h ****     __COMPILER_BARRIER();
1684:Drivers/CMSIS/Include/core_cm4.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1685:Drivers/CMSIS/Include/core_cm4.h ****     __COMPILER_BARRIER();
1686:Drivers/CMSIS/Include/core_cm4.h ****   }
1687:Drivers/CMSIS/Include/core_cm4.h **** }
1688:Drivers/CMSIS/Include/core_cm4.h **** 
1689:Drivers/CMSIS/Include/core_cm4.h **** 
1690:Drivers/CMSIS/Include/core_cm4.h **** /**
1691:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Interrupt Enable status
1692:Drivers/CMSIS/Include/core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1693:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1694:Drivers/CMSIS/Include/core_cm4.h ****   \return             0  Interrupt is not enabled.
1695:Drivers/CMSIS/Include/core_cm4.h ****   \return             1  Interrupt is enabled.
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 138


1696:Drivers/CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1697:Drivers/CMSIS/Include/core_cm4.h ****  */
1698:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1699:Drivers/CMSIS/Include/core_cm4.h **** {
1700:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1701:Drivers/CMSIS/Include/core_cm4.h ****   {
1702:Drivers/CMSIS/Include/core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1703:Drivers/CMSIS/Include/core_cm4.h ****   }
1704:Drivers/CMSIS/Include/core_cm4.h ****   else
1705:Drivers/CMSIS/Include/core_cm4.h ****   {
1706:Drivers/CMSIS/Include/core_cm4.h ****     return(0U);
1707:Drivers/CMSIS/Include/core_cm4.h ****   }
1708:Drivers/CMSIS/Include/core_cm4.h **** }
1709:Drivers/CMSIS/Include/core_cm4.h **** 
1710:Drivers/CMSIS/Include/core_cm4.h **** 
1711:Drivers/CMSIS/Include/core_cm4.h **** /**
1712:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Disable Interrupt
1713:Drivers/CMSIS/Include/core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1714:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1715:Drivers/CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1716:Drivers/CMSIS/Include/core_cm4.h ****  */
1717:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 449              		.loc 4 1717 22 view .LVU120
 450              	.LBB78:
1718:Drivers/CMSIS/Include/core_cm4.h **** {
1719:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
 451              		.loc 4 1719 3 view .LVU121
1720:Drivers/CMSIS/Include/core_cm4.h ****   {
1721:Drivers/CMSIS/Include/core_cm4.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 452              		.loc 4 1721 5 view .LVU122
 453              		.loc 4 1721 43 is_stmt 0 view .LVU123
 454 0002 074B     		ldr	r3, .L21
 455 0004 1022     		movs	r2, #16
 456 0006 C3F88420 		str	r2, [r3, #132]
1722:Drivers/CMSIS/Include/core_cm4.h ****     __DSB();
 457              		.loc 4 1722 5 is_stmt 1 view .LVU124
 458              	.LBB79:
 459              	.LBI79:
 460              		.file 5 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 139


  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 140


  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 141


 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 142


 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 143


 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 144


 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 145


 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 146


 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 147


 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 148


 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 149


 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 150


 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 151


 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 152


 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 153


 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 154


 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 155


 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 461              		.loc 5 944 27 view .LVU125
 462              	.LBB80:
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 463              		.loc 5 946 3 view .LVU126
 464              		.syntax unified
 465              	@ 946 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 466 000a BFF34F8F 		dsb 0xF
 467              	@ 0 "" 2
 468              		.thumb
 469              		.syntax unified
 470              	.LBE80:
 471              	.LBE79:
1723:Drivers/CMSIS/Include/core_cm4.h ****     __ISB();
 472              		.loc 4 1723 5 view .LVU127
 473              	.LBB81:
 474              	.LBI81:
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 475              		.loc 5 933 27 view .LVU128
 476              	.LBB82:
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 477              		.loc 5 935 3 view .LVU129
 478              		.syntax unified
 479              	@ 935 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 480 000e BFF36F8F 		isb 0xF
 481              	@ 0 "" 2
 482              	.LVL23:
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483              		.loc 5 935 3 is_stmt 0 view .LVU130
 484              		.thumb
 485              		.syntax unified
 486              	.LBE82:
 487              	.LBE81:
 488              	.LBE78:
 489              	.LBE77:
 790:Core/Src/main.c ****   
 791:Core/Src/main.c ****   /* Error handling example :
 792:Core/Src/main.c ****     - Read USART ISR register to identify flag that leads to IT raising
 793:Core/Src/main.c ****     - Perform corresponding error handling treatment according to flag
 794:Core/Src/main.c ****   */
 795:Core/Src/main.c ****   isr_reg = LL_USART_ReadReg(USART1, ISR);
 490              		.loc 1 795 3 is_stmt 1 view .LVU131
 491              		.loc 1 795 13 is_stmt 0 view .LVU132
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 156


 492 0012 044B     		ldr	r3, .L21+4
 493 0014 DB69     		ldr	r3, [r3, #28]
 494              		.loc 1 795 11 view .LVU133
 495 0016 0193     		str	r3, [sp, #4]
 796:Core/Src/main.c ****   if (isr_reg & LL_USART_ISR_NE)
 496              		.loc 1 796 3 is_stmt 1 view .LVU134
 497              		.loc 1 796 15 is_stmt 0 view .LVU135
 498 0018 019B     		ldr	r3, [sp, #4]
 797:Core/Src/main.c ****   {
 798:Core/Src/main.c ****     /* Turn LED3 on: Transfer error in reception/transmission process */
 799:Core/Src/main.c ****     // BSP_LED_On(LED3);
 800:Core/Src/main.c ****   }
 801:Core/Src/main.c ****   else
 802:Core/Src/main.c ****   {
 803:Core/Src/main.c ****     /* Turn LED3 on: Transfer error in reception/transmission process */
 804:Core/Src/main.c ****     // BSP_LED_On(LED3);
 805:Core/Src/main.c ****   }
 499              		.loc 1 805 3 is_stmt 1 view .LVU136
 806:Core/Src/main.c **** }
 500              		.loc 1 806 1 is_stmt 0 view .LVU137
 501 001a 02B0     		add	sp, sp, #8
 502              	.LCFI7:
 503              		.cfi_def_cfa_offset 0
 504              		@ sp needed
 505 001c 7047     		bx	lr
 506              	.L22:
 507 001e 00BF     		.align	2
 508              	.L21:
 509 0020 00E100E0 		.word	-536813312
 510 0024 00380140 		.word	1073821696
 511              		.cfi_endproc
 512              	.LFE1838:
 514              		.section	.text.Error_Handler,"ax",%progbits
 515              		.align	1
 516              		.global	Error_Handler
 517              		.syntax unified
 518              		.thumb
 519              		.thumb_func
 520              		.fpu fpv4-sp-d16
 522              	Error_Handler:
 523              	.LFB1839:
 807:Core/Src/main.c **** 
 808:Core/Src/main.c **** /* USER CODE END 4 */
 809:Core/Src/main.c **** 
 810:Core/Src/main.c **** /**
 811:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 812:Core/Src/main.c ****   * @retval None
 813:Core/Src/main.c ****   */
 814:Core/Src/main.c **** void Error_Handler(void)
 815:Core/Src/main.c **** {
 524              		.loc 1 815 1 is_stmt 1 view -0
 525              		.cfi_startproc
 526              		@ Volatile: function does not return.
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 816:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 157


 817:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 818:Core/Src/main.c ****   __disable_irq();
 530              		.loc 1 818 3 view .LVU139
 531              	.LBB83:
 532              	.LBI83:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 533              		.loc 5 207 27 view .LVU140
 534              	.LBB84:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535              		.loc 5 209 3 view .LVU141
 536              		.syntax unified
 537              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 538 0000 72B6     		cpsid i
 539              	@ 0 "" 2
 540              		.thumb
 541              		.syntax unified
 542              	.L24:
 543              	.LBE84:
 544              	.LBE83:
 819:Core/Src/main.c ****   while (1)
 545              		.loc 1 819 3 discriminator 1 view .LVU142
 820:Core/Src/main.c ****   {
 821:Core/Src/main.c ****   }
 546              		.loc 1 821 3 discriminator 1 view .LVU143
 819:Core/Src/main.c ****   while (1)
 547              		.loc 1 819 9 discriminator 1 view .LVU144
 548 0002 FEE7     		b	.L24
 549              		.cfi_endproc
 550              	.LFE1839:
 552              		.section	.text.MX_IPCC_Init,"ax",%progbits
 553              		.align	1
 554              		.syntax unified
 555              		.thumb
 556              		.thumb_func
 557              		.fpu fpv4-sp-d16
 559              	MX_IPCC_Init:
 560              	.LFB1828:
 374:Core/Src/main.c **** 
 561              		.loc 1 374 1 view -0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 0
 564              		@ frame_needed = 0, uses_anonymous_args = 0
 565 0000 08B5     		push	{r3, lr}
 566              	.LCFI8:
 567              		.cfi_def_cfa_offset 8
 568              		.cfi_offset 3, -8
 569              		.cfi_offset 14, -4
 383:Core/Src/main.c ****   if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 570              		.loc 1 383 3 view .LVU146
 383:Core/Src/main.c ****   if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 571              		.loc 1 383 18 is_stmt 0 view .LVU147
 572 0002 0448     		ldr	r0, .L29
 573 0004 044B     		ldr	r3, .L29+4
 574 0006 0360     		str	r3, [r0]
 384:Core/Src/main.c ****   {
 575              		.loc 1 384 3 is_stmt 1 view .LVU148
 384:Core/Src/main.c ****   {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 158


 576              		.loc 1 384 7 is_stmt 0 view .LVU149
 577 0008 FFF7FEFF 		bl	HAL_IPCC_Init
 578              	.LVL24:
 384:Core/Src/main.c ****   {
 579              		.loc 1 384 6 view .LVU150
 580 000c 00B9     		cbnz	r0, .L28
 392:Core/Src/main.c **** 
 581              		.loc 1 392 1 view .LVU151
 582 000e 08BD     		pop	{r3, pc}
 583              	.L28:
 386:Core/Src/main.c ****   }
 584              		.loc 1 386 5 is_stmt 1 view .LVU152
 585 0010 FFF7FEFF 		bl	Error_Handler
 586              	.LVL25:
 587              	.L30:
 588              		.align	2
 589              	.L29:
 590 0014 00000000 		.word	hipcc
 591 0018 000C0058 		.word	1476398080
 592              		.cfi_endproc
 593              	.LFE1828:
 595              		.section	.text.MX_RTC_Init,"ax",%progbits
 596              		.align	1
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 600              		.fpu fpv4-sp-d16
 602              	MX_RTC_Init:
 603              	.LFB1833:
 559:Core/Src/main.c **** 
 604              		.loc 1 559 1 view -0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 64
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608 0000 10B5     		push	{r4, lr}
 609              	.LCFI9:
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 4, -8
 612              		.cfi_offset 14, -4
 613 0002 90B0     		sub	sp, sp, #64
 614              	.LCFI10:
 615              		.cfi_def_cfa_offset 72
 565:Core/Src/main.c ****   RTC_DateTypeDef sDate = {0};
 616              		.loc 1 565 3 view .LVU154
 565:Core/Src/main.c ****   RTC_DateTypeDef sDate = {0};
 617              		.loc 1 565 19 is_stmt 0 view .LVU155
 618 0004 0024     		movs	r4, #0
 619 0006 0B94     		str	r4, [sp, #44]
 620 0008 0C94     		str	r4, [sp, #48]
 621 000a 0D94     		str	r4, [sp, #52]
 622 000c 0E94     		str	r4, [sp, #56]
 623 000e 0F94     		str	r4, [sp, #60]
 566:Core/Src/main.c ****   RTC_AlarmTypeDef sAlarm = {0};
 624              		.loc 1 566 3 is_stmt 1 view .LVU156
 566:Core/Src/main.c ****   RTC_AlarmTypeDef sAlarm = {0};
 625              		.loc 1 566 19 is_stmt 0 view .LVU157
 626 0010 0A94     		str	r4, [sp, #40]
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 159


 567:Core/Src/main.c **** 
 627              		.loc 1 567 3 is_stmt 1 view .LVU158
 567:Core/Src/main.c **** 
 628              		.loc 1 567 20 is_stmt 0 view .LVU159
 629 0012 2822     		movs	r2, #40
 630 0014 2146     		mov	r1, r4
 631 0016 6846     		mov	r0, sp
 632 0018 FFF7FEFF 		bl	memset
 633              	.LVL26:
 574:Core/Src/main.c ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 634              		.loc 1 574 3 is_stmt 1 view .LVU160
 574:Core/Src/main.c ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 635              		.loc 1 574 17 is_stmt 0 view .LVU161
 636 001c 3648     		ldr	r0, .L45
 637 001e 374B     		ldr	r3, .L45+4
 638 0020 0360     		str	r3, [r0]
 575:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 639              		.loc 1 575 3 is_stmt 1 view .LVU162
 575:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 640              		.loc 1 575 24 is_stmt 0 view .LVU163
 641 0022 4460     		str	r4, [r0, #4]
 576:Core/Src/main.c ****   hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 642              		.loc 1 576 3 is_stmt 1 view .LVU164
 576:Core/Src/main.c ****   hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 643              		.loc 1 576 26 is_stmt 0 view .LVU165
 644 0024 0F23     		movs	r3, #15
 645 0026 8360     		str	r3, [r0, #8]
 577:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 646              		.loc 1 577 3 is_stmt 1 view .LVU166
 577:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 647              		.loc 1 577 25 is_stmt 0 view .LVU167
 648 0028 47F6FF73 		movw	r3, #32767
 649 002c C360     		str	r3, [r0, #12]
 578:Core/Src/main.c ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 650              		.loc 1 578 3 is_stmt 1 view .LVU168
 578:Core/Src/main.c ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 651              		.loc 1 578 20 is_stmt 0 view .LVU169
 652 002e 0461     		str	r4, [r0, #16]
 579:Core/Src/main.c ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 653              		.loc 1 579 3 is_stmt 1 view .LVU170
 579:Core/Src/main.c ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 654              		.loc 1 579 28 is_stmt 0 view .LVU171
 655 0030 8461     		str	r4, [r0, #24]
 580:Core/Src/main.c ****   hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 656              		.loc 1 580 3 is_stmt 1 view .LVU172
 580:Core/Src/main.c ****   hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 657              		.loc 1 580 24 is_stmt 0 view .LVU173
 658 0032 C461     		str	r4, [r0, #28]
 581:Core/Src/main.c ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 659              		.loc 1 581 3 is_stmt 1 view .LVU174
 581:Core/Src/main.c ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 660              		.loc 1 581 25 is_stmt 0 view .LVU175
 661 0034 4461     		str	r4, [r0, #20]
 582:Core/Src/main.c ****   {
 662              		.loc 1 582 3 is_stmt 1 view .LVU176
 582:Core/Src/main.c ****   {
 663              		.loc 1 582 7 is_stmt 0 view .LVU177
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 160


 664 0036 FFF7FEFF 		bl	HAL_RTC_Init
 665              	.LVL27:
 582:Core/Src/main.c ****   {
 666              		.loc 1 582 6 view .LVU178
 667 003a 0028     		cmp	r0, #0
 668 003c 4FD1     		bne	.L39
 593:Core/Src/main.c ****   sTime.Minutes = 0x0;
 669              		.loc 1 593 3 is_stmt 1 view .LVU179
 593:Core/Src/main.c ****   sTime.Minutes = 0x0;
 670              		.loc 1 593 15 is_stmt 0 view .LVU180
 671 003e 0023     		movs	r3, #0
 672 0040 8DF82C30 		strb	r3, [sp, #44]
 594:Core/Src/main.c ****   sTime.Seconds = 0x0;
 673              		.loc 1 594 3 is_stmt 1 view .LVU181
 594:Core/Src/main.c ****   sTime.Seconds = 0x0;
 674              		.loc 1 594 17 is_stmt 0 view .LVU182
 675 0044 8DF82D30 		strb	r3, [sp, #45]
 595:Core/Src/main.c ****   sTime.SubSeconds = 0x0;
 676              		.loc 1 595 3 is_stmt 1 view .LVU183
 595:Core/Src/main.c ****   sTime.SubSeconds = 0x0;
 677              		.loc 1 595 17 is_stmt 0 view .LVU184
 678 0048 8DF82E30 		strb	r3, [sp, #46]
 596:Core/Src/main.c ****   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 679              		.loc 1 596 3 is_stmt 1 view .LVU185
 596:Core/Src/main.c ****   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 680              		.loc 1 596 20 is_stmt 0 view .LVU186
 681 004c 0C93     		str	r3, [sp, #48]
 597:Core/Src/main.c ****   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 682              		.loc 1 597 3 is_stmt 1 view .LVU187
 597:Core/Src/main.c ****   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 683              		.loc 1 597 24 is_stmt 0 view .LVU188
 684 004e 0E93     		str	r3, [sp, #56]
 598:Core/Src/main.c ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 685              		.loc 1 598 3 is_stmt 1 view .LVU189
 598:Core/Src/main.c ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 686              		.loc 1 598 24 is_stmt 0 view .LVU190
 687 0050 0F93     		str	r3, [sp, #60]
 599:Core/Src/main.c ****   {
 688              		.loc 1 599 3 is_stmt 1 view .LVU191
 599:Core/Src/main.c ****   {
 689              		.loc 1 599 7 is_stmt 0 view .LVU192
 690 0052 0122     		movs	r2, #1
 691 0054 0BA9     		add	r1, sp, #44
 692 0056 2848     		ldr	r0, .L45
 693 0058 FFF7FEFF 		bl	HAL_RTC_SetTime
 694              	.LVL28:
 599:Core/Src/main.c ****   {
 695              		.loc 1 599 6 view .LVU193
 696 005c 0028     		cmp	r0, #0
 697 005e 40D1     		bne	.L40
 603:Core/Src/main.c ****   sDate.Month = RTC_MONTH_JANUARY;
 698              		.loc 1 603 3 is_stmt 1 view .LVU194
 603:Core/Src/main.c ****   sDate.Month = RTC_MONTH_JANUARY;
 699              		.loc 1 603 17 is_stmt 0 view .LVU195
 700 0060 0122     		movs	r2, #1
 701 0062 8DF82820 		strb	r2, [sp, #40]
 604:Core/Src/main.c ****   sDate.Date = 0x1;
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 161


 702              		.loc 1 604 3 is_stmt 1 view .LVU196
 604:Core/Src/main.c ****   sDate.Date = 0x1;
 703              		.loc 1 604 15 is_stmt 0 view .LVU197
 704 0066 8DF82920 		strb	r2, [sp, #41]
 605:Core/Src/main.c ****   sDate.Year = 0x0;
 705              		.loc 1 605 3 is_stmt 1 view .LVU198
 605:Core/Src/main.c ****   sDate.Year = 0x0;
 706              		.loc 1 605 14 is_stmt 0 view .LVU199
 707 006a 8DF82A20 		strb	r2, [sp, #42]
 606:Core/Src/main.c ****   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 708              		.loc 1 606 3 is_stmt 1 view .LVU200
 606:Core/Src/main.c ****   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 709              		.loc 1 606 14 is_stmt 0 view .LVU201
 710 006e 0023     		movs	r3, #0
 711 0070 8DF82B30 		strb	r3, [sp, #43]
 607:Core/Src/main.c ****   {
 712              		.loc 1 607 3 is_stmt 1 view .LVU202
 607:Core/Src/main.c ****   {
 713              		.loc 1 607 7 is_stmt 0 view .LVU203
 714 0074 0AA9     		add	r1, sp, #40
 715 0076 2048     		ldr	r0, .L45
 716 0078 FFF7FEFF 		bl	HAL_RTC_SetDate
 717              	.LVL29:
 607:Core/Src/main.c ****   {
 718              		.loc 1 607 6 view .LVU204
 719 007c 0028     		cmp	r0, #0
 720 007e 32D1     		bne	.L41
 613:Core/Src/main.c ****   sAlarm.AlarmTime.Minutes = 0x0;
 721              		.loc 1 613 3 is_stmt 1 view .LVU205
 613:Core/Src/main.c ****   sAlarm.AlarmTime.Minutes = 0x0;
 722              		.loc 1 613 26 is_stmt 0 view .LVU206
 723 0080 0023     		movs	r3, #0
 724 0082 8DF80030 		strb	r3, [sp]
 614:Core/Src/main.c ****   sAlarm.AlarmTime.Seconds = 0x30;
 725              		.loc 1 614 3 is_stmt 1 view .LVU207
 614:Core/Src/main.c ****   sAlarm.AlarmTime.Seconds = 0x30;
 726              		.loc 1 614 28 is_stmt 0 view .LVU208
 727 0086 8DF80130 		strb	r3, [sp, #1]
 615:Core/Src/main.c ****   sAlarm.AlarmTime.SubSeconds = 0x0;
 728              		.loc 1 615 3 is_stmt 1 view .LVU209
 615:Core/Src/main.c ****   sAlarm.AlarmTime.SubSeconds = 0x0;
 729              		.loc 1 615 28 is_stmt 0 view .LVU210
 730 008a 3022     		movs	r2, #48
 731 008c 8DF80220 		strb	r2, [sp, #2]
 616:Core/Src/main.c ****   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 732              		.loc 1 616 3 is_stmt 1 view .LVU211
 616:Core/Src/main.c ****   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 733              		.loc 1 616 31 is_stmt 0 view .LVU212
 734 0090 0193     		str	r3, [sp, #4]
 617:Core/Src/main.c ****   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 735              		.loc 1 617 3 is_stmt 1 view .LVU213
 617:Core/Src/main.c ****   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 736              		.loc 1 617 35 is_stmt 0 view .LVU214
 737 0092 0393     		str	r3, [sp, #12]
 618:Core/Src/main.c ****   sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 738              		.loc 1 618 3 is_stmt 1 view .LVU215
 618:Core/Src/main.c ****   sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 162


 739              		.loc 1 618 35 is_stmt 0 view .LVU216
 740 0094 0493     		str	r3, [sp, #16]
 619:Core/Src/main.c ****                               |RTC_ALARMMASK_MINUTES;
 741              		.loc 1 619 3 is_stmt 1 view .LVU217
 619:Core/Src/main.c ****                               |RTC_ALARMMASK_MINUTES;
 742              		.loc 1 619 20 is_stmt 0 view .LVU218
 743 0096 1A4A     		ldr	r2, .L45+8
 744 0098 0592     		str	r2, [sp, #20]
 621:Core/Src/main.c ****   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 745              		.loc 1 621 3 is_stmt 1 view .LVU219
 621:Core/Src/main.c ****   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 746              		.loc 1 621 29 is_stmt 0 view .LVU220
 747 009a 0693     		str	r3, [sp, #24]
 622:Core/Src/main.c ****   sAlarm.AlarmDateWeekDay = 0x1;
 748              		.loc 1 622 3 is_stmt 1 view .LVU221
 622:Core/Src/main.c ****   sAlarm.AlarmDateWeekDay = 0x1;
 749              		.loc 1 622 30 is_stmt 0 view .LVU222
 750 009c 0793     		str	r3, [sp, #28]
 623:Core/Src/main.c ****   sAlarm.Alarm = RTC_ALARM_A;
 751              		.loc 1 623 3 is_stmt 1 view .LVU223
 623:Core/Src/main.c ****   sAlarm.Alarm = RTC_ALARM_A;
 752              		.loc 1 623 27 is_stmt 0 view .LVU224
 753 009e 0122     		movs	r2, #1
 754 00a0 8DF82020 		strb	r2, [sp, #32]
 624:Core/Src/main.c ****   if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 755              		.loc 1 624 3 is_stmt 1 view .LVU225
 624:Core/Src/main.c ****   if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 756              		.loc 1 624 16 is_stmt 0 view .LVU226
 757 00a4 4FF48073 		mov	r3, #256
 758 00a8 0993     		str	r3, [sp, #36]
 625:Core/Src/main.c ****   {
 759              		.loc 1 625 3 is_stmt 1 view .LVU227
 625:Core/Src/main.c ****   {
 760              		.loc 1 625 7 is_stmt 0 view .LVU228
 761 00aa 6946     		mov	r1, sp
 762 00ac 1248     		ldr	r0, .L45
 763 00ae FFF7FEFF 		bl	HAL_RTC_SetAlarm_IT
 764              	.LVL30:
 625:Core/Src/main.c ****   {
 765              		.loc 1 625 6 view .LVU229
 766 00b2 D0B9     		cbnz	r0, .L42
 631:Core/Src/main.c ****   {
 767              		.loc 1 631 3 is_stmt 1 view .LVU230
 631:Core/Src/main.c ****   {
 768              		.loc 1 631 7 is_stmt 0 view .LVU231
 769 00b4 0022     		movs	r2, #0
 770 00b6 4FF6FF71 		movw	r1, #65535
 771 00ba 0F48     		ldr	r0, .L45
 772 00bc FFF7FEFF 		bl	HAL_RTCEx_SetWakeUpTimer_IT
 773              	.LVL31:
 631:Core/Src/main.c ****   {
 774              		.loc 1 631 6 view .LVU232
 775 00c0 A8B9     		cbnz	r0, .L43
 637:Core/Src/main.c ****   {
 776              		.loc 1 637 3 is_stmt 1 view .LVU233
 637:Core/Src/main.c ****   {
 777              		.loc 1 637 7 is_stmt 0 view .LVU234
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 163


 778 00c2 0022     		movs	r2, #0
 779 00c4 6946     		mov	r1, sp
 780 00c6 0C48     		ldr	r0, .L45
 781 00c8 FFF7FEFF 		bl	HAL_RTC_SetAlarm_IT
 782              	.LVL32:
 637:Core/Src/main.c ****   {
 783              		.loc 1 637 6 view .LVU235
 784 00cc 88B9     		cbnz	r0, .L44
 643:Core/Src/main.c ****   /* USER CODE END RTC_Init 2 */
 785              		.loc 1 643 4 is_stmt 1 view .LVU236
 786 00ce 0A4B     		ldr	r3, .L45
 787 00d0 1A68     		ldr	r2, [r3]
 788 00d2 9368     		ldr	r3, [r2, #8]
 789 00d4 23F48063 		bic	r3, r3, #1024
 790 00d8 9360     		str	r3, [r2, #8]
 646:Core/Src/main.c **** 
 791              		.loc 1 646 1 is_stmt 0 view .LVU237
 792 00da 10B0     		add	sp, sp, #64
 793              	.LCFI11:
 794              		.cfi_remember_state
 795              		.cfi_def_cfa_offset 8
 796              		@ sp needed
 797 00dc 10BD     		pop	{r4, pc}
 798              	.L39:
 799              	.LCFI12:
 800              		.cfi_restore_state
 584:Core/Src/main.c ****   }
 801              		.loc 1 584 5 is_stmt 1 view .LVU238
 802 00de FFF7FEFF 		bl	Error_Handler
 803              	.LVL33:
 804              	.L40:
 601:Core/Src/main.c ****   }
 805              		.loc 1 601 5 view .LVU239
 806 00e2 FFF7FEFF 		bl	Error_Handler
 807              	.LVL34:
 808              	.L41:
 609:Core/Src/main.c ****   }
 809              		.loc 1 609 5 view .LVU240
 810 00e6 FFF7FEFF 		bl	Error_Handler
 811              	.LVL35:
 812              	.L42:
 627:Core/Src/main.c ****   }
 813              		.loc 1 627 5 view .LVU241
 814 00ea FFF7FEFF 		bl	Error_Handler
 815              	.LVL36:
 816              	.L43:
 633:Core/Src/main.c ****   }
 817              		.loc 1 633 5 view .LVU242
 818 00ee FFF7FEFF 		bl	Error_Handler
 819              	.LVL37:
 820              	.L44:
 639:Core/Src/main.c ****   }
 821              		.loc 1 639 5 view .LVU243
 822 00f2 FFF7FEFF 		bl	Error_Handler
 823              	.LVL38:
 824              	.L46:
 825 00f6 00BF     		.align	2
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 164


 826              	.L45:
 827 00f8 00000000 		.word	hrtc
 828 00fc 00280040 		.word	1073752064
 829 0100 00808080 		.word	-2139062272
 830              		.cfi_endproc
 831              	.LFE1833:
 833              		.section	.text.MX_RNG_Init,"ax",%progbits
 834              		.align	1
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 838              		.fpu fpv4-sp-d16
 840              	MX_RNG_Init:
 841              	.LFB1832:
 532:Core/Src/main.c **** 
 842              		.loc 1 532 1 view -0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 0
 845              		@ frame_needed = 0, uses_anonymous_args = 0
 846 0000 08B5     		push	{r3, lr}
 847              	.LCFI13:
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 3, -8
 850              		.cfi_offset 14, -4
 541:Core/Src/main.c ****   hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 851              		.loc 1 541 3 view .LVU245
 541:Core/Src/main.c ****   hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 852              		.loc 1 541 17 is_stmt 0 view .LVU246
 853 0002 0548     		ldr	r0, .L51
 854 0004 054B     		ldr	r3, .L51+4
 855 0006 0360     		str	r3, [r0]
 542:Core/Src/main.c ****   if (HAL_RNG_Init(&hrng) != HAL_OK)
 856              		.loc 1 542 3 is_stmt 1 view .LVU247
 542:Core/Src/main.c ****   if (HAL_RNG_Init(&hrng) != HAL_OK)
 857              		.loc 1 542 33 is_stmt 0 view .LVU248
 858 0008 0023     		movs	r3, #0
 859 000a 4360     		str	r3, [r0, #4]
 543:Core/Src/main.c ****   {
 860              		.loc 1 543 3 is_stmt 1 view .LVU249
 543:Core/Src/main.c ****   {
 861              		.loc 1 543 7 is_stmt 0 view .LVU250
 862 000c FFF7FEFF 		bl	HAL_RNG_Init
 863              	.LVL39:
 543:Core/Src/main.c ****   {
 864              		.loc 1 543 6 view .LVU251
 865 0010 00B9     		cbnz	r0, .L50
 551:Core/Src/main.c **** 
 866              		.loc 1 551 1 view .LVU252
 867 0012 08BD     		pop	{r3, pc}
 868              	.L50:
 545:Core/Src/main.c ****   }
 869              		.loc 1 545 5 is_stmt 1 view .LVU253
 870 0014 FFF7FEFF 		bl	Error_Handler
 871              	.LVL40:
 872              	.L52:
 873              		.align	2
 874              	.L51:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 165


 875 0018 00000000 		.word	hrng
 876 001c 00100058 		.word	1476399104
 877              		.cfi_endproc
 878              	.LFE1832:
 880              		.section	.text.MX_ADC1_Init,"ax",%progbits
 881              		.align	1
 882              		.syntax unified
 883              		.thumb
 884              		.thumb_func
 885              		.fpu fpv4-sp-d16
 887              	MX_ADC1_Init:
 888              	.LFB1827:
 318:Core/Src/main.c **** 
 889              		.loc 1 318 1 view -0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 24
 892              		@ frame_needed = 0, uses_anonymous_args = 0
 893 0000 00B5     		push	{lr}
 894              	.LCFI14:
 895              		.cfi_def_cfa_offset 4
 896              		.cfi_offset 14, -4
 897 0002 87B0     		sub	sp, sp, #28
 898              	.LCFI15:
 899              		.cfi_def_cfa_offset 32
 324:Core/Src/main.c **** 
 900              		.loc 1 324 3 view .LVU255
 324:Core/Src/main.c **** 
 901              		.loc 1 324 26 is_stmt 0 view .LVU256
 902 0004 0023     		movs	r3, #0
 903 0006 0093     		str	r3, [sp]
 904 0008 0193     		str	r3, [sp, #4]
 905 000a 0293     		str	r3, [sp, #8]
 906 000c 0393     		str	r3, [sp, #12]
 907 000e 0493     		str	r3, [sp, #16]
 908 0010 0593     		str	r3, [sp, #20]
 331:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 909              		.loc 1 331 3 is_stmt 1 view .LVU257
 331:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 910              		.loc 1 331 18 is_stmt 0 view .LVU258
 911 0012 1948     		ldr	r0, .L59
 912 0014 194A     		ldr	r2, .L59+4
 913 0016 0260     		str	r2, [r0]
 332:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 914              		.loc 1 332 3 is_stmt 1 view .LVU259
 332:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 915              		.loc 1 332 29 is_stmt 0 view .LVU260
 916 0018 4FF42012 		mov	r2, #2621440
 917 001c 4260     		str	r2, [r0, #4]
 333:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 918              		.loc 1 333 3 is_stmt 1 view .LVU261
 333:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 919              		.loc 1 333 25 is_stmt 0 view .LVU262
 920 001e 8360     		str	r3, [r0, #8]
 334:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 921              		.loc 1 334 3 is_stmt 1 view .LVU263
 334:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 922              		.loc 1 334 24 is_stmt 0 view .LVU264
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 166


 923 0020 C360     		str	r3, [r0, #12]
 335:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 924              		.loc 1 335 3 is_stmt 1 view .LVU265
 335:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 925              		.loc 1 335 27 is_stmt 0 view .LVU266
 926 0022 0361     		str	r3, [r0, #16]
 336:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 927              		.loc 1 336 3 is_stmt 1 view .LVU267
 336:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 928              		.loc 1 336 27 is_stmt 0 view .LVU268
 929 0024 0422     		movs	r2, #4
 930 0026 4261     		str	r2, [r0, #20]
 337:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 931              		.loc 1 337 3 is_stmt 1 view .LVU269
 337:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 932              		.loc 1 337 31 is_stmt 0 view .LVU270
 933 0028 0376     		strb	r3, [r0, #24]
 338:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 934              		.loc 1 338 3 is_stmt 1 view .LVU271
 338:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 935              		.loc 1 338 33 is_stmt 0 view .LVU272
 936 002a 4376     		strb	r3, [r0, #25]
 339:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 937              		.loc 1 339 3 is_stmt 1 view .LVU273
 339:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 938              		.loc 1 339 30 is_stmt 0 view .LVU274
 939 002c 0122     		movs	r2, #1
 940 002e C261     		str	r2, [r0, #28]
 340:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 941              		.loc 1 340 3 is_stmt 1 view .LVU275
 340:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 942              		.loc 1 340 36 is_stmt 0 view .LVU276
 943 0030 80F82030 		strb	r3, [r0, #32]
 341:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 944              		.loc 1 341 3 is_stmt 1 view .LVU277
 341:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 945              		.loc 1 341 31 is_stmt 0 view .LVU278
 946 0034 8362     		str	r3, [r0, #40]
 342:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 947              		.loc 1 342 3 is_stmt 1 view .LVU279
 342:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 948              		.loc 1 342 35 is_stmt 0 view .LVU280
 949 0036 C362     		str	r3, [r0, #44]
 343:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 950              		.loc 1 343 3 is_stmt 1 view .LVU281
 343:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 951              		.loc 1 343 36 is_stmt 0 view .LVU282
 952 0038 80F83030 		strb	r3, [r0, #48]
 344:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 953              		.loc 1 344 3 is_stmt 1 view .LVU283
 344:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 954              		.loc 1 344 22 is_stmt 0 view .LVU284
 955 003c 4363     		str	r3, [r0, #52]
 345:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 956              		.loc 1 345 3 is_stmt 1 view .LVU285
 345:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 957              		.loc 1 345 31 is_stmt 0 view .LVU286
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 167


 958 003e 80F83830 		strb	r3, [r0, #56]
 346:Core/Src/main.c ****   {
 959              		.loc 1 346 3 is_stmt 1 view .LVU287
 346:Core/Src/main.c ****   {
 960              		.loc 1 346 7 is_stmt 0 view .LVU288
 961 0042 FFF7FEFF 		bl	HAL_ADC_Init
 962              	.LVL41:
 346:Core/Src/main.c ****   {
 963              		.loc 1 346 6 view .LVU289
 964 0046 90B9     		cbnz	r0, .L57
 352:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 965              		.loc 1 352 3 is_stmt 1 view .LVU290
 352:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 966              		.loc 1 352 19 is_stmt 0 view .LVU291
 967 0048 0D4B     		ldr	r3, .L59+8
 968 004a 0093     		str	r3, [sp]
 353:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 969              		.loc 1 353 3 is_stmt 1 view .LVU292
 353:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 970              		.loc 1 353 16 is_stmt 0 view .LVU293
 971 004c 0623     		movs	r3, #6
 972 004e 0193     		str	r3, [sp, #4]
 354:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 973              		.loc 1 354 3 is_stmt 1 view .LVU294
 354:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 974              		.loc 1 354 24 is_stmt 0 view .LVU295
 975 0050 0023     		movs	r3, #0
 976 0052 0293     		str	r3, [sp, #8]
 355:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 977              		.loc 1 355 3 is_stmt 1 view .LVU296
 355:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 978              		.loc 1 355 22 is_stmt 0 view .LVU297
 979 0054 7F22     		movs	r2, #127
 980 0056 0392     		str	r2, [sp, #12]
 356:Core/Src/main.c ****   sConfig.Offset = 0;
 981              		.loc 1 356 3 is_stmt 1 view .LVU298
 356:Core/Src/main.c ****   sConfig.Offset = 0;
 982              		.loc 1 356 24 is_stmt 0 view .LVU299
 983 0058 0422     		movs	r2, #4
 984 005a 0492     		str	r2, [sp, #16]
 357:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 985              		.loc 1 357 3 is_stmt 1 view .LVU300
 357:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 986              		.loc 1 357 18 is_stmt 0 view .LVU301
 987 005c 0593     		str	r3, [sp, #20]
 358:Core/Src/main.c ****   {
 988              		.loc 1 358 3 is_stmt 1 view .LVU302
 358:Core/Src/main.c ****   {
 989              		.loc 1 358 7 is_stmt 0 view .LVU303
 990 005e 6946     		mov	r1, sp
 991 0060 0548     		ldr	r0, .L59
 992 0062 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 993              	.LVL42:
 358:Core/Src/main.c ****   {
 994              		.loc 1 358 6 view .LVU304
 995 0066 20B9     		cbnz	r0, .L58
 366:Core/Src/main.c **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 168


 996              		.loc 1 366 1 view .LVU305
 997 0068 07B0     		add	sp, sp, #28
 998              	.LCFI16:
 999              		.cfi_remember_state
 1000              		.cfi_def_cfa_offset 4
 1001              		@ sp needed
 1002 006a 5DF804FB 		ldr	pc, [sp], #4
 1003              	.L57:
 1004              	.LCFI17:
 1005              		.cfi_restore_state
 348:Core/Src/main.c ****   }
 1006              		.loc 1 348 5 is_stmt 1 view .LVU306
 1007 006e FFF7FEFF 		bl	Error_Handler
 1008              	.LVL43:
 1009              	.L58:
 360:Core/Src/main.c ****   }
 1010              		.loc 1 360 5 view .LVU307
 1011 0072 FFF7FEFF 		bl	Error_Handler
 1012              	.LVL44:
 1013              	.L60:
 1014 0076 00BF     		.align	2
 1015              	.L59:
 1016 0078 00000000 		.word	hadc1
 1017 007c 00000450 		.word	1342439424
 1018 0080 01000080 		.word	-2147483647
 1019              		.cfi_endproc
 1020              	.LFE1827:
 1022              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1023              		.align	1
 1024              		.syntax unified
 1025              		.thumb
 1026              		.thumb_func
 1027              		.fpu fpv4-sp-d16
 1029              	MX_TIM2_Init:
 1030              	.LFB1834:
 654:Core/Src/main.c **** 
 1031              		.loc 1 654 1 view -0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 32
 1034              		@ frame_needed = 0, uses_anonymous_args = 0
 1035 0000 00B5     		push	{lr}
 1036              	.LCFI18:
 1037              		.cfi_def_cfa_offset 4
 1038              		.cfi_offset 14, -4
 1039 0002 89B0     		sub	sp, sp, #36
 1040              	.LCFI19:
 1041              		.cfi_def_cfa_offset 40
 660:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 1042              		.loc 1 660 3 view .LVU309
 660:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 1043              		.loc 1 660 27 is_stmt 0 view .LVU310
 1044 0004 0023     		movs	r3, #0
 1045 0006 0593     		str	r3, [sp, #20]
 1046 0008 0693     		str	r3, [sp, #24]
 1047 000a 0793     		str	r3, [sp, #28]
 661:Core/Src/main.c **** 
 1048              		.loc 1 661 3 is_stmt 1 view .LVU311
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 169


 661:Core/Src/main.c **** 
 1049              		.loc 1 661 22 is_stmt 0 view .LVU312
 1050 000c 0193     		str	r3, [sp, #4]
 1051 000e 0293     		str	r3, [sp, #8]
 1052 0010 0393     		str	r3, [sp, #12]
 1053 0012 0493     		str	r3, [sp, #16]
 666:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1054              		.loc 1 666 3 is_stmt 1 view .LVU313
 666:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1055              		.loc 1 666 18 is_stmt 0 view .LVU314
 1056 0014 1948     		ldr	r0, .L71
 1057 0016 4FF08042 		mov	r2, #1073741824
 1058 001a 0260     		str	r2, [r0]
 667:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1059              		.loc 1 667 3 is_stmt 1 view .LVU315
 667:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1060              		.loc 1 667 24 is_stmt 0 view .LVU316
 1061 001c 4360     		str	r3, [r0, #4]
 668:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 1062              		.loc 1 668 3 is_stmt 1 view .LVU317
 668:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 1063              		.loc 1 668 26 is_stmt 0 view .LVU318
 1064 001e 8360     		str	r3, [r0, #8]
 669:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1065              		.loc 1 669 3 is_stmt 1 view .LVU319
 669:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1066              		.loc 1 669 21 is_stmt 0 view .LVU320
 1067 0020 4FF0FF32 		mov	r2, #-1
 1068 0024 C260     		str	r2, [r0, #12]
 670:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1069              		.loc 1 670 3 is_stmt 1 view .LVU321
 670:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1070              		.loc 1 670 28 is_stmt 0 view .LVU322
 1071 0026 0361     		str	r3, [r0, #16]
 671:Core/Src/main.c ****   if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 1072              		.loc 1 671 3 is_stmt 1 view .LVU323
 671:Core/Src/main.c ****   if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 1073              		.loc 1 671 32 is_stmt 0 view .LVU324
 1074 0028 8361     		str	r3, [r0, #24]
 672:Core/Src/main.c ****   {
 1075              		.loc 1 672 3 is_stmt 1 view .LVU325
 672:Core/Src/main.c ****   {
 1076              		.loc 1 672 7 is_stmt 0 view .LVU326
 1077 002a FFF7FEFF 		bl	HAL_TIM_IC_Init
 1078              	.LVL45:
 672:Core/Src/main.c ****   {
 1079              		.loc 1 672 6 view .LVU327
 1080 002e E0B9     		cbnz	r0, .L67
 676:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1081              		.loc 1 676 3 is_stmt 1 view .LVU328
 676:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1082              		.loc 1 676 37 is_stmt 0 view .LVU329
 1083 0030 0023     		movs	r3, #0
 1084 0032 0593     		str	r3, [sp, #20]
 677:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1085              		.loc 1 677 3 is_stmt 1 view .LVU330
 677:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 170


 1086              		.loc 1 677 33 is_stmt 0 view .LVU331
 1087 0034 0793     		str	r3, [sp, #28]
 678:Core/Src/main.c ****   {
 1088              		.loc 1 678 3 is_stmt 1 view .LVU332
 678:Core/Src/main.c ****   {
 1089              		.loc 1 678 7 is_stmt 0 view .LVU333
 1090 0036 05A9     		add	r1, sp, #20
 1091 0038 1048     		ldr	r0, .L71
 1092 003a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1093              	.LVL46:
 678:Core/Src/main.c ****   {
 1094              		.loc 1 678 6 view .LVU334
 1095 003e B0B9     		cbnz	r0, .L68
 682:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 1096              		.loc 1 682 3 is_stmt 1 view .LVU335
 682:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 1097              		.loc 1 682 24 is_stmt 0 view .LVU336
 1098 0040 0022     		movs	r2, #0
 1099 0042 0192     		str	r2, [sp, #4]
 683:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 1100              		.loc 1 683 3 is_stmt 1 view .LVU337
 683:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 1101              		.loc 1 683 25 is_stmt 0 view .LVU338
 1102 0044 0123     		movs	r3, #1
 1103 0046 0293     		str	r3, [sp, #8]
 684:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 1104              		.loc 1 684 3 is_stmt 1 view .LVU339
 684:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 1105              		.loc 1 684 25 is_stmt 0 view .LVU340
 1106 0048 0392     		str	r2, [sp, #12]
 685:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 1107              		.loc 1 685 3 is_stmt 1 view .LVU341
 685:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 1108              		.loc 1 685 22 is_stmt 0 view .LVU342
 1109 004a 0492     		str	r2, [sp, #16]
 686:Core/Src/main.c ****   {
 1110              		.loc 1 686 3 is_stmt 1 view .LVU343
 686:Core/Src/main.c ****   {
 1111              		.loc 1 686 7 is_stmt 0 view .LVU344
 1112 004c 01A9     		add	r1, sp, #4
 1113 004e 0B48     		ldr	r0, .L71
 1114 0050 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 1115              	.LVL47:
 686:Core/Src/main.c ****   {
 1116              		.loc 1 686 6 view .LVU345
 1117 0054 68B9     		cbnz	r0, .L69
 690:Core/Src/main.c ****   {
 1118              		.loc 1 690 3 is_stmt 1 view .LVU346
 690:Core/Src/main.c ****   {
 1119              		.loc 1 690 7 is_stmt 0 view .LVU347
 1120 0056 0422     		movs	r2, #4
 1121 0058 0DEB0201 		add	r1, sp, r2
 1122 005c 0748     		ldr	r0, .L71
 1123 005e FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 1124              	.LVL48:
 690:Core/Src/main.c ****   {
 1125              		.loc 1 690 6 view .LVU348
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 171


 1126 0062 40B9     		cbnz	r0, .L70
 703:Core/Src/main.c **** 
 1127              		.loc 1 703 1 view .LVU349
 1128 0064 09B0     		add	sp, sp, #36
 1129              	.LCFI20:
 1130              		.cfi_remember_state
 1131              		.cfi_def_cfa_offset 4
 1132              		@ sp needed
 1133 0066 5DF804FB 		ldr	pc, [sp], #4
 1134              	.L67:
 1135              	.LCFI21:
 1136              		.cfi_restore_state
 674:Core/Src/main.c ****   }
 1137              		.loc 1 674 5 is_stmt 1 view .LVU350
 1138 006a FFF7FEFF 		bl	Error_Handler
 1139              	.LVL49:
 1140              	.L68:
 680:Core/Src/main.c ****   }
 1141              		.loc 1 680 5 view .LVU351
 1142 006e FFF7FEFF 		bl	Error_Handler
 1143              	.LVL50:
 1144              	.L69:
 688:Core/Src/main.c ****   }
 1145              		.loc 1 688 5 view .LVU352
 1146 0072 FFF7FEFF 		bl	Error_Handler
 1147              	.LVL51:
 1148              	.L70:
 692:Core/Src/main.c ****   }
 1149              		.loc 1 692 5 view .LVU353
 1150 0076 FFF7FEFF 		bl	Error_Handler
 1151              	.LVL52:
 1152              	.L72:
 1153 007a 00BF     		.align	2
 1154              	.L71:
 1155 007c 00000000 		.word	htim2
 1156              		.cfi_endproc
 1157              	.LFE1834:
 1159              		.section	.text.SystemClock_Config,"ax",%progbits
 1160              		.align	1
 1161              		.global	SystemClock_Config
 1162              		.syntax unified
 1163              		.thumb
 1164              		.thumb_func
 1165              		.fpu fpv4-sp-d16
 1167              	SystemClock_Config:
 1168              	.LFB1825:
 238:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1169              		.loc 1 238 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 104
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 1173 0000 30B5     		push	{r4, r5, lr}
 1174              	.LCFI22:
 1175              		.cfi_def_cfa_offset 12
 1176              		.cfi_offset 4, -12
 1177              		.cfi_offset 5, -8
 1178              		.cfi_offset 14, -4
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 172


 1179 0002 9BB0     		sub	sp, sp, #108
 1180              	.LCFI23:
 1181              		.cfi_def_cfa_offset 120
 239:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1182              		.loc 1 239 3 view .LVU355
 239:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1183              		.loc 1 239 22 is_stmt 0 view .LVU356
 1184 0004 4822     		movs	r2, #72
 1185 0006 0021     		movs	r1, #0
 1186 0008 08A8     		add	r0, sp, #32
 1187 000a FFF7FEFF 		bl	memset
 1188              	.LVL53:
 240:Core/Src/main.c **** 
 1189              		.loc 1 240 3 is_stmt 1 view .LVU357
 240:Core/Src/main.c **** 
 1190              		.loc 1 240 22 is_stmt 0 view .LVU358
 1191 000e 0024     		movs	r4, #0
 1192 0010 0194     		str	r4, [sp, #4]
 1193 0012 0294     		str	r4, [sp, #8]
 1194 0014 0394     		str	r4, [sp, #12]
 1195 0016 0494     		str	r4, [sp, #16]
 1196 0018 0594     		str	r4, [sp, #20]
 1197 001a 0694     		str	r4, [sp, #24]
 1198 001c 0794     		str	r4, [sp, #28]
 244:Core/Src/main.c ****   /** Macro to configure the PLL clock source
 1199              		.loc 1 244 3 is_stmt 1 view .LVU359
 1200 001e 4FF0B045 		mov	r5, #1476395008
 1201 0022 EB68     		ldr	r3, [r5, #12]
 1202 0024 23F07003 		bic	r3, r3, #112
 1203 0028 EB60     		str	r3, [r5, #12]
 247:Core/Src/main.c ****   /** Configure LSE Drive Capability
 1204              		.loc 1 247 3 view .LVU360
 1205 002a EB68     		ldr	r3, [r5, #12]
 1206 002c 23F00303 		bic	r3, r3, #3
 1207 0030 43F00203 		orr	r3, r3, #2
 1208 0034 EB60     		str	r3, [r5, #12]
 250:Core/Src/main.c ****   __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 1209              		.loc 1 250 3 view .LVU361
 1210 0036 FFF7FEFF 		bl	HAL_PWR_EnableBkUpAccess
 1211              	.LVL54:
 251:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 1212              		.loc 1 251 3 view .LVU362
 1213              	.LBB85:
 1214              	.LBI85:
 1215              		.file 6 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h"
   1:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
   2:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   ******************************************************************************
   3:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @file    stm32wbxx_ll_rcc.h
   4:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @author  MCD Application Team
   5:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief   Header file of RCC LL module.
   6:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   ******************************************************************************
   7:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @attention
   8:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *
   9:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * All rights reserved.
  11:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *
  12:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * This software is licensed under terms that can be found in the LICENSE file
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 173


  13:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * in the root directory of this software component.
  14:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *
  16:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   ******************************************************************************
  17:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  18:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  19:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #ifndef STM32WBxx_LL_RCC_H
  21:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define STM32WBxx_LL_RCC_H
  22:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  23:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #ifdef __cplusplus
  24:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** extern "C" {
  25:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
  26:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  27:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #include "stm32wbxx.h"
  29:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  30:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @addtogroup STM32WBxx_LL_Driver
  31:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
  32:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  33:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  34:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(RCC)
  35:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  36:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL RCC
  37:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
  38:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  39:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  40:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_Private_Variables RCC Private Variables
  43:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
  44:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  45:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  46:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define HSE_CONTROL_UNLOCK_KEY 0xCAFECAFEU
  47:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  48:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
  49:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
  50:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  51:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  52:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /* Private constants ---------------------------------------------------------*/
  53:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /* Private macros ------------------------------------------------------------*/
  54:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(USE_FULL_LL_DRIVER)
  55:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_Private_Macros RCC Private Macros
  56:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
  57:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  58:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
  59:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
  60:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  61:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif /*USE_FULL_LL_DRIVER*/
  62:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  63:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /* Exported types ------------------------------------------------------------*/
  64:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(USE_FULL_LL_DRIVER)
  65:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_Exported_Types RCC Exported Types
  66:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
  67:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  68:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  69:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup LL_ES_CLOCK_FREQ Clocks Frequency Structure
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 174


  70:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
  71:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  72:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  73:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
  74:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  RCC Clocks Frequency Structure
  75:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  76:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** typedef struct
  77:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
  78:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   uint32_t SYSCLK_Frequency;         /*!< SYSCLK clock frequency */
  79:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   uint32_t HCLK1_Frequency;          /*!< HCLK1 clock frequency  */
  80:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   uint32_t HCLK2_Frequency;          /*!< HCLK2 clock frequency  */
  81:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   uint32_t HCLK4_Frequency;          /*!< HCLK4 clock frequency  */
  82:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   uint32_t HCLK5_Frequency;          /*!< HCLK5 clock frequency  */
  83:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   uint32_t PCLK1_Frequency;          /*!< PCLK1 clock frequency  */
  84:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   uint32_t PCLK2_Frequency;          /*!< PCLK2 clock frequency  */
  85:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** } LL_RCC_ClocksTypeDef;
  86:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  87:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
  88:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
  89:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  90:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  91:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
  92:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
  93:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
  94:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif /* USE_FULL_LL_DRIVER */
  95:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
  96:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /* Exported constants --------------------------------------------------------*/
  97:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_Exported_Constants RCC Exported Constants
  98:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
  99:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_OSC_VALUES Oscillator Values adaptation
 102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief    Defines used to adapt values of different oscillators
 103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note     These values could be modified in the user environment according to
 104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *           HW set-up.
 105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if !defined  (HSE_VALUE)
 108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define HSE_VALUE    32000000U  /*!< Value of the HSE oscillator in Hz */
 109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif /* HSE_VALUE */
 110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if !defined  (HSI_VALUE)
 112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define HSI_VALUE    16000000U  /*!< Value of the HSI oscillator in Hz */
 113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif /* HSI_VALUE */
 114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if !defined  (LSE_VALUE)
 116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LSE_VALUE    32768U     /*!< Value of the LSE oscillator in Hz */
 117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif /* LSE_VALUE */
 118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if !defined  (LSI_VALUE)
 120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LSI_VALUE    32000U     /*!< Value of the LSI oscillator in Hz */
 121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif /* LSI_VALUE */
 122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if !defined  (HSI48_VALUE)
 125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define HSI48_VALUE  48000000U  /*!< Value of the HSI48 oscillator in Hz */
 126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif /* HSI48_VALUE */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 175


 127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****     
 129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_CLEAR_FLAG Clear Flags Defines
 134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief    Flags defines which can be used with LL_RCC_WriteReg function
 135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_LSI1RDYC               RCC_CICR_LSI1RDYC    /*!< LSI1 Ready Interrupt Clear    
 138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_LSI2RDYC               RCC_CICR_LSI2RDYC    /*!< LSI1 Ready Interrupt Clear    
 139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_LSERDYC                RCC_CICR_LSERDYC     /*!< LSE Ready Interrupt Clear     
 140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_MSIRDYC                RCC_CICR_MSIRDYC     /*!< MSI Ready Interrupt Clear     
 141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_HSIRDYC                RCC_CICR_HSIRDYC     /*!< HSI Ready Interrupt Clear     
 142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_HSERDYC                RCC_CICR_HSERDYC     /*!< HSE Ready Interrupt Clear     
 143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_PLLRDYC                RCC_CICR_PLLRDYC     /*!< PLL Ready Interrupt Clear     
 144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_HSI48RDYC              RCC_CICR_HSI48RDYC   /*!< HSI48 Ready Interrupt Clear   
 146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(SAI1)
 148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_PLLSAI1RDYC            RCC_CICR_PLLSAI1RDYC /*!< PLLSAI1 Ready Interrupt Clear 
 149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_LSECSSC                RCC_CICR_LSECSSC     /*!< LSE Clock Security System Inte
 151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CICR_CSSC                   RCC_CICR_CSSC        /*!< Clock Security System Interrup
 152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_GET_FLAG Get Flags Defines
 157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief    Flags defines which can be used with LL_RCC_ReadReg function
 158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_LSI1RDYF               RCC_CIFR_LSI1RDYF    /*!< LSI1 Ready Interrupt flag     
 161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_LSI2RDYF               RCC_CIFR_LSI2RDYF    /*!< LSI2 Ready Interrupt flag     
 162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_LSERDYF                RCC_CIFR_LSERDYF     /*!< LSE Ready Interrupt flag      
 163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_MSIRDYF                RCC_CIFR_MSIRDYF     /*!< MSI Ready Interrupt flag      
 164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_HSIRDYF                RCC_CIFR_HSIRDYF     /*!< HSI Ready Interrupt flag      
 165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_HSERDYF                RCC_CIFR_HSERDYF     /*!< HSE Ready Interrupt flag      
 166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_PLLRDYF                RCC_CIFR_PLLRDYF     /*!< PLL Ready Interrupt flag      
 167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_HSI48RDYF              RCC_CIFR_HSI48RDYF   /*!< HSI48 Ready Interrupt flag    
 169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(SAI1)
 171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_PLLSAI1RDYF            RCC_CIFR_PLLSAI1RDYF /*!< PLLSAI1 Ready Interrupt flag  
 172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_LSECSSF                RCC_CIFR_LSECSSF     /*!< LSE Clock Security System Inte
 174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIFR_CSSF                   RCC_CIFR_CSSF        /*!< Clock Security System Interrup
 175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CSR_LPWRRSTF                RCC_CSR_LPWRRSTF     /*!< Low-Power reset flag          
 176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CSR_OBLRSTF                 RCC_CSR_OBLRSTF      /*!< OBL reset flag                
 177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CSR_PINRSTF                 RCC_CSR_PINRSTF      /*!< PIN reset flag                
 178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CSR_SFTRSTF                 RCC_CSR_SFTRSTF      /*!< Software Reset flag           
 179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CSR_IWDGRSTF                RCC_CSR_IWDGRSTF     /*!< Independent Watchdog reset fla
 180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CSR_WWDGRSTF                RCC_CSR_WWDGRSTF     /*!< Window watchdog reset flag    
 181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CSR_BORRSTF                 RCC_CSR_BORRSTF      /*!< BOR reset flag                
 182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 176


 184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_IT IT Defines
 187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief    IT defines which can be used with LL_RCC_ReadReg and  LL_RCC_WriteReg functions
 188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIER_LSI1RDYIE              RCC_CIER_LSI1RDYIE     /*!< LSI1 Ready Interrupt Enable 
 191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIER_LSI2RDYIE              RCC_CIER_LSI2RDYIE     /*!< LSI Ready Interrupt Enable  
 192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIER_LSERDYIE               RCC_CIER_LSERDYIE      /*!< LSE Ready Interrupt Enable  
 193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIER_MSIRDYIE               RCC_CIER_MSIRDYIE      /*!< MSI Ready Interrupt Enable  
 194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIER_HSIRDYIE               RCC_CIER_HSIRDYIE      /*!< HSI Ready Interrupt Enable  
 195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIER_HSERDYIE               RCC_CIER_HSERDYIE      /*!< HSE Ready Interrupt Enable  
 196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIER_PLLRDYIE               RCC_CIER_PLLRDYIE      /*!< PLL Ready Interrupt Enable  
 197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIER_HSI48RDYIE             RCC_CIER_HSI48RDYIE    /*!< HSI48 Ready Interrupt Enable
 199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(SAI1)
 201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIER_PLLSAI1RDYIE           RCC_CIER_PLLSAI1RDYIE  /*!< PLLSAI1 Ready Interrupt Enab
 202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CIER_LSECSSIE               RCC_CIER_LSECSSIE      /*!< LSE CSS Interrupt Enable    
 204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LSEDRIVE  LSE oscillator drive capability
 209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LSEDRIVE_LOW                0x00000000U             /*!< Xtal mode lower driving cap
 212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LSEDRIVE_MEDIUMLOW          RCC_BDCR_LSEDRV_0       /*!< Xtal mode medium low drivin
 213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LSEDRIVE_MEDIUMHIGH         RCC_BDCR_LSEDRV_1       /*!< Xtal mode medium high drivi
 214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LSEDRIVE_HIGH               RCC_BDCR_LSEDRV         /*!< Xtal mode higher driving ca
 215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_MSIRANGE  MSI clock ranges
 220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_0                  RCC_CR_MSIRANGE_0  /*!< MSI = 100 KHz  */
 223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_1                  RCC_CR_MSIRANGE_1  /*!< MSI = 200 KHz  */
 224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_2                  RCC_CR_MSIRANGE_2  /*!< MSI = 400 KHz  */
 225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_3                  RCC_CR_MSIRANGE_3  /*!< MSI = 800 KHz  */
 226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_4                  RCC_CR_MSIRANGE_4  /*!< MSI = 1 MHz    */
 227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_5                  RCC_CR_MSIRANGE_5  /*!< MSI = 2 MHz    */
 228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_6                  RCC_CR_MSIRANGE_6  /*!< MSI = 4 MHz    */
 229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_7                  RCC_CR_MSIRANGE_7  /*!< MSI = 8 MHz    */
 230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_8                  RCC_CR_MSIRANGE_8  /*!< MSI = 16 MHz   */
 231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_9                  RCC_CR_MSIRANGE_9  /*!< MSI = 24 MHz   */
 232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_10                 RCC_CR_MSIRANGE_10 /*!< MSI = 32 MHz   */
 233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MSIRANGE_11                 RCC_CR_MSIRANGE_11 /*!< MSI = 48 MHz   */
 234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_HSE_CURRENT_CONTROL  HSE current control max limits
 240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 177


 241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_HSE_CURRENTMAX_0            0x000000000U                                            
 243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_HSE_CURRENTMAX_1            RCC_HSECR_HSEGMC0                                       
 244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_HSE_CURRENTMAX_2            RCC_HSECR_HSEGMC1                                       
 245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_HSE_CURRENTMAX_3            (RCC_HSECR_HSEGMC1|RCC_HSECR_HSEGMC0)                   
 246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_HSE_CURRENTMAX_4            RCC_HSECR_HSEGMC2                                       
 247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_HSE_CURRENTMAX_5            (RCC_HSECR_HSEGMC2|RCC_HSECR_HSEGMC0)                   
 248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_HSE_CURRENTMAX_6            (RCC_HSECR_HSEGMC2|RCC_HSECR_HSEGMC1)                   
 249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_HSE_CURRENTMAX_7            (RCC_HSECR_HSEGMC2|RCC_HSECR_HSEGMC1|RCC_HSECR_HSEGMC0) 
 250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_HSE_SENSE_AMPLIFIER  HSE sense amplifier threshold
 255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_HSEAMPTHRESHOLD_1_2         (0x000000000U)        /*!< HSE sense amplifier bias curr
 258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_HSEAMPTHRESHOLD_3_4         RCC_HSECR_HSES        /*!< HSE sense amplifier bias curr
 259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LSCO_CLKSOURCE  LSCO Selection
 264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LSCO_CLKSOURCE_LSI          0x00000000U           /*!< LSI selection for low speed c
 267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LSCO_CLKSOURCE_LSE          RCC_BDCR_LSCOSEL      /*!< LSE selection for low speed c
 268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SYS_CLKSOURCE  System clock switch
 273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_MSI           0x00000000U                       /*!< MSI selection as 
 276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_HSI           RCC_CFGR_SW_0                     /*!< HSI selection as 
 277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_HSE           RCC_CFGR_SW_1                     /*!< HSE selection as 
 278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_PLL           (RCC_CFGR_SW_1 | RCC_CFGR_SW_0)   /*!< PLL selection as 
 279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SYS_CLKSOURCE_STATUS  System clock switch status
 284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_STATUS_MSI    0x00000000U                       /*!< MSI used as syste
 287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_STATUS_HSI    RCC_CFGR_SWS_0                    /*!< HSI used as syste
 288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_STATUS_HSE    RCC_CFGR_SWS_1                    /*!< HSE used as syste
 289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_STATUS_PLL    (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0) /*!< PLL used as syste
 290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_RF_CLKSOURCE_STATUS  RF system clock switch status
 295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RF_CLKSOURCE_HSI            0x00000000U        /*!< HSI used as RF system clock     
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 178


 298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RF_CLKSOURCE_HSE_DIV2       RCC_EXTCFGR_RFCSS  /*!< HSE divided by 2 used as RF syst
 299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SYSCLK_DIV  AHB prescaler
 304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_1                0x00000000U                                             
 307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_2                RCC_CFGR_HPRE_3                                         
 308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_3                RCC_CFGR_HPRE_0                                         
 309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_4                (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_0)                     
 310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_5                RCC_CFGR_HPRE_1                                         
 311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_6                (RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_0)                     
 312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_8                (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_1)                     
 313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_10               (RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_1)                     
 314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_16               (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_1 | RCC_CFGR_HPRE_0)   
 315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_32               (RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_1 | RCC_CFGR_HPRE_0)   
 316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_64               (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_2)                     
 317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_128              (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_0)   
 318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_256              (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_1)   
 319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_512              (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_1 | R
 320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_APB1_DIV  APB low-speed prescaler (APB1)
 325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_APB1_DIV_1                  0x00000000U                                             
 328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_APB1_DIV_2                  RCC_CFGR_PPRE1_2                                        
 329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_APB1_DIV_4                  (RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE1_0)                   
 330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_APB1_DIV_8                  (RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE1_1)                   
 331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_APB1_DIV_16                 (RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE1_1 | RCC_CFGR_PPRE1_0)
 332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_APB2_DIV  APB high-speed prescaler (APB2)
 337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_APB2_DIV_1                  0x00000000U                                             
 340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_APB2_DIV_2                  RCC_CFGR_PPRE2_2                                        
 341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_APB2_DIV_4                  (RCC_CFGR_PPRE2_2 | RCC_CFGR_PPRE2_0)                   
 342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_APB2_DIV_8                  (RCC_CFGR_PPRE2_2 | RCC_CFGR_PPRE2_1)                   
 343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_APB2_DIV_16                 (RCC_CFGR_PPRE2_2 | RCC_CFGR_PPRE2_1 | RCC_CFGR_PPRE2_0)
 344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_STOP_WAKEUPCLOCK  Wakeup from Stop and CSS backup clock selection
 349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_STOP_WAKEUPCLOCK_MSI        0x00000000U             /*!< MSI selection after wake-up
 352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_STOP_WAKEUPCLOCK_HSI        RCC_CFGR_STOPWUCK       /*!< HSI selection after wake-up
 353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 179


 355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_MCO1SOURCE  MCO1 SOURCE selection
 358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_NOCLOCK          0x00000000U                                   /*!< MCO o
 361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_SYSCLK           RCC_CFGR_MCOSEL_0                             /*!< SYSCL
 362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_MSI              RCC_CFGR_MCOSEL_1                             /*!< MSI s
 363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_HSI              (RCC_CFGR_MCOSEL_0| RCC_CFGR_MCOSEL_1)        /*!< HSI s
 364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_HSE              RCC_CFGR_MCOSEL_2                             /*!< HSE a
 365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_PLLCLK           (RCC_CFGR_MCOSEL_0|RCC_CFGR_MCOSEL_2)         /*!< Main 
 366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_LSI1             (RCC_CFGR_MCOSEL_1|RCC_CFGR_MCOSEL_2)         /*!< LSI1 
 367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_LSI2             (RCC_CFGR_MCOSEL_0|RCC_CFGR_MCOSEL_1|RCC_CFGR_MCOSEL_2) 
 368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_LSE              RCC_CFGR_MCOSEL_3                             /*!< LSE s
 369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_HSI48            (RCC_CFGR_MCOSEL_0|RCC_CFGR_MCOSEL_3)         /*!< HSI48
 371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_HSE_BEFORE_STAB  (RCC_CFGR_MCOSEL_2|RCC_CFGR_MCOSEL_3)         /*!< HSE b
 373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_MCO1_DIV  MCO1 prescaler
 378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1_DIV_1                  0x00000000U                               /*!< MCO not d
 381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1_DIV_2                  RCC_CFGR_MCOPRE_0                         /*!< MCO divid
 382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1_DIV_4                  RCC_CFGR_MCOPRE_1                         /*!< MCO divid
 383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1_DIV_8                  (RCC_CFGR_MCOPRE_1 | RCC_CFGR_MCOPRE_0)   /*!< MCO divid
 384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_MCO1_DIV_16                 RCC_CFGR_MCOPRE_2                         /*!< MCO divid
 385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(RCC_SMPS_SUPPORT)
 390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SMPS_CLKSOURCE  SMPS clock switch
 391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_CLKSOURCE_HSI           0x00000000U             /*!< HSI selection as SMPS cloc
 394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_CLKSOURCE_MSI           RCC_SMPSCR_SMPSSEL_0    /*!< MSI selection as SMPS cloc
 395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_CLKSOURCE_HSE           RCC_SMPSCR_SMPSSEL_1    /*!< HSE selection as SMPS cloc
 396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SMPS_CLKSOURCE_STATUS  SMPS clock switch status
 401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_CLKSOURCE_STATUS_HSI       0x00000000U                                   /*!< H
 404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_CLKSOURCE_STATUS_MSI       RCC_SMPSCR_SMPSSWS_0                          /*!< M
 405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_CLKSOURCE_STATUS_HSE       RCC_SMPSCR_SMPSSWS_1                          /*!< H
 406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_CLKSOURCE_STATUS_NO_CLOCK  (RCC_SMPSCR_SMPSSWS_0|RCC_SMPSCR_SMPSSWS_1)   /*!< N
 407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SMPS_DIV  SMPS prescaler
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 180


 412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****     * @{
 413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****     */
 414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_DIV_0                  (0x00000000U)                                     /*!< S
 415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_DIV_1                  RCC_SMPSCR_SMPSDIV_0                              /*!< S
 416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_DIV_2                  RCC_SMPSCR_SMPSDIV_1                              /*!< S
 417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SMPS_DIV_3                  (RCC_SMPSCR_SMPSDIV_0|RCC_SMPSCR_SMPSDIV_1)       /*!< S
 418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****     * @}
 420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****     */
 421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(USE_FULL_LL_DRIVER)
 424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PERIPH_FREQUENCY Peripheral clock frequency
 425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PERIPH_FREQUENCY_NO         0x00000000U                 /*!< No clock enabled for th
 428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PERIPH_FREQUENCY_NA         0xFFFFFFFFU                 /*!< Frequency cannot be pro
 429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif /* USE_FULL_LL_DRIVER */
 433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_USART1_CLKSOURCE USART1 CLKSOURCE
 435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_USART1_CLKSOURCE_PCLK2      0x00000000U                /*!< PCLK2 selected as USART1
 438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_USART1_CLKSOURCE_SYSCLK     RCC_CCIPR_USART1SEL_0      /*!< SYSCLK selected as USART
 439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_USART1_CLKSOURCE_HSI        RCC_CCIPR_USART1SEL_1      /*!< HSI selected as USART1 c
 440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_USART1_CLKSOURCE_LSE        RCC_CCIPR_USART1SEL        /*!< LSE selected as USART1 c
 441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(LPUART1)
 446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LPUART1_CLKSOURCE LPUART1 CLKSOURCE
 447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPUART1_CLKSOURCE_PCLK1     0x00000000U               /*!< PCLK1 selected as LPUART1
 450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPUART1_CLKSOURCE_SYSCLK    RCC_CCIPR_LPUART1SEL_0    /*!< SYCLK selected as LPUART1
 451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPUART1_CLKSOURCE_HSI       RCC_CCIPR_LPUART1SEL_1    /*!< HSI selected as LPUART1 c
 452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPUART1_CLKSOURCE_LSE       RCC_CCIPR_LPUART1SEL      /*!< LSE selected as LPUART1 c
 453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_I2Cx_CLKSOURCE I2Cx CLKSOURCE
 459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_I2C1_CLKSOURCE_PCLK1        (uint32_t)((RCC_CCIPR_I2C1SEL << 4) | (0x00000000U >> 4)
 462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_I2C1_CLKSOURCE_SYSCLK       (uint32_t)((RCC_CCIPR_I2C1SEL << 4) | (RCC_CCIPR_I2C1SEL
 463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_I2C1_CLKSOURCE_HSI          (uint32_t)((RCC_CCIPR_I2C1SEL << 4) | (RCC_CCIPR_I2C1SEL
 464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(I2C3)
 465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_I2C3_CLKSOURCE_PCLK1        (uint32_t)((RCC_CCIPR_I2C3SEL << 4) | (0x00000000U >> 4)
 466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_I2C3_CLKSOURCE_SYSCLK       (uint32_t)((RCC_CCIPR_I2C3SEL << 4) | (RCC_CCIPR_I2C3SEL
 467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_I2C3_CLKSOURCE_HSI          (uint32_t)((RCC_CCIPR_I2C3SEL << 4) | (RCC_CCIPR_I2C3SEL
 468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 181


 469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LPTIMx_CLKSOURCE LPTIMx CLKSOURCE
 474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPTIM1_CLKSOURCE_PCLK1      (uint32_t)(RCC_CCIPR_LPTIM1SEL | (0x00000000U >> 16))   
 477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPTIM1_CLKSOURCE_LSI        (uint32_t)(RCC_CCIPR_LPTIM1SEL | (RCC_CCIPR_LPTIM1SEL_0 
 478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPTIM1_CLKSOURCE_HSI        (uint32_t)(RCC_CCIPR_LPTIM1SEL | (RCC_CCIPR_LPTIM1SEL_1 
 479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPTIM1_CLKSOURCE_LSE        (uint32_t)(RCC_CCIPR_LPTIM1SEL | (RCC_CCIPR_LPTIM1SEL >>
 480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPTIM2_CLKSOURCE_PCLK1      (uint32_t)(RCC_CCIPR_LPTIM2SEL | (0x00000000U >> 16))   
 481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPTIM2_CLKSOURCE_LSI        (uint32_t)(RCC_CCIPR_LPTIM2SEL | (RCC_CCIPR_LPTIM2SEL_0 
 482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPTIM2_CLKSOURCE_HSI        (uint32_t)(RCC_CCIPR_LPTIM2SEL | (RCC_CCIPR_LPTIM2SEL_1 
 483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPTIM2_CLKSOURCE_LSE        (uint32_t)(RCC_CCIPR_LPTIM2SEL | (RCC_CCIPR_LPTIM2SEL >>
 484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(SAI1)
 489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SAI1_CLKSOURCE SAI1 CLKSOURCE
 490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SAI1_CLKSOURCE_PLLSAI1      0x00000000U            /*!< PLLSAI1 selected as SAI1 clo
 493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SAI1_CLKSOURCE_PLL          RCC_CCIPR_SAI1SEL_0    /*!< PLL selected as SAI1 clock  
 494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SAI1_CLKSOURCE_HSI          RCC_CCIPR_SAI1SEL_1    /*!< HSI selected as SAI1 clock  
 495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SAI1_CLKSOURCE_PIN          RCC_CCIPR_SAI1SEL      /*!< External input selected as S
 496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_CLK48_CLKSOURCE CLK48 CLKSOURCE
 502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CLK48_CLKSOURCE_HSI48       0x00000000U           /*!< HSI48 selected as CLK48 clock
 506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(SAI1)
 508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CLK48_CLKSOURCE_PLLSAI1     RCC_CCIPR_CLK48SEL_0  /*!< PLLSAI1 selected as CLK48 clo
 509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CLK48_CLKSOURCE_PLL         RCC_CCIPR_CLK48SEL_1  /*!< PLL selected as CLK48 clock  
 511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CLK48_CLKSOURCE_MSI         RCC_CCIPR_CLK48SEL    /*!< MSI selected as CLK48 clock  
 512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_USB_CLKSOURCE USB CLKSOURCE
 517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_USB_CLKSOURCE_HSI48         LL_RCC_CLK48_CLKSOURCE_HSI48    /*!< HSI48 selected as U
 521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(SAI1)
 523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_USB_CLKSOURCE_PLLSAI1       LL_RCC_CLK48_CLKSOURCE_PLLSAI1  /*!< PLLSAI1 selected as
 524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_USB_CLKSOURCE_PLL           LL_RCC_CLK48_CLKSOURCE_PLL      /*!< PLL selected as USB
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 182


 526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_USB_CLKSOURCE_MSI           LL_RCC_CLK48_CLKSOURCE_MSI      /*!< MSI selected as USB
 527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_ADC_CLKSRC ADC CLKSRC
 532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_ADC_CLKSOURCE_NONE             0x00000000U        /*!< no Clock used as ADC clock*/
 535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(STM32WB55xx) || defined (STM32WB5Mxx) || defined (STM32WB35xx)
 536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_ADC_CLKSOURCE_PLLSAI1          RCC_CCIPR_ADCSEL_0 /*!< PLLSAI1 selected as ADC clock
 537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #elif defined (STM32WB15xx)
 538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_ADC_CLKSOURCE_HSI              RCC_CCIPR_ADCSEL_0 /*!< HSI selected as ADC clock    
 539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_ADC_CLKSOURCE_PLL              RCC_CCIPR_ADCSEL_1 /*!< PLL selected as ADC clock    
 541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_ADC_CLKSOURCE_SYSCLK           RCC_CCIPR_ADCSEL   /*!< SYSCLK selected as ADC clock 
 542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_RNG_CLKSRC RNG CLKSRC
 547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RNG_CLKSOURCE_CLK48            0x00000000U        /*!< CLK48 divided by 3 selected a
 550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RNG_CLKSOURCE_LSI              RCC_CCIPR_RNGSEL_0 /*!< LSI selected as ADC clock    
 551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RNG_CLKSOURCE_LSE              RCC_CCIPR_RNGSEL_1 /*!< LSE selected as ADC clock    
 552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_USART1 USART1
 558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_USART1_CLKSOURCE            RCC_CCIPR_USART1SEL   /*!< USART1 clock source selection
 561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(LPUART1)
 566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LPUART1 LPUART1
 567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPUART1_CLKSOURCE           RCC_CCIPR_LPUART1SEL  /*!< LPUART1 clock source selectio
 570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_I2C1 I2C1
 576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_I2C1_CLKSOURCE              RCC_CCIPR_I2C1SEL    /*!< I2C1 clock source selection bi
 579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_I2C3_CLKSOURCE              RCC_CCIPR_I2C3SEL    /*!< I2C3 clock source selection bi
 580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 183


 583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LPTIM1 LPTIM1
 585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPTIM1_CLKSOURCE            RCC_CCIPR_LPTIM1SEL  /*!< LPTIM1 clock source selection 
 588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_LPTIM2_CLKSOURCE            RCC_CCIPR_LPTIM2SEL  /*!< LPTIM2 clock source selection 
 589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(SAI1)
 594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SAI1 SAI1
 595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_SAI1_CLKSOURCE              RCC_CCIPR_SAI1SEL   /*!< SAI1 clock source selection bit
 598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_CLK48 CLK48
 604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_CLK48_CLKSOURCE             RCC_CCIPR_CLK48SEL  /*!< CLK48 clock source selection bi
 607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_USB USB
 612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_USB_CLKSOURCE               LL_RCC_CLK48_CLKSOURCE  /*!< USB clock source selection 
 615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_RNG RNG
 620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RNG_CLKSOURCE               RCC_CCIPR_RNGSEL  /*!< RNG clock source selection bits *
 623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_ADC ADC
 628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_ADC_CLKSOURCE               RCC_CCIPR_ADCSEL   /*!< ADC clock source selection bits 
 631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_RTC_CLKSOURCE  RTC clock source selection
 637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RTC_CLKSOURCE_NONE          0x00000000U                   /*!< No clock used as RTC 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 184


 640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RTC_CLKSOURCE_LSE           RCC_BDCR_RTCSEL_0             /*!< LSE oscillator clock 
 641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RTC_CLKSOURCE_LSI           RCC_BDCR_RTCSEL_1             /*!< LSI oscillator clock 
 642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RTC_CLKSOURCE_HSE_DIV32     RCC_BDCR_RTCSEL               /*!< HSE oscillator clock 
 643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_RFWKP_CLKSOURCE  RF Wakeup clock source selection
 649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RFWKP_CLKSOURCE_NONE          0x00000000U                 /*!< No clock used as RF W
 652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RFWKP_CLKSOURCE_LSE           RCC_CSR_RFWKPSEL_0          /*!< LSE oscillator clock 
 653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024   RCC_CSR_RFWKPSEL            /*!< HSE oscillator clock 
 654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLLSOURCE  PLL and PLLSAI1 entry clock source
 661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSOURCE_NONE              0x00000000U                                    /*!< No c
 664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSOURCE_MSI               RCC_PLLCFGR_PLLSRC_0                           /*!< MSI 
 665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSOURCE_HSI               RCC_PLLCFGR_PLLSRC_1                           /*!< HSI 
 666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSOURCE_HSE               (RCC_PLLCFGR_PLLSRC_1 | RCC_PLLCFGR_PLLSRC_0)  /*!< HSE 
 667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 669:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 670:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 671:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLLM_DIV  PLL and PLLSAI1 division factor
 672:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 673:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 674:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLM_DIV_1                  0x00000000U                                 /*!< PLL and
 675:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLM_DIV_2                  (RCC_PLLCFGR_PLLM_0)                        /*!< PLL and
 676:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLM_DIV_3                  (RCC_PLLCFGR_PLLM_1)                        /*!< PLL and
 677:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLM_DIV_4                  ((RCC_PLLCFGR_PLLM_1 | RCC_PLLCFGR_PLLM_0)) /*!< PLL and
 678:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLM_DIV_5                  (RCC_PLLCFGR_PLLM_2)                        /*!< PLL and
 679:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLM_DIV_6                  ((RCC_PLLCFGR_PLLM_2 | RCC_PLLCFGR_PLLM_0)) /*!< PLL and
 680:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLM_DIV_7                  ((RCC_PLLCFGR_PLLM_2 | RCC_PLLCFGR_PLLM_1)) /*!< PLL and
 681:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLM_DIV_8                  (RCC_PLLCFGR_PLLM)                          /*!< PLL and
 682:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 683:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 684:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 685:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 686:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLLR_DIV  PLL division factor (PLLR)
 687:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 688:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 689:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLR_DIV_2                  (RCC_PLLCFGR_PLLR_0)                     /*!< Main PLL d
 690:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLR_DIV_3                  (RCC_PLLCFGR_PLLR_1)                     /*!< Main PLL d
 691:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLR_DIV_4                  (RCC_PLLCFGR_PLLR_1|RCC_PLLCFGR_PLLR_0)  /*!< Main PLL d
 692:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLR_DIV_5                  (RCC_PLLCFGR_PLLR_2)                     /*!< Main PLL d
 693:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLR_DIV_6                  (RCC_PLLCFGR_PLLR_2|RCC_PLLCFGR_PLLR_0)  /*!< Main PLL d
 694:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLR_DIV_7                  (RCC_PLLCFGR_PLLR_2|RCC_PLLCFGR_PLLR_1)  /*!< Main PLL d
 695:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLR_DIV_8                  (RCC_PLLCFGR_PLLR)                       /*!< Main PLL d
 696:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 185


 697:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 698:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 699:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 700:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLLP_DIV  PLL division factor (PLLP)
 701:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 702:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 703:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_2                  (RCC_PLLCFGR_PLLP_0)                                    
 704:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_3                  (RCC_PLLCFGR_PLLP_1)                                    
 705:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_4                  (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1)                 
 706:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_5                  (RCC_PLLCFGR_PLLP_2)                                    
 707:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_6                  (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_2)                 
 708:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_7                  (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2)                 
 709:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_8                  (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_
 710:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_9                  (RCC_PLLCFGR_PLLP_3)                                    
 711:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_10                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_3)                 
 712:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_11                 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_3)                 
 713:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_12                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_
 714:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_13                 (RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_3)                 
 715:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_14                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_
 716:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_15                 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_
 717:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_16                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_
 718:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_17                 (RCC_PLLCFGR_PLLP_4)                                    
 719:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_18                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_4)                 
 720:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_19                 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_4)                 
 721:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_20                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_
 722:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_21                 (RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_4)                 
 723:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_22                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_
 724:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_23                 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_
 725:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_24                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_
 726:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_25                 (RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_4)                 
 727:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_26                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_
 728:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_27                 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_
 729:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_28                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_
 730:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_29                 (RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_
 731:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_30                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_
 732:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_31                 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_
 733:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLP_DIV_32                 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_
 734:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 735:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 736:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 737:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 738:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLLQ_DIV  PLL division factor (PLLQ)
 739:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 740:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 741:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLQ_DIV_2                  (RCC_PLLCFGR_PLLQ_0)                    /*!< Main PLL di
 742:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLQ_DIV_3                  (RCC_PLLCFGR_PLLQ_1)                    /*!< Main PLL di
 743:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLQ_DIV_4                  (RCC_PLLCFGR_PLLQ_1|RCC_PLLCFGR_PLLQ_0) /*!< Main PLL di
 744:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLQ_DIV_5                  (RCC_PLLCFGR_PLLQ_2)                    /*!< Main PLL di
 745:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLQ_DIV_6                  (RCC_PLLCFGR_PLLQ_2|RCC_PLLCFGR_PLLQ_0) /*!< Main PLL di
 746:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLQ_DIV_7                  (RCC_PLLCFGR_PLLQ_2|RCC_PLLCFGR_PLLQ_1) /*!< Main PLL di
 747:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLQ_DIV_8                  (RCC_PLLCFGR_PLLQ)                      /*!< Main PLL di
 748:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 749:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 750:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 751:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 752:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 753:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(SAI1)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 186


 754:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLLSAI1Q  PLLSAI1 division factor (PLLQ)
 755:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 756:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 757:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1Q_DIV_2              (RCC_PLLSAI1CFGR_PLLQ_0)                                
 758:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1Q_DIV_3              (RCC_PLLSAI1CFGR_PLLQ_1)                                
 759:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1Q_DIV_4              (RCC_PLLSAI1CFGR_PLLQ_1 | RCC_PLLSAI1CFGR_PLLQ_0)       
 760:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1Q_DIV_5              (RCC_PLLSAI1CFGR_PLLQ_2)                                
 761:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1Q_DIV_6              (RCC_PLLSAI1CFGR_PLLQ_2 | RCC_PLLSAI1CFGR_PLLQ_0)       
 762:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1Q_DIV_7              (RCC_PLLSAI1CFGR_PLLQ_2 | RCC_PLLSAI1CFGR_PLLQ_1)       
 763:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1Q_DIV_8              (RCC_PLLSAI1CFGR_PLLQ_2 | RCC_PLLSAI1CFGR_PLLQ_1 | RCC_P
 764:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 765:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 766:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 767:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 768:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLLSAI1P  PLLSAI1 division factor (PLLP)
 769:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 770:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 771:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_2                  (RCC_PLLSAI1CFGR_PLLP_0)                            
 772:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_3                  (RCC_PLLSAI1CFGR_PLLP_1)                            
 773:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_4                  (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1)     
 774:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_5                  (RCC_PLLSAI1CFGR_PLLP_2)                            
 775:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_6                  (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_2)     
 776:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_7                  (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2)     
 777:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_8                  (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_P
 778:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_9                  (RCC_PLLSAI1CFGR_PLLP_3)                            
 779:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_10                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_3)     
 780:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_11                 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_3)     
 781:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_12                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_P
 782:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_13                 (RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_3)     
 783:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_14                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_2|RCC_P
 784:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_15                 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2|RCC_P
 785:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_16                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_P
 786:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_17                 (RCC_PLLSAI1CFGR_PLLP_4)                            
 787:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_18                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_4)     
 788:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_19                 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_4)     
 789:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_20                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_P
 790:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_21                 (RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_4)     
 791:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_22                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_2|RCC_P
 792:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_23                 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2|RCC_P
 793:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_24                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_P
 794:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_25                 (RCC_PLLSAI1CFGR_PLLP_3|RCC_PLLSAI1CFGR_PLLP_4)     
 795:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_26                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_3|RCC_P
 796:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_27                 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_3|RCC_P
 797:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_28                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_P
 798:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_29                 (RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_3|RCC_P
 799:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_30                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_2|RCC_P
 800:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_31                 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2|RCC_P
 801:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1P_DIV_32                 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_P
 802:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 803:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 804:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 805:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 806:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLLSAI1R  PLLSAI1 division factor (PLLR)
 807:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 808:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 809:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1R_DIV_2              (RCC_PLLSAI1CFGR_PLLR_0)                                
 810:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1R_DIV_3              (RCC_PLLSAI1CFGR_PLLR_1)                                
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 187


 811:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1R_DIV_4              (RCC_PLLSAI1CFGR_PLLR_1 | RCC_PLLSAI1CFGR_PLLR_0)       
 812:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1R_DIV_5              (RCC_PLLSAI1CFGR_PLLR_2)                                
 813:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1R_DIV_6              (RCC_PLLSAI1CFGR_PLLR_2 | RCC_PLLSAI1CFGR_PLLR_0)       
 814:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1R_DIV_7              (RCC_PLLSAI1CFGR_PLLR_2 | RCC_PLLSAI1CFGR_PLLR_1)       
 815:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_PLLSAI1R_DIV_8              (RCC_PLLSAI1CFGR_PLLR_2 | RCC_PLLSAI1CFGR_PLLR_1 | RCC_P
 816:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 817:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 818:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 819:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 820:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 821:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 822:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 823:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 824:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 825:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /* Exported macro ------------------------------------------------------------*/
 826:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_Exported_Macros RCC Exported Macros
 827:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 828:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 829:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 830:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EM_WRITE_READ Common Write and read registers Macros
 831:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 832:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 833:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 834:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 835:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Write a value in RCC register
 836:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __REG__ Register to be written
 837:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __VALUE__ Value to be written in the register
 838:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
 839:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 840:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_WriteReg(__REG__, __VALUE__) WRITE_REG(RCC->__REG__, (__VALUE__))
 841:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 842:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 843:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Read a value in RCC register
 844:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __REG__ Register to be read
 845:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval Register value
 846:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 847:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define LL_RCC_ReadReg(__REG__) READ_REG(RCC->__REG__)
 848:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 849:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
 850:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 851:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 852:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EM_CALC_FREQ Calculate frequencies
 853:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
 854:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 855:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 856:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 857:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the PLLRCLK frequency on system domain
 858:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note ex: @ref __LL_RCC_CALC_PLLCLK_FREQ (HSE_VALUE,@ref LL_RCC_PLL_GetDivider (),
 859:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *             @ref LL_RCC_PLL_GetN (), @ref LL_RCC_PLL_GetR ());
 860:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __INPUTFREQ__ PLL Input frequency (based on MSI/HSE/HSI)
 861:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLM__ This parameter can be one of the following values:
 862:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_1
 863:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_2
 864:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_3
 865:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_4
 866:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_5
 867:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_6
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 188


 868:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_7
 869:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_8
 870:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLN__ Between Min_Data = 6 and Max_Data = 127
 871:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLR__ This parameter can be one of the following values:
 872:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLR_DIV_2
 873:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLR_DIV_3
 874:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLR_DIV_4
 875:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLR_DIV_5
 876:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLR_DIV_6
 877:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLR_DIV_7
 878:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLR_DIV_8
 879:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval PLL clock frequency (in Hz)
 880:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 881:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_PLLCLK_FREQ(__INPUTFREQ__, __PLLM__, __PLLN__, __PLLR__) ((__INPUTFREQ__) * (
 882:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****                    (((__PLLR__) >> RCC_PLLCFGR_PLLR_Pos) + 1U))
 883:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 884:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(SAI1)
 885:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 886:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the PLLPCLK frequency used on SAI domain
 887:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note ex: @ref __LL_RCC_CALC_PLLCLK_SAI_FREQ (HSE_VALUE,@ref LL_RCC_PLL_GetDivider (),
 888:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *             @ref LL_RCC_PLL_GetN (), @ref LL_RCC_PLL_GetP ());
 889:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __INPUTFREQ__ PLL Input frequency (based on MSI/HSE/HSI)
 890:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLM__ This parameter can be one of the following values:
 891:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_1
 892:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_2
 893:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_3
 894:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_4
 895:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_5
 896:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_6
 897:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_7
 898:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_8
 899:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLN__ Between Min_Data = 6 and Max_Data = 127
 900:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLP__ This parameter can be one of the following values:
 901:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_2
 902:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_3
 903:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_4
 904:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_5
 905:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_6
 906:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_7
 907:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_8
 908:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_9
 909:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_10
 910:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_11
 911:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_12
 912:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_13
 913:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_14
 914:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_15
 915:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_16
 916:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_17
 917:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_18
 918:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_19
 919:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_20
 920:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_21
 921:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_22
 922:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_23
 923:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_24
 924:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_25
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 189


 925:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_26
 926:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_27
 927:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_28
 928:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_29
 929:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_30
 930:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_31
 931:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval PLL clock frequency (in Hz)
 932:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 933:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_PLLCLK_SAI_FREQ(__INPUTFREQ__, __PLLM__, __PLLN__, __PLLP__) ((__INPUTFREQ__)
 934:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****                    (((__PLLP__) >> RCC_PLLCFGR_PLLP_Pos) + 1U))
 935:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
 936:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 937:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 938:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the PLLPCLK frequency used on ADC domain
 939:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note ex: @ref __LL_RCC_CALC_PLLCLK_ADC_FREQ (HSE_VALUE,@ref LL_RCC_PLL_GetDivider (),
 940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *             @ref LL_RCC_PLL_GetN (), @ref LL_RCC_PLL_GetP ());
 941:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __INPUTFREQ__ PLL Input frequency (based on MSI/HSE/HSI)
 942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLM__ This parameter can be one of the following values:
 943:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_1
 944:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_2
 945:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_3
 946:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_4
 947:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_5
 948:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_6
 949:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_7
 950:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_8
 951:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLN__ Between Min_Data = 6 and Max_Data = 127
 952:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLP__ This parameter can be one of the following values:
 953:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_2
 954:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_3
 955:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_4
 956:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_5
 957:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_6
 958:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_7
 959:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_8
 960:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_9
 961:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_10
 962:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_11
 963:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_12
 964:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_13
 965:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_14
 966:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_15
 967:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_16
 968:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_17
 969:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_18
 970:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_19
 971:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_20
 972:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_21
 973:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_22
 974:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_23
 975:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_24
 976:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_25
 977:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_26
 978:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_27
 979:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_28
 980:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_29
 981:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_30
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 190


 982:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_31
 983:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLP_DIV_32
 984:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval PLL clock frequency (in Hz)
 985:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
 986:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_PLLCLK_ADC_FREQ(__INPUTFREQ__, __PLLM__, __PLLN__, __PLLP__) ((__INPUTFREQ__)
 987:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****                    (((__PLLP__) >> RCC_PLLCFGR_PLLP_Pos) + 1U))
 988:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 989:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
 990:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
 991:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the PLLQCLK frequency used on 48M domain
 992:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note ex: @ref __LL_RCC_CALC_PLLCLK_48M_FREQ (HSE_VALUE,@ref LL_RCC_PLL_GetDivider (),
 993:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *             @ref LL_RCC_PLL_GetN (), @ref LL_RCC_PLL_GetQ ());
 994:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __INPUTFREQ__ PLL Input frequency (based on MSI/HSE/HSI)
 995:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLM__ This parameter can be one of the following values:
 996:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_1
 997:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_2
 998:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_3
 999:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_4
1000:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_5
1001:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_6
1002:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_7
1003:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_8
1004:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLN__ Between Min_Data = 6 and Max_Data = 127
1005:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLQ__ This parameter can be one of the following values:
1006:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLQ_DIV_2
1007:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLQ_DIV_3
1008:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLQ_DIV_4
1009:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLQ_DIV_5
1010:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLQ_DIV_6
1011:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLQ_DIV_7
1012:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLQ_DIV_8
1013:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval PLL clock frequency (in Hz)
1014:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1015:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_PLLCLK_48M_FREQ(__INPUTFREQ__, __PLLM__, __PLLN__, __PLLQ__) ((__INPUTFREQ__)
1016:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****                    (((__PLLQ__) >> RCC_PLLCFGR_PLLQ_Pos) + 1U))
1017:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1018:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(SAI1)
1019:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1020:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the PLLSAI1PCLK frequency used for SAI domain
1021:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note ex: @ref __LL_RCC_CALC_PLLSAI1_SAI_FREQ (HSE_VALUE,@ref LL_RCC_PLL_GetDivider (),
1022:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *             @ref LL_RCC_PLLSAI1_GetN (), @ref LL_RCC_PLLSAI1_GetP ());
1023:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __INPUTFREQ__ PLL Input frequency (based on MSI/HSE/HSI)
1024:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLM__ This parameter can be one of the following values:
1025:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_1
1026:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_2
1027:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_3
1028:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_4
1029:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_5
1030:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_6
1031:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_7
1032:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_8
1033:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLSAI1N__ Between 6 and 127
1034:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLSAI1P__ This parameter can be one of the following values:
1035:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_2
1036:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_3
1037:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_4
1038:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_5
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 191


1039:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_6
1040:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_7
1041:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_8
1042:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_9
1043:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_10
1044:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_11
1045:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_12
1046:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_13
1047:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_14
1048:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_15
1049:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_16
1050:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_17
1051:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_18
1052:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_19
1053:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_20
1054:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_21
1055:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_22
1056:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_23
1057:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_24
1058:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_25
1059:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_26
1060:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_27
1061:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_28
1062:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_29
1063:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_30
1064:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_31
1065:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1P_DIV_32
1066:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval PLLSAI1 clock frequency (in Hz)
1067:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1068:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_PLLSAI1_SAI_FREQ(__INPUTFREQ__, __PLLM__, __PLLSAI1N__, __PLLSAI1P__) \
1069:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****                    ((__INPUTFREQ__) * (__PLLSAI1N__)  / ((((__PLLM__)>> RCC_PLLCFGR_PLLM_Pos) + 1U)
1070:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****                     (((__PLLSAI1P__) >> RCC_PLLSAI1CFGR_PLLP_Pos) + 1U))
1071:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1072:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1073:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the PLLSAI1QCLK frequency used on 48M domain
1074:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note ex: @ref __LL_RCC_CALC_PLLSAI1_48M_FREQ (HSE_VALUE,@ref LL_RCC_PLL_GetDivider (),
1075:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *             @ref LL_RCC_PLLSAI1_GetN (), @ref LL_RCC_PLLSAI1_GetQ ());
1076:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __INPUTFREQ__ PLL Input frequency (based on MSI/HSE/HSI)
1077:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLM__ This parameter can be one of the following values:
1078:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_1
1079:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_2
1080:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_3
1081:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_4
1082:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_5
1083:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_6
1084:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_7
1085:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_8
1086:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLSAI1N__ Between 6 and 127
1087:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLSAI1Q__ This parameter can be one of the following values:
1088:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1Q_DIV_2
1089:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1Q_DIV_3
1090:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1Q_DIV_4
1091:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1Q_DIV_5
1092:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1Q_DIV_6
1093:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1Q_DIV_7
1094:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
1095:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval PLLSAI1 clock frequency (in Hz)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 192


1096:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1097:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_PLLSAI1_48M_FREQ(__INPUTFREQ__, __PLLM__, __PLLSAI1N__, __PLLSAI1Q__) \
1098:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****                    ((__INPUTFREQ__) * (__PLLSAI1N__) / ((((__PLLM__)>> RCC_PLLCFGR_PLLM_Pos) + 1U))
1099:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****                     (((__PLLSAI1Q__) >> RCC_PLLSAI1CFGR_PLLQ_Pos) + 1U))
1100:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1101:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1102:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the PLLSAI1RCLK frequency used on ADC domain
1103:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note ex: @ref __LL_RCC_CALC_PLLSAI1_ADC_FREQ (HSE_VALUE,@ref LL_RCC_PLL_GetDivider (),
1104:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *             @ref LL_RCC_PLLSAI1_GetN (), @ref LL_RCC_PLLSAI1_GetR ());
1105:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __INPUTFREQ__ PLL Input frequency (based on MSI/HSE/HSI)
1106:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLM__ This parameter can be one of the following values:
1107:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_1
1108:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_2
1109:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_3
1110:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_4
1111:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_5
1112:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_6
1113:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_7
1114:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLM_DIV_8
1115:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLSAI1N__ Between 6 and 127
1116:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __PLLSAI1R__ This parameter can be one of the following values:
1117:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1R_DIV_2
1118:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1R_DIV_3
1119:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1R_DIV_4
1120:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1R_DIV_5
1121:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1R_DIV_6
1122:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1R_DIV_7
1123:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLLSAI1R_DIV_8
1124:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval PLLSAI1 clock frequency (in Hz)
1125:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1126:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_PLLSAI1_ADC_FREQ(__INPUTFREQ__, __PLLM__, __PLLSAI1N__, __PLLSAI1R__) \
1127:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****                    ((__INPUTFREQ__) * (__PLLSAI1N__) / ((((__PLLM__)>> RCC_PLLCFGR_PLLM_Pos) + 1U))
1128:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****                     (((__PLLSAI1R__) >> RCC_PLLSAI1CFGR_PLLR_Pos) + 1U))
1129:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
1130:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1131:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1132:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the HCLK1 frequency
1133:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __SYSCLKFREQ__ SYSCLK frequency (based on MSI/HSE/HSI/PLLCLK)
1134:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __CPU1PRESCALER__ This parameter can be one of the following values:
1135:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_1
1136:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_2
1137:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_3
1138:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_4
1139:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_5
1140:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_6
1141:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_8
1142:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_10
1143:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_16
1144:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_32
1145:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_64
1146:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_128
1147:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_256
1148:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_512
1149:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval HCLK1 clock frequency (in Hz)
1150:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1151:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_HCLK1_FREQ(__SYSCLKFREQ__,__CPU1PRESCALER__) ((__SYSCLKFREQ__) / AHBPrescTabl
1152:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 193


1153:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1154:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the HCLK2 frequency
1155:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __SYSCLKFREQ__ SYSCLK frequency (based on MSI/HSE/HSI/PLLCLK)
1156:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __CPU2PRESCALER__ This parameter can be one of the following values:
1157:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_1
1158:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_2
1159:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_3
1160:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_4
1161:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_5
1162:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_6
1163:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_8
1164:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_10
1165:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_16
1166:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_32
1167:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_64
1168:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_128
1169:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_256
1170:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_512
1171:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval HCLK2 clock frequency (in Hz)
1172:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1173:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_HCLK2_FREQ(__SYSCLKFREQ__, __CPU2PRESCALER__) ((__SYSCLKFREQ__) / AHBPrescTab
1174:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1175:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1176:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the HCLK4 frequency
1177:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __SYSCLKFREQ__ SYSCLK frequency (based on MSI/HSE/HSI/PLLCLK)
1178:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __AHB4PRESCALER__ This parameter can be one of the following values:
1179:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_1
1180:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_2
1181:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_3
1182:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_4
1183:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_5
1184:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_6
1185:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_8
1186:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_10
1187:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_16
1188:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_32
1189:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_64
1190:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_128
1191:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_256
1192:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_512
1193:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval HCLK4 clock frequency (in Hz)
1194:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1195:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_HCLK4_FREQ(__SYSCLKFREQ__, __AHB4PRESCALER__) ((__SYSCLKFREQ__) / AHBPrescTab
1196:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1197:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1198:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1199:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the PCLK1 frequency (ABP1)
1200:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __HCLKFREQ__ HCLK frequency
1201:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __APB1PRESCALER__ This parameter can be one of the following values:
1202:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_1
1203:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_2
1204:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_4
1205:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_8
1206:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_16
1207:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval PCLK1 clock frequency (in Hz)
1208:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1209:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_PCLK1_FREQ(__HCLKFREQ__, __APB1PRESCALER__) ((__HCLKFREQ__) >> (APBPrescTable
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 194


1210:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1211:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1212:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the PCLK2 frequency (ABP2)
1213:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __HCLKFREQ__ HCLK frequency
1214:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __APB2PRESCALER__ This parameter can be one of the following values:
1215:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_1
1216:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_2
1217:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_4
1218:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_8
1219:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_16
1220:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval PCLK2 clock frequency (in Hz)
1221:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1222:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_PCLK2_FREQ(__HCLKFREQ__, __APB2PRESCALER__) ((__HCLKFREQ__) >> (APBPrescTable
1223:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1224:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1225:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Helper macro to calculate the MSI frequency (in Hz)
1226:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note __MSIRANGE__can be retrieved by @ref LL_RCC_MSI_GetRange()
1227:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  __MSIRANGE__ This parameter can be one of the following values:
1228:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_0
1229:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_1
1230:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_2
1231:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_3
1232:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_4
1233:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_5
1234:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_6
1235:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_7
1236:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_8
1237:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_9
1238:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_10
1239:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_11
1240:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval MSI clock frequency (in Hz)
1241:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1242:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #define __LL_RCC_CALC_MSI_FREQ(__MSIRANGE__) MSIRangeTable[((__MSIRANGE__) & RCC_CR_MSIRANGE_Msk) >
1243:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1244:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
1245:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1246:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1247:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1248:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
1249:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1250:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1251:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /* Exported functions --------------------------------------------------------*/
1252:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_Exported_Functions RCC Exported Functions
1253:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
1254:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1255:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1256:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EF_HSE HSE
1257:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
1258:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1259:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1260:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1261:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Enable HSE sysclk and pll prescaler division by 2
1262:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSEPRE        LL_RCC_HSE_EnableDiv2
1263:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1264:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1265:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_EnableDiv2(void)
1266:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 195


1267:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSEPRE);
1268:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1269:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1270:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1271:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Disable HSE sysclk and pll prescaler
1272:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSEPRE        LL_RCC_HSE_DisableDiv2
1273:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1274:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1275:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_DisableDiv2(void)
1276:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1277:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEPRE);
1278:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1279:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1280:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1281:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Get HSE sysclk and pll prescaler
1282:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
1283:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1284:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1285:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
1286:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1287:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
1288:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1289:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1290:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1291:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Enable the Clock Security System.
1292:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
1293:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1294:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1295:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
1296:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1297:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_CSSON);
1298:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1299:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1300:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1301:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Enable HSE crystal oscillator (HSE ON)
1302:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
1303:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1304:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1305:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_Enable(void)
1306:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1307:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSEON);
1308:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1309:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1310:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1311:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Disable HSE crystal oscillator (HSE ON)
1312:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
1313:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1314:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1315:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_Disable(void)
1316:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1317:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
1318:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1319:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1320:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1321:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Check if HSE oscillator Ready
1322:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
1323:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval State of bit (1 or 0).
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 196


1324:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1325:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
1326:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1327:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1328:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1329:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1330:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1331:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Check if HSE clock control register is locked or not
1332:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll HSECR           UNLOCKED        LL_RCC_HSE_IsClockControlLocked
1333:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval State of bit (1 or 0).
1334:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1335:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSE_IsClockControlLocked(void)
1336:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1337:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return ((READ_BIT(RCC->HSECR, RCC_HSECR_UNLOCKED) != (RCC_HSECR_UNLOCKED)) ? 1UL : 0UL);
1338:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1339:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1340:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1341:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Set HSE capacitor tuning
1342:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
1343:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  Value Between Min_Data = 0 and Max_Data = 63
1344:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1345:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1346:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
1347:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1348:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
1349:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
1350:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1351:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1352:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1353:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Get HSE capacitor tuning
1354:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_GetCapacitorTuning
1355:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval Between Min_Data = 0 and Max_Data = 63
1356:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1357:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSE_GetCapacitorTuning(void)
1358:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1359:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->HSECR, RCC_HSECR_HSETUNE) >> RCC_HSECR_HSETUNE_Pos);
1360:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1361:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1362:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1363:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Set HSE current control
1364:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll HSECR        HSEGMC       LL_RCC_HSE_SetCurrentControl
1365:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  CurrentMax This parameter can be one of the following values:
1366:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_0
1367:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_1
1368:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_2
1369:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_3
1370:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_4
1371:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
1372:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
1373:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
1374:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1375:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
1376:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1377:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
1378:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   MODIFY_REG(RCC->HSECR, RCC_HSECR_HSEGMC, CurrentMax);
1379:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1380:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 197


1381:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1382:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Get HSE current control
1383:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll HSECR        HSEGMC       LL_RCC_HSE_GetCurrentControl
1384:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1385:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_0
1386:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_1
1387:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_2
1388:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_3
1389:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_4
1390:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
1391:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
1392:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
1393:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1394:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSE_GetCurrentControl(void)
1395:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1396:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->HSECR, RCC_HSECR_HSEGMC));
1397:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1398:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1399:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1400:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Set HSE sense amplifier threshold
1401:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll HSECR        HSES       LL_RCC_HSE_SetSenseAmplifier
1402:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  SenseAmplifier This parameter can be one of the following values:
1403:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSEAMPTHRESHOLD_1_2
1404:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSEAMPTHRESHOLD_3_4
1405:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1406:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_SetSenseAmplifier(uint32_t SenseAmplifier)
1407:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1408:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
1409:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   MODIFY_REG(RCC->HSECR, RCC_HSECR_HSES, SenseAmplifier);
1410:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1411:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1412:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1413:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Get HSE current control
1414:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll HSECR        HSES       LL_RCC_HSE_GetSenseAmplifier
1415:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1416:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSEAMPTHRESHOLD_1_2
1417:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_HSEAMPTHRESHOLD_3_4
1418:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1419:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSE_GetSenseAmplifier(void)
1420:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1421:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->HSECR, RCC_HSECR_HSES));
1422:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1423:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1424:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
1425:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1426:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1427:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EF_HSI HSI
1428:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
1429:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1430:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1431:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1432:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Enable HSI even in stop mode
1433:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note HSI oscillator is forced ON even in Stop mode
1434:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSIKERON      LL_RCC_HSI_EnableInStopMode
1435:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1436:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1437:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_EnableInStopMode(void)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 198


1438:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1439:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSIKERON);
1440:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1441:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1442:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1443:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Disable HSI in stop mode
1444:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSIKERON      LL_RCC_HSI_DisableInStopMode
1445:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1446:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1447:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_DisableInStopMode(void)
1448:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1449:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSIKERON);
1450:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1451:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1452:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1453:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Check if HSI in stop mode is ready
1454:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSIKERON        LL_RCC_HSI_IsEnabledInStopMode
1455:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval State of bit (1 or 0).
1456:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1457:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI_IsEnabledInStopMode(void)
1458:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1459:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return ((READ_BIT(RCC->CR, RCC_CR_HSIKERON) == (RCC_CR_HSIKERON)) ? 1UL : 0UL);
1460:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1462:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Enable HSI oscillator
1464:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSION         LL_RCC_HSI_Enable
1465:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1466:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1467:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_Enable(void)
1468:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1469:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSION);
1470:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1471:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1472:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1473:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Disable HSI oscillator
1474:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSION         LL_RCC_HSI_Disable
1475:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1476:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1477:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_Disable(void)
1478:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1479:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSION);
1480:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1481:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1482:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1483:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Check if HSI clock is ready
1484:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
1485:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval State of bit (1 or 0).
1486:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1487:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
1488:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1489:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
1490:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1491:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1492:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1493:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Enable HSI Automatic from stop mode
1494:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSIASFS       LL_RCC_HSI_EnableAutoFromStop
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 199


1495:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1496:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1497:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_EnableAutoFromStop(void)
1498:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1499:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSIASFS);
1500:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1501:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1502:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1503:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Disable HSI Automatic from stop mode
1504:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CR           HSIASFS       LL_RCC_HSI_DisableAutoFromStop
1505:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1506:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1507:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_DisableAutoFromStop(void)
1508:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1509:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSIASFS);
1510:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1511:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1512:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Get HSI Calibration value
1513:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note When HSITRIM is written, HSICAL is updated with the sum of
1514:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *       HSITRIM and the factory trim value
1515:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll ICSCR        HSICAL        LL_RCC_HSI_GetCalibration
1516:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval Between Min_Data = 0x00 and Max_Data = 0xFF
1517:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1518:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI_GetCalibration(void)
1519:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1520:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_HSICAL) >> RCC_ICSCR_HSICAL_Pos);
1521:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1522:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1523:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1524:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Set HSI Calibration trimming
1525:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note user-programmable trimming value that is added to the HSICAL
1526:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note Default value is 64, which, when added to the HSICAL value,
1527:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *       should trim the HSI to 16 MHz +/- 1 %
1528:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
1529:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  Value Between Min_Data = 0 and Max_Data = 127
1530:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1531:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1532:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
1533:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1534:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
1535:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1536:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1537:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1538:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Get HSI Calibration trimming
1539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_GetCalibTrimming
1540:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval Between Min_Data = 0 and Max_Data = 127
1541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI_GetCalibTrimming(void)
1543:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos);
1545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
1549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 200


1552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EF_HSI48 HSI48
1553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
1554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Enable HSI48
1558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
1559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI48_Enable(void)
1562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
1564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Disable HSI48
1568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
1569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI48_Disable(void)
1572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
1574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Check if HSI48 oscillator Ready
1578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
1579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval State of bit (1 or 0).
1580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
1582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
1584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Get HSI48 Calibration value
1588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll CRRCR          HSI48CAL      LL_RCC_HSI48_GetCalibration
1589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval Between Min_Data = 0x00 and Max_Data = 0x1FF
1590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI48_GetCalibration(void)
1592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48CAL) >> RCC_CRRCR_HSI48CAL_Pos);
1594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @}
1598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** #endif
1600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /** @defgroup RCC_LL_EF_LSE LSE
1602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @{
1603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Enable  Low Speed External (LSE) crystal.
1607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
1608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 201


1609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_Enable(void)
1611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
1613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Disable  Low Speed External (LSE) crystal.
1617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
1618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_Disable(void)
1621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
1623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Check if Low Speed External (LSE) crystal has been enabled or not
1627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll BDCR         LSEON         LL_RCC_LSE_IsEnabled
1628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval State of bit (1 or 0).
1629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_LSE_IsEnabled(void)
1631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
1633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Enable external clock source (LSE bypass).
1637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
1638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
1641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
1643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Disable external clock source (LSE bypass).
1647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
1648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
1650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
1651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
1653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** }
1654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** 
1655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** /**
1656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @brief  Set LSE oscillator drive capability
1657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @note The oscillator is in Xtal mode when it is not in bypass mode.
1658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @rmtoll BDCR         LSEDRV        LL_RCC_LSE_SetDriveCapability
1659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @param  LSEDrive This parameter can be one of the following values:
1660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_LOW
1661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMLOW
1662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
1663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_HIGH
1664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   * @retval None
1665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   */
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 202


1666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
 1216              		.loc 6 1666 22 view .LVU363
 1217              	.LBB86:
1667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h **** {
1668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_rcc.h ****   MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 1218              		.loc 6 1668 3 view .LVU364
 1219 003a D5F89030 		ldr	r3, [r5, #144]
 1220 003e 23F01803 		bic	r3, r3, #24
 1221 0042 C5F89030 		str	r3, [r5, #144]
 1222              	.LVL55:
 1223              		.loc 6 1668 3 is_stmt 0 view .LVU365
 1224              	.LBE86:
 1225              	.LBE85:
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1226              		.loc 1 254 3 is_stmt 1 view .LVU366
 1227              	.LBB87:
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1228              		.loc 1 254 3 view .LVU367
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1229              		.loc 1 254 3 view .LVU368
 1230 0046 194A     		ldr	r2, .L79
 1231 0048 1368     		ldr	r3, [r2]
 1232 004a 23F4C063 		bic	r3, r3, #1536
 1233 004e 43F40073 		orr	r3, r3, #512
 1234 0052 1360     		str	r3, [r2]
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1235              		.loc 1 254 3 view .LVU369
 1236 0054 1368     		ldr	r3, [r2]
 1237 0056 03F4C063 		and	r3, r3, #1536
 1238 005a 0093     		str	r3, [sp]
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1239              		.loc 1 254 3 view .LVU370
 1240 005c 009B     		ldr	r3, [sp]
 1241              	.LBE87:
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1242              		.loc 1 254 3 view .LVU371
 258:Core/Src/main.c ****                               |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 1243              		.loc 1 258 3 view .LVU372
 258:Core/Src/main.c ****                               |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 1244              		.loc 1 258 36 is_stmt 0 view .LVU373
 1245 005e 4723     		movs	r3, #71
 1246 0060 0893     		str	r3, [sp, #32]
 260:Core/Src/main.c ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 1247              		.loc 1 260 3 is_stmt 1 view .LVU374
 260:Core/Src/main.c ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 1248              		.loc 1 260 30 is_stmt 0 view .LVU375
 1249 0062 4FF48033 		mov	r3, #65536
 1250 0066 0993     		str	r3, [sp, #36]
 261:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1251              		.loc 1 261 3 is_stmt 1 view .LVU376
 261:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1252              		.loc 1 261 30 is_stmt 0 view .LVU377
 1253 0068 0123     		movs	r3, #1
 1254 006a 0A93     		str	r3, [sp, #40]
 262:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1255              		.loc 1 262 3 is_stmt 1 view .LVU378
 262:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 203


 1256              		.loc 1 262 30 is_stmt 0 view .LVU379
 1257 006c 4FF48072 		mov	r2, #256
 1258 0070 0B92     		str	r2, [sp, #44]
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1259              		.loc 1 263 3 is_stmt 1 view .LVU380
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1260              		.loc 1 263 32 is_stmt 0 view .LVU381
 1261 0072 1293     		str	r3, [sp, #72]
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1262              		.loc 1 264 3 is_stmt 1 view .LVU382
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1263              		.loc 1 264 41 is_stmt 0 view .LVU383
 1264 0074 4023     		movs	r3, #64
 1265 0076 0C93     		str	r3, [sp, #48]
 265:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1266              		.loc 1 265 3 is_stmt 1 view .LVU384
 265:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1267              		.loc 1 265 34 is_stmt 0 view .LVU385
 1268 0078 1394     		str	r4, [sp, #76]
 266:Core/Src/main.c ****   {
 1269              		.loc 1 266 3 is_stmt 1 view .LVU386
 266:Core/Src/main.c ****   {
 1270              		.loc 1 266 7 is_stmt 0 view .LVU387
 1271 007a 08A8     		add	r0, sp, #32
 1272 007c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1273              	.LVL56:
 266:Core/Src/main.c ****   {
 1274              		.loc 1 266 6 view .LVU388
 1275 0080 80B9     		cbnz	r0, .L77
 272:Core/Src/main.c ****                               |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 1276              		.loc 1 272 3 is_stmt 1 view .LVU389
 272:Core/Src/main.c ****                               |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 1277              		.loc 1 272 31 is_stmt 0 view .LVU390
 1278 0082 6F23     		movs	r3, #111
 1279 0084 0193     		str	r3, [sp, #4]
 275:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1280              		.loc 1 275 3 is_stmt 1 view .LVU391
 275:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1281              		.loc 1 275 34 is_stmt 0 view .LVU392
 1282 0086 0223     		movs	r3, #2
 1283 0088 0293     		str	r3, [sp, #8]
 276:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1284              		.loc 1 276 3 is_stmt 1 view .LVU393
 276:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1285              		.loc 1 276 35 is_stmt 0 view .LVU394
 1286 008a 0023     		movs	r3, #0
 1287 008c 0393     		str	r3, [sp, #12]
 277:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1288              		.loc 1 277 3 is_stmt 1 view .LVU395
 277:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1289              		.loc 1 277 36 is_stmt 0 view .LVU396
 1290 008e 0493     		str	r3, [sp, #16]
 278:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 1291              		.loc 1 278 3 is_stmt 1 view .LVU397
 278:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 1292              		.loc 1 278 36 is_stmt 0 view .LVU398
 1293 0090 0593     		str	r3, [sp, #20]
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 204


 279:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 1294              		.loc 1 279 3 is_stmt 1 view .LVU399
 279:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 1295              		.loc 1 279 36 is_stmt 0 view .LVU400
 1296 0092 0693     		str	r3, [sp, #24]
 280:Core/Src/main.c **** 
 1297              		.loc 1 280 3 is_stmt 1 view .LVU401
 280:Core/Src/main.c **** 
 1298              		.loc 1 280 36 is_stmt 0 view .LVU402
 1299 0094 0793     		str	r3, [sp, #28]
 282:Core/Src/main.c ****   {
 1300              		.loc 1 282 3 is_stmt 1 view .LVU403
 282:Core/Src/main.c ****   {
 1301              		.loc 1 282 7 is_stmt 0 view .LVU404
 1302 0096 0121     		movs	r1, #1
 1303 0098 01A8     		add	r0, sp, #4
 1304 009a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1305              	.LVL57:
 282:Core/Src/main.c ****   {
 1306              		.loc 1 282 6 view .LVU405
 1307 009e 18B9     		cbnz	r0, .L78
 286:Core/Src/main.c **** 
 1308              		.loc 1 286 1 view .LVU406
 1309 00a0 1BB0     		add	sp, sp, #108
 1310              	.LCFI24:
 1311              		.cfi_remember_state
 1312              		.cfi_def_cfa_offset 12
 1313              		@ sp needed
 1314 00a2 30BD     		pop	{r4, r5, pc}
 1315              	.L77:
 1316              	.LCFI25:
 1317              		.cfi_restore_state
 268:Core/Src/main.c ****   }
 1318              		.loc 1 268 5 is_stmt 1 view .LVU407
 1319 00a4 FFF7FEFF 		bl	Error_Handler
 1320              	.LVL58:
 1321              	.L78:
 284:Core/Src/main.c ****   }
 1322              		.loc 1 284 5 view .LVU408
 1323 00a8 FFF7FEFF 		bl	Error_Handler
 1324              	.LVL59:
 1325              	.L80:
 1326              		.align	2
 1327              	.L79:
 1328 00ac 00040058 		.word	1476396032
 1329              		.cfi_endproc
 1330              	.LFE1825:
 1332              		.section	.text.PeriphCommonClock_Config,"ax",%progbits
 1333              		.align	1
 1334              		.global	PeriphCommonClock_Config
 1335              		.syntax unified
 1336              		.thumb
 1337              		.thumb_func
 1338              		.fpu fpv4-sp-d16
 1340              	PeriphCommonClock_Config:
 1341              	.LFB1826:
 293:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 205


 1342              		.loc 1 293 1 view -0
 1343              		.cfi_startproc
 1344              		@ args = 0, pretend = 0, frame = 80
 1345              		@ frame_needed = 0, uses_anonymous_args = 0
 1346 0000 00B5     		push	{lr}
 1347              	.LCFI26:
 1348              		.cfi_def_cfa_offset 4
 1349              		.cfi_offset 14, -4
 1350 0002 95B0     		sub	sp, sp, #84
 1351              	.LCFI27:
 1352              		.cfi_def_cfa_offset 88
 294:Core/Src/main.c **** 
 1353              		.loc 1 294 3 view .LVU410
 294:Core/Src/main.c **** 
 1354              		.loc 1 294 28 is_stmt 0 view .LVU411
 1355 0004 4022     		movs	r2, #64
 1356 0006 0021     		movs	r1, #0
 1357 0008 01A8     		add	r0, sp, #4
 1358 000a FFF7FEFF 		bl	memset
 1359              	.LVL60:
 298:Core/Src/main.c ****   PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 1360              		.loc 1 298 3 is_stmt 1 view .LVU412
 298:Core/Src/main.c ****   PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 1361              		.loc 1 298 44 is_stmt 0 view .LVU413
 1362 000e 4FF44053 		mov	r3, #12288
 1363 0012 0093     		str	r3, [sp]
 299:Core/Src/main.c ****   PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 1364              		.loc 1 299 3 is_stmt 1 view .LVU414
 299:Core/Src/main.c ****   PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 1365              		.loc 1 299 46 is_stmt 0 view .LVU415
 1366 0014 4FF48043 		mov	r3, #16384
 1367 0018 1193     		str	r3, [sp, #68]
 300:Core/Src/main.c ****   PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 1368              		.loc 1 300 3 is_stmt 1 view .LVU416
 300:Core/Src/main.c ****   PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 1369              		.loc 1 300 42 is_stmt 0 view .LVU417
 1370 001a 0023     		movs	r3, #0
 1371 001c 1293     		str	r3, [sp, #72]
 301:Core/Src/main.c **** 
 1372              		.loc 1 301 3 is_stmt 1 view .LVU418
 301:Core/Src/main.c **** 
 1373              		.loc 1 301 40 is_stmt 0 view .LVU419
 1374 001e 1023     		movs	r3, #16
 1375 0020 1393     		str	r3, [sp, #76]
 303:Core/Src/main.c ****   {
 1376              		.loc 1 303 3 is_stmt 1 view .LVU420
 303:Core/Src/main.c ****   {
 1377              		.loc 1 303 7 is_stmt 0 view .LVU421
 1378 0022 6846     		mov	r0, sp
 1379 0024 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1380              	.LVL61:
 303:Core/Src/main.c ****   {
 1381              		.loc 1 303 6 view .LVU422
 1382 0028 10B9     		cbnz	r0, .L84
 310:Core/Src/main.c **** 
 1383              		.loc 1 310 1 view .LVU423
 1384 002a 15B0     		add	sp, sp, #84
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 206


 1385              	.LCFI28:
 1386              		.cfi_remember_state
 1387              		.cfi_def_cfa_offset 4
 1388              		@ sp needed
 1389 002c 5DF804FB 		ldr	pc, [sp], #4
 1390              	.L84:
 1391              	.LCFI29:
 1392              		.cfi_restore_state
 305:Core/Src/main.c ****   }
 1393              		.loc 1 305 5 is_stmt 1 view .LVU424
 1394 0030 FFF7FEFF 		bl	Error_Handler
 1395              	.LVL62:
 1396              		.cfi_endproc
 1397              	.LFE1826:
 1399              		.section	.text.main,"ax",%progbits
 1400              		.align	1
 1401              		.global	main
 1402              		.syntax unified
 1403              		.thumb
 1404              		.thumb_func
 1405              		.fpu fpv4-sp-d16
 1407              	main:
 1408              	.LFB1824:
 122:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1409              		.loc 1 122 1 view -0
 1410              		.cfi_startproc
 1411              		@ Volatile: function does not return.
 1412              		@ args = 0, pretend = 0, frame = 0
 1413              		@ frame_needed = 0, uses_anonymous_args = 0
 1414 0000 08B5     		push	{r3, lr}
 1415              	.LCFI30:
 1416              		.cfi_def_cfa_offset 8
 1417              		.cfi_offset 3, -8
 1418              		.cfi_offset 14, -4
 128:Core/Src/main.c ****   int command_length;
 1419              		.loc 1 128 3 view .LVU426
 129:Core/Src/main.c ****   /* USER CODE END 1 */
 1420              		.loc 1 129 3 view .LVU427
 135:Core/Src/main.c ****   /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
 1421              		.loc 1 135 3 view .LVU428
 1422 0002 FFF7FEFF 		bl	HAL_Init
 1423              	.LVL63:
 137:Core/Src/main.c **** 
 1424              		.loc 1 137 3 view .LVU429
 1425 0006 FFF7FEFF 		bl	MX_APPE_Config
 1426              	.LVL64:
 144:Core/Src/main.c **** 
 1427              		.loc 1 144 3 view .LVU430
 1428 000a FFF7FEFF 		bl	SystemClock_Config
 1429              	.LVL65:
 147:Core/Src/main.c **** 
 1430              		.loc 1 147 3 view .LVU431
 1431 000e FFF7FEFF 		bl	PeriphCommonClock_Config
 1432              	.LVL66:
 150:Core/Src/main.c **** 
 1433              		.loc 1 150 4 view .LVU432
 1434 0012 FFF7FEFF 		bl	MX_IPCC_Init
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 207


 1435              	.LVL67:
 157:Core/Src/main.c ****   MX_DMA_Init();
 1436              		.loc 1 157 3 view .LVU433
 1437 0016 FFF7FEFF 		bl	MX_GPIO_Init
 1438              	.LVL68:
 158:Core/Src/main.c ****   MX_RF_Init();
 1439              		.loc 1 158 3 view .LVU434
 1440 001a FFF7FEFF 		bl	MX_DMA_Init
 1441              	.LVL69:
 159:Core/Src/main.c ****   MX_RTC_Init();
 1442              		.loc 1 159 3 view .LVU435
 160:Core/Src/main.c ****   MX_RNG_Init();
 1443              		.loc 1 160 3 view .LVU436
 1444 001e FFF7FEFF 		bl	MX_RTC_Init
 1445              	.LVL70:
 161:Core/Src/main.c ****   MX_ADC1_Init();
 1446              		.loc 1 161 3 view .LVU437
 1447 0022 FFF7FEFF 		bl	MX_RNG_Init
 1448              	.LVL71:
 162:Core/Src/main.c ****   MX_TIM2_Init();
 1449              		.loc 1 162 3 view .LVU438
 1450 0026 FFF7FEFF 		bl	MX_ADC1_Init
 1451              	.LVL72:
 163:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1452              		.loc 1 163 3 view .LVU439
 1453 002a FFF7FEFF 		bl	MX_TIM2_Init
 1454              	.LVL73:
 170:Core/Src/main.c ****     MX_USART1_UART_Init();
 1455              		.loc 1 170 3 view .LVU440
 187:Core/Src/main.c ****   /* Infinite loop */
 1456              		.loc 1 187 3 view .LVU441
 1457 002e FFF7FEFF 		bl	MX_APPE_Init
 1458              	.LVL74:
 192:Core/Src/main.c ****   command_index = 0;
 1459              		.loc 1 192 3 view .LVU442
 192:Core/Src/main.c ****   command_index = 0;
 1460              		.loc 1 192 25 is_stmt 0 view .LVU443
 1461 0032 0023     		movs	r3, #0
 1462 0034 174A     		ldr	r2, .L91
 1463 0036 1360     		str	r3, [r2]
 193:Core/Src/main.c ****   memset(command_buffer, 0, MAX_COMMAND_BUFF_LENGTH);
 1464              		.loc 1 193 3 is_stmt 1 view .LVU444
 193:Core/Src/main.c ****   memset(command_buffer, 0, MAX_COMMAND_BUFF_LENGTH);
 1465              		.loc 1 193 17 is_stmt 0 view .LVU445
 1466 0038 174A     		ldr	r2, .L91+4
 1467 003a 1360     		str	r3, [r2]
 194:Core/Src/main.c **** 
 1468              		.loc 1 194 3 is_stmt 1 view .LVU446
 1469 003c 174A     		ldr	r2, .L91+8
 1470 003e 1360     		str	r3, [r2]	@ unaligned
 1471 0040 5360     		str	r3, [r2, #4]	@ unaligned
 1472 0042 9360     		str	r3, [r2, #8]	@ unaligned
 1473 0044 D360     		str	r3, [r2, #12]	@ unaligned
 1474 0046 1361     		str	r3, [r2, #16]	@ unaligned
 197:Core/Src/main.c **** 
 1475              		.loc 1 197 3 view .LVU447
 1476 0048 1548     		ldr	r0, .L91+12
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 208


 1477 004a FFF7FEFF 		bl	flash_write_init
 1478              	.LVL75:
 200:Core/Src/main.c **** 
 1479              		.loc 1 200 3 view .LVU448
 1480 004e FFF7FEFF 		bl	prompt
 1481              	.LVL76:
 204:Core/Src/main.c ****   LL_USART_EnableIT_ERROR(USART1);
 1482              		.loc 1 204 3 view .LVU449
 1483              	.LBB88:
 1484              	.LBI88:
3461:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** {
 1485              		.loc 3 3461 22 view .LVU450
 1486              	.L86:
 1487              	.LBE88:
3463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1488              		.loc 3 3463 3 view .LVU451
 1489              	.LBB94:
 1490              	.LBB89:
3463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1491              		.loc 3 3463 3 view .LVU452
3463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1492              		.loc 3 3463 3 view .LVU453
3463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1493              		.loc 3 3463 3 view .LVU454
 1494 0052 144A     		ldr	r2, .L91+16
 1495              	.LVL77:
 1496              	.LBB90:
 1497              	.LBI90:
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 959:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 967:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 969:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 972:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 209


 976:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 977:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 978:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 979:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 980:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 981:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 985:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 986:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 992:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 993:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 994:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 995:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1000:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1001:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
1007:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1010:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1021:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
1027:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1028:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1031:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1032:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 210


1033:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1041:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1042:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1047:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1050:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1051:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1056:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1057:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1059:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1062:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1068:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1070:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
1086:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 211


1090:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
1092:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1093:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
1094:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1095:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1096:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1097:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1098:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1099:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1100:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1101:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1104:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1105:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1106:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1107:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1108:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1109:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1110:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1111:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1112:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1113:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1114:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1115:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1116:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1117:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1119:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1120:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1123:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1124:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1127:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1131:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1132:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1133:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1134:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1135:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1136:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1137:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1138:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1139:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1140:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1141:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1142:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1143:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1145:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 212


1147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
1148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 1498              		.loc 5 1151 31 view .LVU455
 1499              	.LBB91:
1152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1153:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 1500              		.loc 5 1153 5 view .LVU456
1154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 1501              		.loc 5 1155 4 view .LVU457
 1502              		.syntax unified
 1503              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1504 0054 52E8003F 		ldrex r3, [r2]
 1505              	@ 0 "" 2
 1506              	.LVL78:
1156:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1507              		.loc 5 1156 4 view .LVU458
 1508              		.loc 5 1156 4 is_stmt 0 view .LVU459
 1509              		.thumb
 1510              		.syntax unified
 1511              	.LBE91:
 1512              	.LBE90:
3463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1513              		.loc 3 3463 3 view .LVU460
 1514 0058 43F02003 		orr	r3, r3, #32
 1515              	.LVL79:
3463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1516              		.loc 3 3463 3 is_stmt 1 view .LVU461
 1517              	.LBB92:
 1518              	.LBI92:
1157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1160:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1161:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1165:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1166:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1167:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1168:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1169:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1170:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1171:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1172:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1173:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1174:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1177:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1180:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 213


1181:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1182:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1184:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1185:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1186:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1187:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1188:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1189:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1190:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1198:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1199:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1200:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1201:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1202:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 1519              		.loc 5 1202 31 view .LVU462
 1520              	.LBB93:
1203:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1204:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 1521              		.loc 5 1204 4 view .LVU463
1205:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 1522              		.loc 5 1206 4 view .LVU464
 1523              		.syntax unified
 1524              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1525 005c 42E80031 		strex r1, r3, [r2]
 1526              	@ 0 "" 2
 1527              	.LVL80:
1207:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1528              		.loc 5 1207 4 view .LVU465
 1529              		.loc 5 1207 4 is_stmt 0 view .LVU466
 1530              		.thumb
 1531              		.syntax unified
 1532              	.LBE93:
 1533              	.LBE92:
3463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1534              		.loc 3 3463 3 view .LVU467
 1535 0060 0029     		cmp	r1, #0
 1536 0062 F6D1     		bne	.L86
 1537              	.LVL81:
 1538              	.L87:
3463:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1539              		.loc 3 3463 3 view .LVU468
 1540              	.LBE89:
 1541              	.LBE94:
3588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1542              		.loc 3 3588 3 is_stmt 1 view .LVU469
 1543              	.LBB95:
 1544              	.LBB96:
3588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 214


 1545              		.loc 3 3588 3 view .LVU470
3588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1546              		.loc 3 3588 3 view .LVU471
3588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1547              		.loc 3 3588 3 view .LVU472
 1548 0064 104A     		ldr	r2, .L91+20
 1549              	.LVL82:
 1550              	.LBB97:
 1551              	.LBI97:
1151:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1552              		.loc 5 1151 31 view .LVU473
 1553              	.LBB98:
1153:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1554              		.loc 5 1153 5 view .LVU474
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1555              		.loc 5 1155 4 view .LVU475
 1556              		.syntax unified
 1557              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1558 0066 52E8003F 		ldrex r3, [r2]
 1559              	@ 0 "" 2
 1560              	.LVL83:
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1561              		.loc 5 1156 4 view .LVU476
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1562              		.loc 5 1156 4 is_stmt 0 view .LVU477
 1563              		.thumb
 1564              		.syntax unified
 1565              	.LBE98:
 1566              	.LBE97:
3588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1567              		.loc 3 3588 3 view .LVU478
 1568 006a 43F00103 		orr	r3, r3, #1
 1569              	.LVL84:
3588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1570              		.loc 3 3588 3 is_stmt 1 view .LVU479
 1571              	.LBB99:
 1572              	.LBI99:
1202:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1573              		.loc 5 1202 31 view .LVU480
 1574              	.LBB100:
1204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1575              		.loc 5 1204 4 view .LVU481
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1576              		.loc 5 1206 4 view .LVU482
 1577              		.syntax unified
 1578              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1579 006e 42E80031 		strex r1, r3, [r2]
 1580              	@ 0 "" 2
 1581              	.LVL85:
 1582              		.loc 5 1207 4 view .LVU483
 1583              		.loc 5 1207 4 is_stmt 0 view .LVU484
 1584              		.thumb
 1585              		.syntax unified
 1586              	.LBE100:
 1587              	.LBE99:
3588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1588              		.loc 3 3588 3 view .LVU485
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 215


 1589 0072 0029     		cmp	r1, #0
 1590 0074 F6D1     		bne	.L87
 1591              	.LBE96:
 1592              	.LBE95:
3588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_usart.h **** }
 1593              		.loc 3 3588 3 is_stmt 1 view .LVU486
 1594              	.LVL86:
 211:Core/Src/main.c ****   if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 1595              		.loc 1 211 3 view .LVU487
 1596 0076 0D4C     		ldr	r4, .L91+24
 1597 0078 2046     		mov	r0, r4
 1598 007a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1599              	.LVL87:
 212:Core/Src/main.c ****   {
 1600              		.loc 1 212 3 view .LVU488
 212:Core/Src/main.c ****   {
 1601              		.loc 1 212 6 is_stmt 0 view .LVU489
 1602 007e 0021     		movs	r1, #0
 1603 0080 2046     		mov	r0, r4
 1604 0082 FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 1605              	.LVL88:
 212:Core/Src/main.c ****   {
 1606              		.loc 1 212 5 view .LVU490
 1607 0086 10B9     		cbnz	r0, .L90
 1608              	.L88:
 223:Core/Src/main.c ****   {
 1609              		.loc 1 223 3 is_stmt 1 discriminator 1 view .LVU491
 226:Core/Src/main.c **** 
 1610              		.loc 1 226 5 discriminator 1 view .LVU492
 1611 0088 FFF7FEFF 		bl	MX_APPE_Process
 1612              	.LVL89:
 223:Core/Src/main.c ****   {
 1613              		.loc 1 223 9 discriminator 1 view .LVU493
 1614 008c FCE7     		b	.L88
 1615              	.L90:
 215:Core/Src/main.c ****   }
 1616              		.loc 1 215 5 view .LVU494
 1617 008e FFF7FEFF 		bl	Error_Handler
 1618              	.LVL90:
 1619              	.L92:
 1620 0092 00BF     		.align	2
 1621              	.L91:
 1622 0094 00000000 		.word	complete_command_flag
 1623 0098 00000000 		.word	command_index
 1624 009c 00000000 		.word	command_buffer
 1625 00a0 00000000 		.word	flash_status
 1626 00a4 00380140 		.word	1073821696
 1627 00a8 08380140 		.word	1073821704
 1628 00ac 00000000 		.word	htim2
 1629              		.cfi_endproc
 1630              	.LFE1824:
 1632              		.section	.text.MX_LPUART1_UART_Init,"ax",%progbits
 1633              		.align	1
 1634              		.global	MX_LPUART1_UART_Init
 1635              		.syntax unified
 1636              		.thumb
 1637              		.thumb_func
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 216


 1638              		.fpu fpv4-sp-d16
 1640              	MX_LPUART1_UART_Init:
 1641              	.LFB1829:
 400:Core/Src/main.c **** 
 1642              		.loc 1 400 1 view -0
 1643              		.cfi_startproc
 1644              		@ args = 0, pretend = 0, frame = 8
 1645              		@ frame_needed = 0, uses_anonymous_args = 0
 1646 0000 00B5     		push	{lr}
 1647              	.LCFI31:
 1648              		.cfi_def_cfa_offset 4
 1649              		.cfi_offset 14, -4
 1650 0002 83B0     		sub	sp, sp, #12
 1651              	.LCFI32:
 1652              		.cfi_def_cfa_offset 16
 407:Core/Src/main.c **** 
 1653              		.loc 1 407 3 view .LVU496
 1654              	.LVL91:
 1655              	.LBB101:
 1656              	.LBI101:
 546:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 547:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 548:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 549:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Check if AHB2 peripheral clock is enabled or not
 550:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB2ENR      GPIOAEN       LL_AHB2_GRP1_IsEnabledClock\n
 551:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOBEN       LL_AHB2_GRP1_IsEnabledClock\n
 552:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOCEN       LL_AHB2_GRP1_IsEnabledClock\n
 553:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIODEN       LL_AHB2_GRP1_IsEnabledClock\n
 554:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOEEN       LL_AHB2_GRP1_IsEnabledClock\n
 555:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOHEN       LL_AHB2_GRP1_IsEnabledClock\n
 556:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      ADCEN         LL_AHB2_GRP1_IsEnabledClock\n
 557:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      AES1EN        LL_AHB2_GRP1_IsEnabledClock
 558:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 559:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOA
 560:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOB
 561:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
 562:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOD (*)
 563:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOE
 564:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
 565:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC (*)
 566:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
 567:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 568:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval uint32_t
 569:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 570:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
 571:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 572:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 573:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 574:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 575:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 576:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Disable AHB2 peripherals clock.
 577:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB2ENR      GPIOAEN       LL_AHB2_GRP1_DisableClock\n
 578:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOBEN       LL_AHB2_GRP1_DisableClock\n
 579:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOCEN       LL_AHB2_GRP1_DisableClock\n
 580:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIODEN       LL_AHB2_GRP1_DisableClock\n
 581:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOEEN       LL_AHB2_GRP1_DisableClock\n
 582:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      GPIOHEN       LL_AHB2_GRP1_DisableClock\n
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 217


 583:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      ADCEN         LL_AHB2_GRP1_DisableClock\n
 584:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2ENR      AES1EN        LL_AHB2_GRP1_DisableClock
 585:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 586:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOA
 587:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOB
 588:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
 589:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOD (*)
 590:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOE
 591:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
 592:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC (*)
 593:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
 594:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 595:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 596:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 597:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
 598:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 599:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   CLEAR_BIT(RCC->AHB2ENR, Periphs);
 600:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 601:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 602:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 603:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Force AHB2 peripherals reset.
 604:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB2RSTR     GPIOARST      LL_AHB2_GRP1_ForceReset\n
 605:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     GPIOBRST      LL_AHB2_GRP1_ForceReset\n
 606:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     GPIOCRST      LL_AHB2_GRP1_ForceReset\n
 607:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     GPIODRST      LL_AHB2_GRP1_ForceReset\n
 608:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     GPIOERST      LL_AHB2_GRP1_ForceReset\n
 609:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     GPIOHRST      LL_AHB2_GRP1_ForceReset\n
 610:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     ADCRST        LL_AHB2_GRP1_ForceReset\n
 611:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     AES1RST       LL_AHB2_GRP1_ForceReset
 612:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 613:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_ALL
 614:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOA
 615:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOB
 616:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
 617:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOD (*)
 618:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOE
 619:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
 620:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC (*)
 621:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
 622:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 623:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 624:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 625:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB2_GRP1_ForceReset(uint32_t Periphs)
 626:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 627:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB2RSTR, Periphs);
 628:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 629:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 630:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 631:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Release AHB2 peripherals reset.
 632:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB2RSTR     GPIOARST      LL_AHB2_GRP1_ReleaseReset\n
 633:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     GPIOBRST      LL_AHB2_GRP1_ReleaseReset\n
 634:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     GPIOCRST      LL_AHB2_GRP1_ReleaseReset\n
 635:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     GPIODRST      LL_AHB2_GRP1_ReleaseReset\n
 636:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     GPIOERST      LL_AHB2_GRP1_ReleaseReset\n
 637:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     GPIOHRST      LL_AHB2_GRP1_ReleaseReset\n
 638:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     ADCRST        LL_AHB2_GRP1_ReleaseReset\n
 639:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2RSTR     AES1RST       LL_AHB2_GRP1_ReleaseReset
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 218


 640:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 641:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_ALL
 642:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOA
 643:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOB
 644:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
 645:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOD (*)
 646:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOE
 647:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
 648:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC (*)
 649:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
 650:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 651:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 652:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 653:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB2_GRP1_ReleaseReset(uint32_t Periphs)
 654:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 655:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 656:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 657:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 658:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 659:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Enable AHB2 peripherals clock during Low Power (Sleep) mode.
 660:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB2SMENR    GPIOASMEN     LL_AHB2_GRP1_EnableClockSleep\n
 661:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    GPIOBSMEN     LL_AHB2_GRP1_EnableClockSleep\n
 662:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    GPIOCSMEN     LL_AHB2_GRP1_EnableClockSleep\n
 663:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    GPIODSMEN     LL_AHB2_GRP1_EnableClockSleep\n
 664:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    GPIOESMEN     LL_AHB2_GRP1_EnableClockSleep\n
 665:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    GPIOHSMEN     LL_AHB2_GRP1_EnableClockSleep\n
 666:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    ADCSMEN       LL_AHB2_GRP1_EnableClockSleep\n
 667:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    AES1SMEN      LL_AHB2_GRP1_EnableClockSleep
 668:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 669:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOA
 670:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOB
 671:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
 672:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOD (*)
 673:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOE
 674:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
 675:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC (*)
 676:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
 677:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 678:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 679:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 680:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB2_GRP1_EnableClockSleep(uint32_t Periphs)
 681:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 682:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   __IO uint32_t tmpreg;
 683:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB2SMENR, Periphs);
 684:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 685:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHB2SMENR, Periphs);
 686:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 687:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 688:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 689:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 690:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Disable AHB2 peripherals clock during Low Power (Sleep) mode.
 691:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB2SMENR    GPIOASMEN     LL_AHB2_GRP1_DisableClockSleep\n
 692:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    GPIOBSMEN     LL_AHB2_GRP1_DisableClockSleep\n
 693:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    GPIOCSMEN     LL_AHB2_GRP1_DisableClockSleep\n
 694:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    GPIODSMEN     LL_AHB2_GRP1_DisableClockSleep\n
 695:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    GPIOESMEN     LL_AHB2_GRP1_DisableClockSleep\n
 696:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    GPIOHSMEN     LL_AHB2_GRP1_DisableClockSleep\n
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 219


 697:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    ADCSMEN       LL_AHB2_GRP1_DisableClockSleep\n
 698:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB2SMENR    AES1SMEN      LL_AHB2_GRP1_DisableClockSleep
 699:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 700:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOA
 701:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOB
 702:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
 703:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOD (*)
 704:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOE
 705:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
 706:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC (*)
 707:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
 708:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 709:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 710:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 711:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB2_GRP1_DisableClockSleep(uint32_t Periphs)
 712:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 713:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   CLEAR_BIT(RCC->AHB2SMENR, Periphs);
 714:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 715:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 716:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 717:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 718:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 719:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 720:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EF_AHB3 AHB3
 721:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 722:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 723:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 724:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 725:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Enable AHB3 peripherals clock.
 726:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB3ENR      QUADSPIEN     LL_AHB3_GRP1_EnableClock\n
 727:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      PKAEN         LL_AHB3_GRP1_EnableClock\n
 728:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      AES2EN        LL_AHB3_GRP1_EnableClock\n
 729:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      RNGEN         LL_AHB3_GRP1_EnableClock\n
 730:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      HSEMEN        LL_AHB3_GRP1_EnableClock\n
 731:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      IPCCEN        LL_AHB3_GRP1_EnableClock\n
 732:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      FLASHEN       LL_AHB3_GRP1_EnableClock
 733:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 734:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_QUADSPI (*)
 735:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_PKA
 736:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_AES2
 737:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_RNG
 738:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_HSEM
 739:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
 740:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
 741:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 742:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 743:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 744:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
 745:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 746:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   __IO uint32_t tmpreg;
 747:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB3ENR, Periphs);
 748:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 749:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 750:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 751:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 752:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 753:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 220


 754:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Check if AHB3 peripheral clock is enabled or not
 755:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB3ENR      QUADSPIEN     LL_AHB3_GRP1_IsEnabledClock\n
 756:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      PKAEN         LL_AHB3_GRP1_IsEnabledClock\n
 757:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      AES2EN        LL_AHB3_GRP1_IsEnabledClock\n
 758:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      RNGEN         LL_AHB3_GRP1_IsEnabledClock\n
 759:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      HSEMEN        LL_AHB3_GRP1_IsEnabledClock\n
 760:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      IPCCEN        LL_AHB3_GRP1_IsEnabledClock\n
 761:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      FLASHEN       LL_AHB3_GRP1_IsEnabledClock
 762:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 763:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_QUADSPI (*)
 764:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_PKA
 765:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_AES2
 766:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_RNG
 767:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_HSEM
 768:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
 769:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
 770:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 771:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval uint32_t
 772:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 773:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE uint32_t LL_AHB3_GRP1_IsEnabledClock(uint32_t Periphs)
 774:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 775:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   return ((READ_BIT(RCC->AHB3ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 776:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 777:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 778:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 779:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Disable AHB3 peripherals clock.
 780:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB3ENR      QUADSPIEN     LL_AHB3_GRP1_DisableClock\n
 781:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      PKAEN         LL_AHB3_GRP1_DisableClock\n
 782:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      AES2EN        LL_AHB3_GRP1_DisableClock\n
 783:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      RNGEN         LL_AHB3_GRP1_DisableClock\n
 784:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      HSEMEN        LL_AHB3_GRP1_DisableClock\n
 785:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      IPCCEN        LL_AHB3_GRP1_DisableClock\n
 786:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3ENR      FLASHEN       LL_AHB3_GRP1_DisableClock
 787:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 788:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_QUADSPI (*)
 789:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_PKA
 790:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_AES2
 791:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_RNG
 792:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_HSEM
 793:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
 794:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
 795:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 796:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 797:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 798:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB3_GRP1_DisableClock(uint32_t Periphs)
 799:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 800:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   CLEAR_BIT(RCC->AHB3ENR, Periphs);
 801:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 802:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 803:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 804:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Force AHB3 peripherals reset.
 805:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB3RSTR     QUADSPIRST       LL_AHB3_GRP1_ForceReset\n
 806:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     PKARST        LL_AHB3_GRP1_ForceReset\n
 807:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     AES2RST       LL_AHB3_GRP1_ForceReset\n
 808:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     RNGRST        LL_AHB3_GRP1_ForceReset\n
 809:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     HSEMRST       LL_AHB3_GRP1_ForceReset\n
 810:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     IPCCRST       LL_AHB3_GRP1_ForceReset\n
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 221


 811:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     FLASHRST      LL_AHB3_GRP1_ForceReset
 812:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 813:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_ALL
 814:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_QUADSPI (*)
 815:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_PKA
 816:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_AES2
 817:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_RNG
 818:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_HSEM
 819:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
 820:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
 821:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 822:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 823:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 824:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB3_GRP1_ForceReset(uint32_t Periphs)
 825:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 826:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB3RSTR, Periphs);
 827:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 828:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 829:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 830:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Release AHB3 peripherals reset.
 831:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB3RSTR     QUADSPIRST    LL_AHB3_GRP1_ReleaseReset\n
 832:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     PKARST        LL_AHB3_GRP1_ReleaseReset\n
 833:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     AES2RST       LL_AHB3_GRP1_ReleaseReset\n
 834:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     RNGRST        LL_AHB3_GRP1_ReleaseReset\n
 835:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     HSEMRST       LL_AHB3_GRP1_ReleaseReset\n
 836:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     IPCCRST       LL_AHB3_GRP1_ReleaseReset\n
 837:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3RSTR     FLASHRST      LL_AHB3_GRP1_ReleaseReset
 838:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 839:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB2_GRP1_PERIPH_ALL
 840:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_QUADSPI (*)
 841:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_PKA
 842:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_AES2
 843:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_RNG
 844:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_HSEM
 845:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
 846:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
 847:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 848:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 849:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 850:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB3_GRP1_ReleaseReset(uint32_t Periphs)
 851:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 852:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 853:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 854:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 855:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 856:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Enable AHB3 peripherals clock during Low Power (Sleep) mode.
 857:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB3SMENR    QUADSPISMEN   LL_AHB3_GRP1_EnableClockSleep\n
 858:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3SMENR    PKASMEN       LL_AHB3_GRP1_EnableClockSleep\n
 859:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3SMENR    AES2SMEN      LL_AHB3_GRP1_EnableClockSleep\n
 860:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3SMENR    RNGSMEN       LL_AHB3_GRP1_EnableClockSleep\n
 861:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3SMENR    SRAM2SMEN     LL_AHB3_GRP1_EnableClockSleep\n
 862:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3SMENR    FLASHSMEN     LL_AHB3_GRP1_EnableClockSleep
 863:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 864:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_QUADSPI (*)
 865:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_PKA
 866:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_AES2
 867:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_RNG
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 222


 868:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_SRAM2
 869:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 870:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
 871:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 872:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 873:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB3_GRP1_EnableClockSleep(uint32_t Periphs)
 874:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 875:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   __IO uint32_t tmpreg;
 876:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB3SMENR, Periphs);
 877:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 878:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHB3SMENR, Periphs);
 879:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 880:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 881:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 882:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 883:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Disable AHB3 peripherals clock during Low Power (Sleep) mode.
 884:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll AHB3SMENR    QUADSPISMEN   LL_AHB3_GRP1_DisableClockSleep\n
 885:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3SMENR    PKASMEN       LL_AHB3_GRP1_DisableClockSleep\n
 886:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3SMENR    AES2SMEN      LL_AHB3_GRP1_DisableClockSleep\n
 887:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3SMENR    RNGSMEN       LL_AHB3_GRP1_DisableClockSleep\n
 888:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3SMENR    SRAM2SMEN     LL_AHB3_GRP1_DisableClockSleep\n
 889:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         AHB3SMENR    FLASHSMEN     LL_AHB3_GRP1_DisableClockSleep
 890:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 891:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_QUADSPI (*)
 892:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_PKA
 893:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_AES2
 894:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_RNG
 895:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_SRAM2
 896:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
 897:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 898:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 899:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 900:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_AHB3_GRP1_DisableClockSleep(uint32_t Periphs)
 901:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 902:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   CLEAR_BIT(RCC->AHB3SMENR, Periphs);
 903:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 904:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 905:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 906:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @}
 907:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 908:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 909:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /** @defgroup BUS_LL_EF_APB1 APB1
 910:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @{
 911:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 912:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 913:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 914:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Enable APB1 peripherals clock.
 915:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll APB1ENR1     TIM2EN        LL_APB1_GRP1_EnableClock\n
 916:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         APB1ENR1     LCDEN         LL_APB1_GRP1_EnableClock\n
 917:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         APB1ENR1     RTCAPBEN      LL_APB1_GRP1_EnableClock\n
 918:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         APB1ENR1     WWDGEN        LL_APB1_GRP1_EnableClock\n
 919:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         APB1ENR1     SPI2EN        LL_APB1_GRP1_EnableClock\n
 920:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         APB1ENR1     I2C1EN        LL_APB1_GRP1_EnableClock\n
 921:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         APB1ENR1     I2C3EN        LL_APB1_GRP1_EnableClock\n
 922:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         APB1ENR1     CRSEN         LL_APB1_GRP1_EnableClock\n
 923:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         APB1ENR1     USBEN         LL_APB1_GRP1_EnableClock\n
 924:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         APB1ENR1     LPTIM1EN      LL_APB1_GRP1_EnableClock
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 223


 925:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 926:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 927:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 928:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_RTCAPB
 929:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 930:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 931:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 932:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C3 (*)
 933:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CRS (*)
 934:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 935:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
 936:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 937:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 938:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 939:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
 940:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 941:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   __IO uint32_t tmpreg;
 942:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->APB1ENR1, Periphs);
 943:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 944:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 945:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 946:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 947:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** 
 948:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** /**
 949:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @brief  Enable APB1 peripherals clock.
 950:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @rmtoll APB1ENR2     LPUART1EN     LL_APB1_GRP2_EnableClock\n
 951:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         APB1ENR2     LPTIM2EN      LL_APB1_GRP2_EnableClock
 952:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 953:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP2_PERIPH_LPUART1 (*)
 954:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
 955:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @note  (*) Not supported by all the devices
 956:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   * @retval None
 957:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   */
 958:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
 1657              		.loc 2 958 22 view .LVU497
 1658              	.LBB102:
 959:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 960:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   __IO uint32_t tmpreg;
 1659              		.loc 2 960 3 view .LVU498
 961:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->APB1ENR2, Periphs);
 1660              		.loc 2 961 3 view .LVU499
 1661 0004 4FF0B043 		mov	r3, #1476395008
 1662 0008 DA6D     		ldr	r2, [r3, #92]
 1663 000a 42F00102 		orr	r2, r2, #1
 1664 000e DA65     		str	r2, [r3, #92]
 962:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 963:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 1665              		.loc 2 963 3 view .LVU500
 1666              		.loc 2 963 12 is_stmt 0 view .LVU501
 1667 0010 DA6D     		ldr	r2, [r3, #92]
 1668 0012 02F00102 		and	r2, r2, #1
 1669              		.loc 2 963 10 view .LVU502
 1670 0016 0192     		str	r2, [sp, #4]
 964:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 1671              		.loc 2 964 3 is_stmt 1 view .LVU503
 1672 0018 019A     		ldr	r2, [sp, #4]
 1673              	.LVL92:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 224


 1674              		.loc 2 964 3 is_stmt 0 view .LVU504
 1675              	.LBE102:
 1676              	.LBE101:
 409:Core/Src/main.c ****   /* USER CODE END LPUART1_Init 1 */
 1677              		.loc 1 409 3 is_stmt 1 view .LVU505
 1678              	.LBB103:
 1679              	.LBI103:
 539:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** {
 1680              		.loc 2 539 22 view .LVU506
 1681              	.LBB104:
 541:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   SET_BIT(RCC->AHB2ENR, Periphs);
 1682              		.loc 2 541 3 view .LVU507
 542:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 1683              		.loc 2 542 3 view .LVU508
 1684 001a DA6C     		ldr	r2, [r3, #76]
 1685 001c 42F00402 		orr	r2, r2, #4
 1686 0020 DA64     		str	r2, [r3, #76]
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 1687              		.loc 2 544 3 view .LVU509
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 1688              		.loc 2 544 12 is_stmt 0 view .LVU510
 1689 0022 DB6C     		ldr	r3, [r3, #76]
 1690 0024 03F00403 		and	r3, r3, #4
 544:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h ****   (void)tmpreg;
 1691              		.loc 2 544 10 view .LVU511
 1692 0028 0093     		str	r3, [sp]
 545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 1693              		.loc 2 545 3 is_stmt 1 view .LVU512
 1694 002a 009B     		ldr	r3, [sp]
 1695              	.LVL93:
 545:Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_bus.h **** }
 1696              		.loc 2 545 3 is_stmt 0 view .LVU513
 1697              	.LBE104:
 1698              	.LBE103:
 411:Core/Src/main.c ****   hlpuart1.Init.BaudRate = 115200;
 1699              		.loc 1 411 3 is_stmt 1 view .LVU514
 411:Core/Src/main.c ****   hlpuart1.Init.BaudRate = 115200;
 1700              		.loc 1 411 21 is_stmt 0 view .LVU515
 1701 002c 1648     		ldr	r0, .L103
 1702 002e 174B     		ldr	r3, .L103+4
 1703 0030 0360     		str	r3, [r0]
 412:Core/Src/main.c ****   hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 1704              		.loc 1 412 3 is_stmt 1 view .LVU516
 412:Core/Src/main.c ****   hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 1705              		.loc 1 412 26 is_stmt 0 view .LVU517
 1706 0032 4FF4E133 		mov	r3, #115200
 1707 0036 4360     		str	r3, [r0, #4]
 413:Core/Src/main.c ****   hlpuart1.Init.StopBits = UART_STOPBITS_1;
 1708              		.loc 1 413 3 is_stmt 1 view .LVU518
 413:Core/Src/main.c ****   hlpuart1.Init.StopBits = UART_STOPBITS_1;
 1709              		.loc 1 413 28 is_stmt 0 view .LVU519
 1710 0038 0023     		movs	r3, #0
 1711 003a 8360     		str	r3, [r0, #8]
 414:Core/Src/main.c ****   hlpuart1.Init.Parity = UART_PARITY_NONE;
 1712              		.loc 1 414 3 is_stmt 1 view .LVU520
 414:Core/Src/main.c ****   hlpuart1.Init.Parity = UART_PARITY_NONE;
 1713              		.loc 1 414 26 is_stmt 0 view .LVU521
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 225


 1714 003c C360     		str	r3, [r0, #12]
 415:Core/Src/main.c ****   hlpuart1.Init.Mode = UART_MODE_TX_RX;
 1715              		.loc 1 415 3 is_stmt 1 view .LVU522
 415:Core/Src/main.c ****   hlpuart1.Init.Mode = UART_MODE_TX_RX;
 1716              		.loc 1 415 24 is_stmt 0 view .LVU523
 1717 003e 0361     		str	r3, [r0, #16]
 416:Core/Src/main.c ****   hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1718              		.loc 1 416 3 is_stmt 1 view .LVU524
 416:Core/Src/main.c ****   hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1719              		.loc 1 416 22 is_stmt 0 view .LVU525
 1720 0040 0C22     		movs	r2, #12
 1721 0042 4261     		str	r2, [r0, #20]
 417:Core/Src/main.c ****   hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1722              		.loc 1 417 3 is_stmt 1 view .LVU526
 417:Core/Src/main.c ****   hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1723              		.loc 1 417 27 is_stmt 0 view .LVU527
 1724 0044 8361     		str	r3, [r0, #24]
 418:Core/Src/main.c ****   hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 1725              		.loc 1 418 3 is_stmt 1 view .LVU528
 418:Core/Src/main.c ****   hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 1726              		.loc 1 418 32 is_stmt 0 view .LVU529
 1727 0046 0362     		str	r3, [r0, #32]
 419:Core/Src/main.c ****   hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1728              		.loc 1 419 3 is_stmt 1 view .LVU530
 419:Core/Src/main.c ****   hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1729              		.loc 1 419 32 is_stmt 0 view .LVU531
 1730 0048 4362     		str	r3, [r0, #36]
 420:Core/Src/main.c ****   hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 1731              		.loc 1 420 3 is_stmt 1 view .LVU532
 420:Core/Src/main.c ****   hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 1732              		.loc 1 420 40 is_stmt 0 view .LVU533
 1733 004a 8362     		str	r3, [r0, #40]
 421:Core/Src/main.c ****   if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 1734              		.loc 1 421 3 is_stmt 1 view .LVU534
 421:Core/Src/main.c ****   if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 1735              		.loc 1 421 21 is_stmt 0 view .LVU535
 1736 004c 4366     		str	r3, [r0, #100]
 422:Core/Src/main.c ****   {
 1737              		.loc 1 422 3 is_stmt 1 view .LVU536
 422:Core/Src/main.c ****   {
 1738              		.loc 1 422 7 is_stmt 0 view .LVU537
 1739 004e FFF7FEFF 		bl	HAL_UART_Init
 1740              	.LVL94:
 422:Core/Src/main.c ****   {
 1741              		.loc 1 422 6 view .LVU538
 1742 0052 80B9     		cbnz	r0, .L99
 426:Core/Src/main.c ****   {
 1743              		.loc 1 426 3 is_stmt 1 view .LVU539
 426:Core/Src/main.c ****   {
 1744              		.loc 1 426 7 is_stmt 0 view .LVU540
 1745 0054 0021     		movs	r1, #0
 1746 0056 0C48     		ldr	r0, .L103
 1747 0058 FFF7FEFF 		bl	HAL_UARTEx_SetTxFifoThreshold
 1748              	.LVL95:
 426:Core/Src/main.c ****   {
 1749              		.loc 1 426 6 view .LVU541
 1750 005c 68B9     		cbnz	r0, .L100
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 226


 430:Core/Src/main.c ****   {
 1751              		.loc 1 430 3 is_stmt 1 view .LVU542
 430:Core/Src/main.c ****   {
 1752              		.loc 1 430 7 is_stmt 0 view .LVU543
 1753 005e 0021     		movs	r1, #0
 1754 0060 0948     		ldr	r0, .L103
 1755 0062 FFF7FEFF 		bl	HAL_UARTEx_SetRxFifoThreshold
 1756              	.LVL96:
 430:Core/Src/main.c ****   {
 1757              		.loc 1 430 6 view .LVU544
 1758 0066 50B9     		cbnz	r0, .L101
 434:Core/Src/main.c ****   {
 1759              		.loc 1 434 3 is_stmt 1 view .LVU545
 434:Core/Src/main.c ****   {
 1760              		.loc 1 434 7 is_stmt 0 view .LVU546
 1761 0068 0748     		ldr	r0, .L103
 1762 006a FFF7FEFF 		bl	HAL_UARTEx_DisableFifoMode
 1763              	.LVL97:
 434:Core/Src/main.c ****   {
 1764              		.loc 1 434 6 view .LVU547
 1765 006e 40B9     		cbnz	r0, .L102
 449:Core/Src/main.c **** 
 1766              		.loc 1 449 1 view .LVU548
 1767 0070 03B0     		add	sp, sp, #12
 1768              	.LCFI33:
 1769              		.cfi_remember_state
 1770              		.cfi_def_cfa_offset 4
 1771              		@ sp needed
 1772 0072 5DF804FB 		ldr	pc, [sp], #4
 1773              	.L99:
 1774              	.LCFI34:
 1775              		.cfi_restore_state
 424:Core/Src/main.c ****   }
 1776              		.loc 1 424 5 is_stmt 1 view .LVU549
 1777 0076 FFF7FEFF 		bl	Error_Handler
 1778              	.LVL98:
 1779              	.L100:
 428:Core/Src/main.c ****   }
 1780              		.loc 1 428 5 view .LVU550
 1781 007a FFF7FEFF 		bl	Error_Handler
 1782              	.LVL99:
 1783              	.L101:
 432:Core/Src/main.c ****   }
 1784              		.loc 1 432 5 view .LVU551
 1785 007e FFF7FEFF 		bl	Error_Handler
 1786              	.LVL100:
 1787              	.L102:
 436:Core/Src/main.c ****   }
 1788              		.loc 1 436 5 view .LVU552
 1789 0082 FFF7FEFF 		bl	Error_Handler
 1790              	.LVL101:
 1791              	.L104:
 1792 0086 00BF     		.align	2
 1793              	.L103:
 1794 0088 00000000 		.word	hlpuart1
 1795 008c 00800040 		.word	1073774592
 1796              		.cfi_endproc
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 227


 1797              	.LFE1829:
 1799              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1800              		.align	1
 1801              		.global	MX_USART1_UART_Init
 1802              		.syntax unified
 1803              		.thumb
 1804              		.thumb_func
 1805              		.fpu fpv4-sp-d16
 1807              	MX_USART1_UART_Init:
 1808              	.LFB1830:
 457:Core/Src/main.c **** 
 1809              		.loc 1 457 1 view -0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 0
 1812              		@ frame_needed = 0, uses_anonymous_args = 0
 1813 0000 08B5     		push	{r3, lr}
 1814              	.LCFI35:
 1815              		.cfi_def_cfa_offset 8
 1816              		.cfi_offset 3, -8
 1817              		.cfi_offset 14, -4
 466:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1818              		.loc 1 466 3 view .LVU554
 466:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1819              		.loc 1 466 19 is_stmt 0 view .LVU555
 1820 0002 1648     		ldr	r0, .L115
 1821 0004 164B     		ldr	r3, .L115+4
 1822 0006 0360     		str	r3, [r0]
 467:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1823              		.loc 1 467 3 is_stmt 1 view .LVU556
 467:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1824              		.loc 1 467 24 is_stmt 0 view .LVU557
 1825 0008 4FF4E133 		mov	r3, #115200
 1826 000c 4360     		str	r3, [r0, #4]
 468:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1827              		.loc 1 468 3 is_stmt 1 view .LVU558
 468:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1828              		.loc 1 468 26 is_stmt 0 view .LVU559
 1829 000e 0023     		movs	r3, #0
 1830 0010 8360     		str	r3, [r0, #8]
 469:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1831              		.loc 1 469 3 is_stmt 1 view .LVU560
 469:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1832              		.loc 1 469 24 is_stmt 0 view .LVU561
 1833 0012 C360     		str	r3, [r0, #12]
 470:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1834              		.loc 1 470 3 is_stmt 1 view .LVU562
 470:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1835              		.loc 1 470 22 is_stmt 0 view .LVU563
 1836 0014 0361     		str	r3, [r0, #16]
 471:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1837              		.loc 1 471 3 is_stmt 1 view .LVU564
 471:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1838              		.loc 1 471 20 is_stmt 0 view .LVU565
 1839 0016 0C22     		movs	r2, #12
 1840 0018 4261     		str	r2, [r0, #20]
 472:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 1841              		.loc 1 472 3 is_stmt 1 view .LVU566
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 228


 472:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 1842              		.loc 1 472 25 is_stmt 0 view .LVU567
 1843 001a 8361     		str	r3, [r0, #24]
 473:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1844              		.loc 1 473 3 is_stmt 1 view .LVU568
 473:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1845              		.loc 1 473 28 is_stmt 0 view .LVU569
 1846 001c 4FF40042 		mov	r2, #32768
 1847 0020 C261     		str	r2, [r0, #28]
 474:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 1848              		.loc 1 474 3 is_stmt 1 view .LVU570
 474:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 1849              		.loc 1 474 30 is_stmt 0 view .LVU571
 1850 0022 0362     		str	r3, [r0, #32]
 475:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1851              		.loc 1 475 3 is_stmt 1 view .LVU572
 475:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1852              		.loc 1 475 30 is_stmt 0 view .LVU573
 1853 0024 4362     		str	r3, [r0, #36]
 476:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1854              		.loc 1 476 3 is_stmt 1 view .LVU574
 476:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1855              		.loc 1 476 38 is_stmt 0 view .LVU575
 1856 0026 8362     		str	r3, [r0, #40]
 477:Core/Src/main.c ****   {
 1857              		.loc 1 477 3 is_stmt 1 view .LVU576
 477:Core/Src/main.c ****   {
 1858              		.loc 1 477 7 is_stmt 0 view .LVU577
 1859 0028 FFF7FEFF 		bl	HAL_UART_Init
 1860              	.LVL102:
 477:Core/Src/main.c ****   {
 1861              		.loc 1 477 6 view .LVU578
 1862 002c 70B9     		cbnz	r0, .L111
 481:Core/Src/main.c ****   {
 1863              		.loc 1 481 3 is_stmt 1 view .LVU579
 481:Core/Src/main.c ****   {
 1864              		.loc 1 481 7 is_stmt 0 view .LVU580
 1865 002e 0021     		movs	r1, #0
 1866 0030 0A48     		ldr	r0, .L115
 1867 0032 FFF7FEFF 		bl	HAL_UARTEx_SetTxFifoThreshold
 1868              	.LVL103:
 481:Core/Src/main.c ****   {
 1869              		.loc 1 481 6 view .LVU581
 1870 0036 58B9     		cbnz	r0, .L112
 485:Core/Src/main.c ****   {
 1871              		.loc 1 485 3 is_stmt 1 view .LVU582
 485:Core/Src/main.c ****   {
 1872              		.loc 1 485 7 is_stmt 0 view .LVU583
 1873 0038 0021     		movs	r1, #0
 1874 003a 0848     		ldr	r0, .L115
 1875 003c FFF7FEFF 		bl	HAL_UARTEx_SetRxFifoThreshold
 1876              	.LVL104:
 485:Core/Src/main.c ****   {
 1877              		.loc 1 485 6 view .LVU584
 1878 0040 40B9     		cbnz	r0, .L113
 489:Core/Src/main.c ****   {
 1879              		.loc 1 489 3 is_stmt 1 view .LVU585
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 229


 489:Core/Src/main.c ****   {
 1880              		.loc 1 489 7 is_stmt 0 view .LVU586
 1881 0042 0648     		ldr	r0, .L115
 1882 0044 FFF7FEFF 		bl	HAL_UARTEx_DisableFifoMode
 1883              	.LVL105:
 489:Core/Src/main.c ****   {
 1884              		.loc 1 489 6 view .LVU587
 1885 0048 30B9     		cbnz	r0, .L114
 503:Core/Src/main.c **** 
 1886              		.loc 1 503 1 view .LVU588
 1887 004a 08BD     		pop	{r3, pc}
 1888              	.L111:
 479:Core/Src/main.c ****   }
 1889              		.loc 1 479 5 is_stmt 1 view .LVU589
 1890 004c FFF7FEFF 		bl	Error_Handler
 1891              	.LVL106:
 1892              	.L112:
 483:Core/Src/main.c ****   }
 1893              		.loc 1 483 5 view .LVU590
 1894 0050 FFF7FEFF 		bl	Error_Handler
 1895              	.LVL107:
 1896              	.L113:
 487:Core/Src/main.c ****   }
 1897              		.loc 1 487 5 view .LVU591
 1898 0054 FFF7FEFF 		bl	Error_Handler
 1899              	.LVL108:
 1900              	.L114:
 491:Core/Src/main.c ****   }
 1901              		.loc 1 491 5 view .LVU592
 1902 0058 FFF7FEFF 		bl	Error_Handler
 1903              	.LVL109:
 1904              	.L116:
 1905              		.align	2
 1906              	.L115:
 1907 005c 00000000 		.word	huart1
 1908 0060 00380140 		.word	1073821696
 1909              		.cfi_endproc
 1910              	.LFE1830:
 1912              		.comm	flash_status,12,4
 1913              		.global	alarm_flag
 1914              		.global	period
 1915              		.comm	command_index,4,4
 1916              		.comm	command_buffer,20,4
 1917              		.comm	complete_command_flag,4,4
 1918              		.comm	rx_queue,40,4
 1919              		.comm	htim2,76,4
 1920              		.comm	hrtc,36,4
 1921              		.comm	hrng,20,4
 1922              		.comm	hdma_usart1_tx,96,4
 1923              		.comm	hdma_lpuart1_tx,96,4
 1924              		.comm	huart1,144,4
 1925              		.comm	hlpuart1,144,4
 1926              		.comm	hipcc,60,4
 1927              		.comm	hadc1,100,4
 1928              		.section	.bss.alarm_flag,"aw",%nobits
 1929              		.align	2
 1932              	alarm_flag:
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 230


 1933 0000 00000000 		.space	4
 1934              		.section	.bss.last.17201,"aw",%nobits
 1935              		.align	2
 1936              		.set	.LANCHOR0,. + 0
 1939              	last.17201:
 1940 0000 00000000 		.space	4
 1941              		.section	.bss.period,"aw",%nobits
 1942              		.align	2
 1943              		.set	.LANCHOR1,. + 0
 1946              	period:
 1947 0000 00000000 		.space	4
 1948              		.text
 1949              	.Letext0:
 1950              		.file 7 "Drivers/CMSIS/Device/ST/STM32WBxx/Include/stm32wb55xx.h"
 1951              		.file 8 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/machine/_de
 1952              		.file 9 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/_stdint
 1953              		.file 10 "Drivers/CMSIS/Device/ST/STM32WBxx/Include/system_stm32wbxx.h"
 1954              		.file 11 "Drivers/CMSIS/Device/ST/STM32WBxx/Include/stm32wbxx.h"
 1955              		.file 12 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_def.h"
 1956              		.file 13 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_dma.h"
 1957              		.file 14 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_adc.h"
 1958              		.file 15 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_flash.h"
 1959              		.file 16 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_ipcc.h"
 1960              		.file 17 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_rcc.h"
 1961              		.file 18 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_rcc_ex.h"
 1962              		.file 19 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_rng.h"
 1963              		.file 20 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_rtc.h"
 1964              		.file 21 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_tim.h"
 1965              		.file 22 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_uart.h"
 1966              		.file 23 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal.h"
 1967              		.file 24 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/lock.h
 1968              		.file 25 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/_types
 1969              		.file 26 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/lib/gcc/arm-none-eabi/9.2.1/incl
 1970              		.file 27 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/reent.
 1971              		.file 28 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/stdlib.h"
 1972              		.file 29 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_ll_lpuart.h"
 1973              		.file 30 "Core/Inc/flash.h"
 1974              		.file 31 "Core/Inc/queue.h"
 1975              		.file 32 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/time.h"
 1976              		.file 33 "Core/Inc/command.h"
 1977              		.file 34 "/usr/local/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/stdio.h"
 1978              		.file 35 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_cortex.h"
 1979              		.file 36 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_tim_ex.h"
 1980              		.file 37 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_rtc_ex.h"
 1981              		.file 38 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_uart_ex.h"
 1982              		.file 39 "Drivers/STM32WBxx_HAL_Driver/Inc/stm32wbxx_hal_pwr.h"
 1983              		.file 40 "Core/Inc/app_entry.h"
 1984              		.file 41 "<built-in>"
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 231


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:18     .text.MX_GPIO_Init:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:115    .text.MX_DMA_Init:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:121    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:232    .text.HAL_TIM_IC_CaptureCallback:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:239    .text.HAL_TIM_IC_CaptureCallback:0000000000000000 HAL_TIM_IC_CaptureCallback
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:290    .text.HAL_TIM_IC_CaptureCallback:0000000000000024 $d
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:296    .rodata.UART_CharReception_Callback.str1.4:0000000000000000 $d
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:300    .text.UART_CharReception_Callback:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:307    .text.UART_CharReception_Callback:0000000000000000 UART_CharReception_Callback
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:418    .text.UART_CharReception_Callback:000000000000005c $d
                            *COM*:0000000000000004 command_index
                            *COM*:0000000000000014 command_buffer
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:426    .text.UART_Error_Callback:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:433    .text.UART_Error_Callback:0000000000000000 UART_Error_Callback
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:509    .text.UART_Error_Callback:0000000000000020 $d
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:515    .text.Error_Handler:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:522    .text.Error_Handler:0000000000000000 Error_Handler
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:553    .text.MX_IPCC_Init:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:559    .text.MX_IPCC_Init:0000000000000000 MX_IPCC_Init
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:590    .text.MX_IPCC_Init:0000000000000014 $d
                            *COM*:000000000000003c hipcc
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:596    .text.MX_RTC_Init:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:602    .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:827    .text.MX_RTC_Init:00000000000000f8 $d
                            *COM*:0000000000000024 hrtc
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:834    .text.MX_RNG_Init:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:840    .text.MX_RNG_Init:0000000000000000 MX_RNG_Init
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:875    .text.MX_RNG_Init:0000000000000018 $d
                            *COM*:0000000000000014 hrng
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:881    .text.MX_ADC1_Init:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:887    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1016   .text.MX_ADC1_Init:0000000000000078 $d
                            *COM*:0000000000000064 hadc1
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1023   .text.MX_TIM2_Init:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1029   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1155   .text.MX_TIM2_Init:000000000000007c $d
                            *COM*:000000000000004c htim2
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1160   .text.SystemClock_Config:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1167   .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1328   .text.SystemClock_Config:00000000000000ac $d
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1333   .text.PeriphCommonClock_Config:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1340   .text.PeriphCommonClock_Config:0000000000000000 PeriphCommonClock_Config
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1400   .text.main:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1407   .text.main:0000000000000000 main
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1622   .text.main:0000000000000094 $d
                            *COM*:0000000000000004 complete_command_flag
                            *COM*:000000000000000c flash_status
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1633   .text.MX_LPUART1_UART_Init:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1640   .text.MX_LPUART1_UART_Init:0000000000000000 MX_LPUART1_UART_Init
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1794   .text.MX_LPUART1_UART_Init:0000000000000088 $d
                            *COM*:0000000000000090 hlpuart1
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1800   .text.MX_USART1_UART_Init:0000000000000000 $t
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1807   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1907   .text.MX_USART1_UART_Init:000000000000005c $d
ARM GAS  /var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s 			page 232


                            *COM*:0000000000000090 huart1
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1932   .bss.alarm_flag:0000000000000000 alarm_flag
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1946   .bss.period:0000000000000000 period
                            *COM*:0000000000000028 rx_queue
                            *COM*:0000000000000060 hdma_usart1_tx
                            *COM*:0000000000000060 hdma_lpuart1_tx
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1929   .bss.alarm_flag:0000000000000000 $d
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1935   .bss.last.17201:0000000000000000 $d
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1939   .bss.last.17201:0000000000000000 last.17201
/var/folders/lt/l_qrc8c54t93n_phsj7cf5tc0000gn/T//ccEOf6ls.s:1942   .bss.period:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
execute_command
prompt
printf
HAL_IPCC_Init
memset
HAL_RTC_Init
HAL_RTC_SetTime
HAL_RTC_SetDate
HAL_RTC_SetAlarm_IT
HAL_RTCEx_SetWakeUpTimer_IT
HAL_RNG_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_IC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_IC_ConfigChannel
HAL_PWR_EnableBkUpAccess
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_APPE_Config
MX_APPE_Init
flash_write_init
HAL_TIM_Base_Start_IT
HAL_TIM_IC_Start_IT
MX_APPE_Process
HAL_UART_Init
HAL_UARTEx_SetTxFifoThreshold
HAL_UARTEx_SetRxFifoThreshold
HAL_UARTEx_DisableFifoMode
